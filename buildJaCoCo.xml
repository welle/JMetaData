<project name="Example Ant Build with JaCoCo" default="rebuild"
	xmlns:jacoco="antlib:org.jacoco.ant">

	<description>
		Example Ant build file that demonstrates how a JaCoCo coverage report
		can be itegrated into an existing build in three simple steps.
	</description>

	<property name="debuglevel" value="source,lines,vars" />
	<property name="src.dir" location="./JMetadata/javasource" />
	<property name="src.test.dir" location="./Test/javasource" />
	<property name="result.dir" location="./reports" />
	<property name="result.classes.dir" location="${result.dir}/classes" />
	<property name="result.test-classes.dir" location="${result.dir}/classes" />
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco/jacoco.exec" />

	<!-- Step 1: Import JaCoCo Ant tasks -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="libTest/org.jacoco.ant-0.7.9-nodeps.jar" />
	</taskdef>

	<target name="clean">
		<delete dir="${result.dir}" />
	</target>

	<target name="compile">
		<mkdir dir="${result.classes.dir}" />
		<javac encoding="8859_1" destdir="${result.classes.dir}" debug="true" debuglevel="${debuglevel}" source="1.8" target="1.8" includeantruntime="false">
            <src path="JMetadata/javasource" />
            <classpath refid="JMetadata.classpath" />
        </javac>

        <javac encoding="8859_1" destdir="${result.test-classes.dir}" debug="true" debuglevel="${debuglevel}" source="1.8" target="1.8" includeantruntime="false">
            <src path="Test/javasource" />
            <classpath refid="JMetadataTest.classpath" />
        	<classpath refid="JMetadata.classpath" />
        </javac>
		<javac srcdir="${src.dir}" destdir="${result.classes.dir}"
			debug="true" includeantruntime="false" />
	</target>


	<target name="unittest">
	   <mkdir dir="reports/junit/"/>
        <copy file="Test/videosamples/Sintel_DivXPlus_6500kbps.mkv" tofile="${result.classes.dir}/aka/jmetadata/test/Sintel_DivXPlus_6500kbps.mkv" overwrite="false" verbose="true" />
		<!-- Step 2: Wrap test execution with the JaCoCo coverage task -->
		<jacoco:coverage destfile="${result.exec.file}">
			<junit fork="yes" forkmode="once" printsummary="yes"
				haltonfailure="no" showoutput="yes">
				<jvmarg value="-noverify" />

				<assertions>
					<enable />
				</assertions>
				<jvmarg value="-Xms256m" />
				<jvmarg value="-Xmx2048m" />
				<!-- Specify the name of the coverage data file to use. The value specified 
					below is the default. -->

				<classpath refid="JMetadata.classpath" />
				<classpath refid="JMetadataTest.classpath" />
				<classpath>
					<pathelement location="${result.test-classes.dir}" />
				</classpath>
				<formatter type="xml" />

				<batchtest todir="reports/junit/" haltonfailure="no">
					<fileset dir="Test/javasource">
						<include name="**/*_Test.java" />
					</fileset>
				</batchtest>

			</junit>
		</jacoco:coverage>
	</target>

	<target name="report">
		<!-- Step 3: Create coverage report -->
		<jacoco:report>

			<!-- This task needs the collected execution data and ... -->
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>

			<!-- the class files and optional source files ... -->
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${result.classes.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>

			<!-- to produce reports in different formats. -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
		</jacoco:report>
	</target>

	<target name="rebuild" depends="clean,compile,unittest,report" />

</project>