package aka.jmetadata.test;

import org.eclipse.jdt.annotation.NonNull;

import aka.jmetadata.main.JMetaDataVideo;

/**
 * This class contains tests methods for Video informations of a specific Video stream.
 *
 * @author Welle Charlotte
 */
public final class JMetaDataVideoTest {

   /**
    * Print Video informations.
    * 
    * @param jMetaDataVideo to be printed
    */
    static void printJMetadataVideo(@NonNull final JMetaDataVideo jMetaDataVideo) {
        System.out.println("JMetaDataVideo");
        System.out.println("-------------------------------------------------------");
        System.out.println("Original (in the raw stream) width in pixel AS Integer === " + jMetaDataVideo.getWidthOriginalAsInteger());
        System.out.println("Original (in the raw stream) width in pixel AS Long === " + jMetaDataVideo.getWidthOriginalAsLong());
        System.out.println("Original (in the raw stream) width in pixel AS LocalDateTime === " + jMetaDataVideo.getWidthOriginalAsLocalDateTime());
        System.out.println("Original (in the raw stream) width in pixel AS LocalTime === " + jMetaDataVideo.getWidthOriginalAsLocalTime());
        System.out.println("Original (in the raw stream) width in pixel AS String === " + jMetaDataVideo.getWidthOriginalAsString());
        System.out.println("Original (in the raw stream) width in pixel AS Boolean === " + jMetaDataVideo.getWidthOriginalAsBoolean());
        System.out.println("Original (in the raw stream) width in pixel AS BigInteger === " + jMetaDataVideo.getWidthOriginalAsBigInteger());
        System.out.println("Original (in the raw stream) width in pixel AS URL === " + jMetaDataVideo.getWidthOriginalAsURL());
        System.out.println("Delay source (Stream or empty) AS Integer === " + jMetaDataVideo.getDelayOriginalSourceAsInteger());
        System.out.println("Delay source (Stream or empty) AS Long === " + jMetaDataVideo.getDelayOriginalSourceAsLong());
        System.out.println("Delay source (Stream or empty) AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalSourceAsLocalDateTime());
        System.out.println("Delay source (Stream or empty) AS LocalTime === " + jMetaDataVideo.getDelayOriginalSourceAsLocalTime());
        System.out.println("Delay source (Stream or empty) AS String === " + jMetaDataVideo.getDelayOriginalSourceAsString());
        System.out.println("Delay source (Stream or empty) AS Boolean === " + jMetaDataVideo.getDelayOriginalSourceAsBoolean());
        System.out.println("Delay source (Stream or empty) AS BigInteger === " + jMetaDataVideo.getDelayOriginalSourceAsBigInteger());
        System.out.println("Delay source (Stream or empty) AS URL === " + jMetaDataVideo.getDelayOriginalSourceAsURL());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataVideo.getStreamOrderAsInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataVideo.getStreamOrderAsLong());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataVideo.getStreamOrderAsLocalDateTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataVideo.getStreamOrderAsLocalTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataVideo.getStreamOrderAsString());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataVideo.getStreamOrderAsBoolean());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataVideo.getStreamOrderAsBigInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataVideo.getStreamOrderAsURL());
        System.out.println("Name of the the encoding-software AS Integer === " + jMetaDataVideo.getEncodedLibraryNameAsInteger());
        System.out.println("Name of the the encoding-software AS Long === " + jMetaDataVideo.getEncodedLibraryNameAsLong());
        System.out.println("Name of the the encoding-software AS LocalDateTime === " + jMetaDataVideo.getEncodedLibraryNameAsLocalDateTime());
        System.out.println("Name of the the encoding-software AS LocalTime === " + jMetaDataVideo.getEncodedLibraryNameAsLocalTime());
        System.out.println("Name of the the encoding-software AS String === " + jMetaDataVideo.getEncodedLibraryNameAsString());
        System.out.println("Name of the the encoding-software AS Boolean === " + jMetaDataVideo.getEncodedLibraryNameAsBoolean());
        System.out.println("Name of the the encoding-software AS BigInteger === " + jMetaDataVideo.getEncodedLibraryNameAsBigInteger());
        System.out.println("Name of the the encoding-software AS URL === " + jMetaDataVideo.getEncodedLibraryNameAsURL());
        System.out.println("Multiview, how views are muxed in the container in case of it is not muxing in the stream AS Integer === " + jMetaDataVideo.getMultiViewLayoutAsInteger());
        System.out.println("Multiview, how views are muxed in the container in case of it is not muxing in the stream AS Long === " + jMetaDataVideo.getMultiViewLayoutAsLong());
        System.out.println("Multiview, how views are muxed in the container in case of it is not muxing in the stream AS LocalDateTime === " + jMetaDataVideo.getMultiViewLayoutAsLocalDateTime());
        System.out.println("Multiview, how views are muxed in the container in case of it is not muxing in the stream AS LocalTime === " + jMetaDataVideo.getMultiViewLayoutAsLocalTime());
        System.out.println("Multiview, how views are muxed in the container in case of it is not muxing in the stream AS String === " + jMetaDataVideo.getMultiViewLayoutAsString());
        System.out.println("Multiview, how views are muxed in the container in case of it is not muxing in the stream AS Boolean === " + jMetaDataVideo.getMultiViewLayoutAsBoolean());
        System.out.println("Multiview, how views are muxed in the container in case of it is not muxing in the stream AS BigInteger === " + jMetaDataVideo.getMultiViewLayoutAsBigInteger());
        System.out.println("Multiview, how views are muxed in the container in case of it is not muxing in the stream AS URL === " + jMetaDataVideo.getMultiViewLayoutAsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getDurationFirstFrameString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getDurationFirstFrameString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getDurationFirstFrameString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getDurationFirstFrameString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getDurationFirstFrameString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getDurationFirstFrameString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getDurationFirstFrameString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getDurationFirstFrameString4AsURL());
        System.out.println("Chromaticity coordinates of the source primaries AS Integer === " + jMetaDataVideo.getcolourprimariesAsInteger());
        System.out.println("Chromaticity coordinates of the source primaries AS Long === " + jMetaDataVideo.getcolourprimariesAsLong());
        System.out.println("Chromaticity coordinates of the source primaries AS LocalDateTime === " + jMetaDataVideo.getcolourprimariesAsLocalDateTime());
        System.out.println("Chromaticity coordinates of the source primaries AS LocalTime === " + jMetaDataVideo.getcolourprimariesAsLocalTime());
        System.out.println("Chromaticity coordinates of the source primaries AS String === " + jMetaDataVideo.getcolourprimariesAsString());
        System.out.println("Chromaticity coordinates of the source primaries AS Boolean === " + jMetaDataVideo.getcolourprimariesAsBoolean());
        System.out.println("Chromaticity coordinates of the source primaries AS BigInteger === " + jMetaDataVideo.getcolourprimariesAsBigInteger());
        System.out.println("Chromaticity coordinates of the source primaries AS URL === " + jMetaDataVideo.getcolourprimariesAsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getDurationFirstFrameString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getDurationFirstFrameString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getDurationFirstFrameString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getDurationFirstFrameString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getDurationFirstFrameString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getDurationFirstFrameString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getDurationFirstFrameString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getDurationFirstFrameString5AsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getDurationFirstFrameString2AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getDurationFirstFrameString2AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationFirstFrameString2AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getDurationFirstFrameString2AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getDurationFirstFrameString2AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getDurationFirstFrameString2AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getDurationFirstFrameString2AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getDurationFirstFrameString2AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationFirstFrameStringAsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getSourceDurationFirstFrameStringAsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationFirstFrameStringAsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationFirstFrameStringAsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getSourceDurationFirstFrameStringAsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationFirstFrameStringAsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationFirstFrameStringAsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getSourceDurationFirstFrameStringAsURL());
        System.out.println("Rotation (if not horizontal) AS Integer === " + jMetaDataVideo.getRotationStringAsInteger());
        System.out.println("Rotation (if not horizontal) AS Long === " + jMetaDataVideo.getRotationStringAsLong());
        System.out.println("Rotation (if not horizontal) AS LocalDateTime === " + jMetaDataVideo.getRotationStringAsLocalDateTime());
        System.out.println("Rotation (if not horizontal) AS LocalTime === " + jMetaDataVideo.getRotationStringAsLocalTime());
        System.out.println("Rotation (if not horizontal) AS String === " + jMetaDataVideo.getRotationStringAsString());
        System.out.println("Rotation (if not horizontal) AS Boolean === " + jMetaDataVideo.getRotationStringAsBoolean());
        System.out.println("Rotation (if not horizontal) AS BigInteger === " + jMetaDataVideo.getRotationStringAsBigInteger());
        System.out.println("Rotation (if not horizontal) AS URL === " + jMetaDataVideo.getRotationStringAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getDurationFirstFrameString3AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getDurationFirstFrameString3AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getDurationFirstFrameString3AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getDurationFirstFrameString3AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataVideo.getDurationFirstFrameString3AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getDurationFirstFrameString3AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getDurationFirstFrameString3AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getDurationFirstFrameString3AsURL());
        System.out.println("ScanType_StoreMethod AS Integer === " + jMetaDataVideo.getScanTypeStoreMethodAsInteger());
        System.out.println("ScanType_StoreMethod AS Long === " + jMetaDataVideo.getScanTypeStoreMethodAsLong());
        System.out.println("ScanType_StoreMethod AS LocalDateTime === " + jMetaDataVideo.getScanTypeStoreMethodAsLocalDateTime());
        System.out.println("ScanType_StoreMethod AS LocalTime === " + jMetaDataVideo.getScanTypeStoreMethodAsLocalTime());
        System.out.println("ScanType_StoreMethod AS String === " + jMetaDataVideo.getScanTypeStoreMethodAsString());
        System.out.println("ScanType_StoreMethod AS Boolean === " + jMetaDataVideo.getScanTypeStoreMethodAsBoolean());
        System.out.println("ScanType_StoreMethod AS BigInteger === " + jMetaDataVideo.getScanTypeStoreMethodAsBigInteger());
        System.out.println("ScanType_StoreMethod AS URL === " + jMetaDataVideo.getScanTypeStoreMethodAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Integer === " + jMetaDataVideo.getSourceDurationLastFrameAsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Long === " + jMetaDataVideo.getSourceDurationLastFrameAsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataVideo.getSourceDurationLastFrameAsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS LocalTime === " + jMetaDataVideo.getSourceDurationLastFrameAsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS String === " + jMetaDataVideo.getSourceDurationLastFrameAsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Boolean === " + jMetaDataVideo.getSourceDurationLastFrameAsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS BigInteger === " + jMetaDataVideo.getSourceDurationLastFrameAsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS URL === " + jMetaDataVideo.getSourceDurationLastFrameAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataVideo.getDurationFirstFrameString1AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataVideo.getDurationFirstFrameString1AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationFirstFrameString1AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataVideo.getDurationFirstFrameString1AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataVideo.getDurationFirstFrameString1AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataVideo.getDurationFirstFrameString1AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataVideo.getDurationFirstFrameString1AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataVideo.getDurationFirstFrameString1AsURL());
        System.out.println("Clean Aperture width in pixel AS Integer === " + jMetaDataVideo.getWidthCleanApertureAsInteger());
        System.out.println("Clean Aperture width in pixel AS Long === " + jMetaDataVideo.getWidthCleanApertureAsLong());
        System.out.println("Clean Aperture width in pixel AS LocalDateTime === " + jMetaDataVideo.getWidthCleanApertureAsLocalDateTime());
        System.out.println("Clean Aperture width in pixel AS LocalTime === " + jMetaDataVideo.getWidthCleanApertureAsLocalTime());
        System.out.println("Clean Aperture width in pixel AS String === " + jMetaDataVideo.getWidthCleanApertureAsString());
        System.out.println("Clean Aperture width in pixel AS Boolean === " + jMetaDataVideo.getWidthCleanApertureAsBoolean());
        System.out.println("Clean Aperture width in pixel AS BigInteger === " + jMetaDataVideo.getWidthCleanApertureAsBigInteger());
        System.out.println("Clean Aperture width in pixel AS URL === " + jMetaDataVideo.getWidthCleanApertureAsURL());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS Integer === " + jMetaDataVideo.gettransfercharacteristicsAsInteger());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS Long === " + jMetaDataVideo.gettransfercharacteristicsAsLong());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS LocalDateTime === " + jMetaDataVideo.gettransfercharacteristicsAsLocalDateTime());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS LocalTime === " + jMetaDataVideo.gettransfercharacteristicsAsLocalTime());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS String === " + jMetaDataVideo.gettransfercharacteristicsAsString());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS Boolean === " + jMetaDataVideo.gettransfercharacteristicsAsBoolean());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS BigInteger === " + jMetaDataVideo.gettransfercharacteristicsAsBigInteger());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS URL === " + jMetaDataVideo.gettransfercharacteristicsAsURL());
        System.out.println("Settings needed for decoder used, detailled (M=x N=y) AS Integer === " + jMetaDataVideo.getFormatSettingsGOPAsInteger());
        System.out.println("Settings needed for decoder used, detailled (M=x N=y) AS Long === " + jMetaDataVideo.getFormatSettingsGOPAsLong());
        System.out.println("Settings needed for decoder used, detailled (M=x N=y) AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsGOPAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled (M=x N=y) AS LocalTime === " + jMetaDataVideo.getFormatSettingsGOPAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled (M=x N=y) AS String === " + jMetaDataVideo.getFormatSettingsGOPAsString());
        System.out.println("Settings needed for decoder used, detailled (M=x N=y) AS Boolean === " + jMetaDataVideo.getFormatSettingsGOPAsBoolean());
        System.out.println("Settings needed for decoder used, detailled (M=x N=y) AS BigInteger === " + jMetaDataVideo.getFormatSettingsGOPAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled (M=x N=y) AS URL === " + jMetaDataVideo.getFormatSettingsGOPAsURL());
        System.out.println("Clean Aperture width with measurement (pixel) AS Integer === " + jMetaDataVideo.getWidthCleanApertureStringAsInteger());
        System.out.println("Clean Aperture width with measurement (pixel) AS Long === " + jMetaDataVideo.getWidthCleanApertureStringAsLong());
        System.out.println("Clean Aperture width with measurement (pixel) AS LocalDateTime === " + jMetaDataVideo.getWidthCleanApertureStringAsLocalDateTime());
        System.out.println("Clean Aperture width with measurement (pixel) AS LocalTime === " + jMetaDataVideo.getWidthCleanApertureStringAsLocalTime());
        System.out.println("Clean Aperture width with measurement (pixel) AS String === " + jMetaDataVideo.getWidthCleanApertureStringAsString());
        System.out.println("Clean Aperture width with measurement (pixel) AS Boolean === " + jMetaDataVideo.getWidthCleanApertureStringAsBoolean());
        System.out.println("Clean Aperture width with measurement (pixel) AS BigInteger === " + jMetaDataVideo.getWidthCleanApertureStringAsBigInteger());
        System.out.println("Clean Aperture width with measurement (pixel) AS URL === " + jMetaDataVideo.getWidthCleanApertureStringAsURL());
        System.out.println("Compression mode of the Format AS Integer === " + jMetaDataVideo.getFormatCompressionAsInteger());
        System.out.println("Compression mode of the Format AS Long === " + jMetaDataVideo.getFormatCompressionAsLong());
        System.out.println("Compression mode of the Format AS LocalDateTime === " + jMetaDataVideo.getFormatCompressionAsLocalDateTime());
        System.out.println("Compression mode of the Format AS LocalTime === " + jMetaDataVideo.getFormatCompressionAsLocalTime());
        System.out.println("Compression mode of the Format AS String === " + jMetaDataVideo.getFormatCompressionAsString());
        System.out.println("Compression mode of the Format AS Boolean === " + jMetaDataVideo.getFormatCompressionAsBoolean());
        System.out.println("Compression mode of the Format AS BigInteger === " + jMetaDataVideo.getFormatCompressionAsBigInteger());
        System.out.println("Compression mode of the Format AS URL === " + jMetaDataVideo.getFormatCompressionAsURL());
        System.out.println("Alignment/String AS Integer === " + jMetaDataVideo.getAlignmentStringAsInteger());
        System.out.println("Alignment/String AS Long === " + jMetaDataVideo.getAlignmentStringAsLong());
        System.out.println("Alignment/String AS LocalDateTime === " + jMetaDataVideo.getAlignmentStringAsLocalDateTime());
        System.out.println("Alignment/String AS LocalTime === " + jMetaDataVideo.getAlignmentStringAsLocalTime());
        System.out.println("Alignment/String AS String === " + jMetaDataVideo.getAlignmentStringAsString());
        System.out.println("Alignment/String AS Boolean === " + jMetaDataVideo.getAlignmentStringAsBoolean());
        System.out.println("Alignment/String AS BigInteger === " + jMetaDataVideo.getAlignmentStringAsBigInteger());
        System.out.println("Alignment/String AS URL === " + jMetaDataVideo.getAlignmentStringAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataVideo.getDelayStringAsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataVideo.getDelayStringAsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataVideo.getDelayStringAsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataVideo.getDelayStringAsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataVideo.getDelayStringAsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataVideo.getDelayStringAsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataVideo.getDelayStringAsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataVideo.getDelayStringAsURL());
        System.out.println("Source Encoded Streamsize in with percentage value AS Integer === " + jMetaDataVideo.getSourceStreamSizeEncodedStringAsInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS Long === " + jMetaDataVideo.getSourceStreamSizeEncodedStringAsLong());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeEncodedStringAsLocalDateTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeEncodedStringAsLocalTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS String === " + jMetaDataVideo.getSourceStreamSizeEncodedStringAsString());
        System.out.println("Source Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataVideo.getSourceStreamSizeEncodedStringAsBoolean());
        System.out.println("Source Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeEncodedStringAsBigInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS URL === " + jMetaDataVideo.getSourceStreamSizeEncodedStringAsURL());
        System.out.println("Manual description given by the container AS Integer === " + jMetaDataVideo.getCodecIDDescriptionAsInteger());
        System.out.println("Manual description given by the container AS Long === " + jMetaDataVideo.getCodecIDDescriptionAsLong());
        System.out.println("Manual description given by the container AS LocalDateTime === " + jMetaDataVideo.getCodecIDDescriptionAsLocalDateTime());
        System.out.println("Manual description given by the container AS LocalTime === " + jMetaDataVideo.getCodecIDDescriptionAsLocalTime());
        System.out.println("Manual description given by the container AS String === " + jMetaDataVideo.getCodecIDDescriptionAsString());
        System.out.println("Manual description given by the container AS Boolean === " + jMetaDataVideo.getCodecIDDescriptionAsBoolean());
        System.out.println("Manual description given by the container AS BigInteger === " + jMetaDataVideo.getCodecIDDescriptionAsBigInteger());
        System.out.println("Manual description given by the container AS URL === " + jMetaDataVideo.getCodecIDDescriptionAsURL());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Integer === " + jMetaDataVideo.getStatusAsInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Long === " + jMetaDataVideo.getStatusAsLong());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalDateTime === " + jMetaDataVideo.getStatusAsLocalDateTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalTime === " + jMetaDataVideo.getStatusAsLocalTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS String === " + jMetaDataVideo.getStatusAsString());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Boolean === " + jMetaDataVideo.getStatusAsBoolean());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS BigInteger === " + jMetaDataVideo.getStatusAsBigInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS URL === " + jMetaDataVideo.getStatusAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getDurationFirstFrameStringAsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getDurationFirstFrameStringAsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationFirstFrameStringAsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getDurationFirstFrameStringAsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getDurationFirstFrameStringAsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getDurationFirstFrameStringAsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getDurationFirstFrameStringAsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getDurationFirstFrameStringAsURL());
        System.out.println("Frames per second AS Integer === " + jMetaDataVideo.getFrameRateAsInteger());
        System.out.println("Frames per second AS Long === " + jMetaDataVideo.getFrameRateAsLong());
        System.out.println("Frames per second AS LocalDateTime === " + jMetaDataVideo.getFrameRateAsLocalDateTime());
        System.out.println("Frames per second AS LocalTime === " + jMetaDataVideo.getFrameRateAsLocalTime());
        System.out.println("Frames per second AS String === " + jMetaDataVideo.getFrameRateAsString());
        System.out.println("Frames per second AS Boolean === " + jMetaDataVideo.getFrameRateAsBoolean());
        System.out.println("Frames per second AS BigInteger === " + jMetaDataVideo.getFrameRateAsBigInteger());
        System.out.println("Frames per second AS URL === " + jMetaDataVideo.getFrameRateAsURL());
        System.out.println("How this file is muxed in the container AS Integer === " + jMetaDataVideo.getMuxingModeAsInteger());
        System.out.println("How this file is muxed in the container AS Long === " + jMetaDataVideo.getMuxingModeAsLong());
        System.out.println("How this file is muxed in the container AS LocalDateTime === " + jMetaDataVideo.getMuxingModeAsLocalDateTime());
        System.out.println("How this file is muxed in the container AS LocalTime === " + jMetaDataVideo.getMuxingModeAsLocalTime());
        System.out.println("How this file is muxed in the container AS String === " + jMetaDataVideo.getMuxingModeAsString());
        System.out.println("How this file is muxed in the container AS Boolean === " + jMetaDataVideo.getMuxingModeAsBoolean());
        System.out.println("How this file is muxed in the container AS BigInteger === " + jMetaDataVideo.getMuxingModeAsBigInteger());
        System.out.println("How this file is muxed in the container AS URL === " + jMetaDataVideo.getMuxingModeAsURL());
        System.out.println("ScanType_StoreMethod/String AS Integer === " + jMetaDataVideo.getScanTypeStoreMethodStringAsInteger());
        System.out.println("ScanType_StoreMethod/String AS Long === " + jMetaDataVideo.getScanTypeStoreMethodStringAsLong());
        System.out.println("ScanType_StoreMethod/String AS LocalDateTime === " + jMetaDataVideo.getScanTypeStoreMethodStringAsLocalDateTime());
        System.out.println("ScanType_StoreMethod/String AS LocalTime === " + jMetaDataVideo.getScanTypeStoreMethodStringAsLocalTime());
        System.out.println("ScanType_StoreMethod/String AS String === " + jMetaDataVideo.getScanTypeStoreMethodStringAsString());
        System.out.println("ScanType_StoreMethod/String AS Boolean === " + jMetaDataVideo.getScanTypeStoreMethodStringAsBoolean());
        System.out.println("ScanType_StoreMethod/String AS BigInteger === " + jMetaDataVideo.getScanTypeStoreMethodStringAsBigInteger());
        System.out.println("ScanType_StoreMethod/String AS URL === " + jMetaDataVideo.getScanTypeStoreMethodStringAsURL());
        System.out.println("Delay settings (in case of timecode for example) AS Integer === " + jMetaDataVideo.getDelaySettingsAsInteger());
        System.out.println("Delay settings (in case of timecode for example) AS Long === " + jMetaDataVideo.getDelaySettingsAsLong());
        System.out.println("Delay settings (in case of timecode for example) AS LocalDateTime === " + jMetaDataVideo.getDelaySettingsAsLocalDateTime());
        System.out.println("Delay settings (in case of timecode for example) AS LocalTime === " + jMetaDataVideo.getDelaySettingsAsLocalTime());
        System.out.println("Delay settings (in case of timecode for example) AS String === " + jMetaDataVideo.getDelaySettingsAsString());
        System.out.println("Delay settings (in case of timecode for example) AS Boolean === " + jMetaDataVideo.getDelaySettingsAsBoolean());
        System.out.println("Delay settings (in case of timecode for example) AS BigInteger === " + jMetaDataVideo.getDelaySettingsAsBigInteger());
        System.out.println("Delay settings (in case of timecode for example) AS URL === " + jMetaDataVideo.getDelaySettingsAsURL());
        System.out.println("Source Encoded Streamsize in bytes AS Integer === " + jMetaDataVideo.getSourceStreamSizeEncodedAsInteger());
        System.out.println("Source Encoded Streamsize in bytes AS Long === " + jMetaDataVideo.getSourceStreamSizeEncodedAsLong());
        System.out.println("Source Encoded Streamsize in bytes AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeEncodedAsLocalDateTime());
        System.out.println("Source Encoded Streamsize in bytes AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeEncodedAsLocalTime());
        System.out.println("Source Encoded Streamsize in bytes AS String === " + jMetaDataVideo.getSourceStreamSizeEncodedAsString());
        System.out.println("Source Encoded Streamsize in bytes AS Boolean === " + jMetaDataVideo.getSourceStreamSizeEncodedAsBoolean());
        System.out.println("Source Encoded Streamsize in bytes AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeEncodedAsBigInteger());
        System.out.println("Source Encoded Streamsize in bytes AS URL === " + jMetaDataVideo.getSourceStreamSizeEncodedAsURL());
        System.out.println("Clean Aperture Display Aspect ratio AS Integer === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureStringAsInteger());
        System.out.println("Clean Aperture Display Aspect ratio AS Long === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureStringAsLong());
        System.out.println("Clean Aperture Display Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureStringAsLocalDateTime());
        System.out.println("Clean Aperture Display Aspect ratio AS LocalTime === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureStringAsLocalTime());
        System.out.println("Clean Aperture Display Aspect ratio AS String === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureStringAsString());
        System.out.println("Clean Aperture Display Aspect ratio AS Boolean === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureStringAsBoolean());
        System.out.println("Clean Aperture Display Aspect ratio AS BigInteger === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureStringAsBigInteger());
        System.out.println("Clean Aperture Display Aspect ratio AS URL === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureStringAsURL());
        System.out.println("Bit rate mode (Variable, Cconstant) AS Integer === " + jMetaDataVideo.getBitRateModeStringAsInteger());
        System.out.println("Bit rate mode (Variable, Cconstant) AS Long === " + jMetaDataVideo.getBitRateModeStringAsLong());
        System.out.println("Bit rate mode (Variable, Cconstant) AS LocalDateTime === " + jMetaDataVideo.getBitRateModeStringAsLocalDateTime());
        System.out.println("Bit rate mode (Variable, Cconstant) AS LocalTime === " + jMetaDataVideo.getBitRateModeStringAsLocalTime());
        System.out.println("Bit rate mode (Variable, Cconstant) AS String === " + jMetaDataVideo.getBitRateModeStringAsString());
        System.out.println("Bit rate mode (Variable, Cconstant) AS Boolean === " + jMetaDataVideo.getBitRateModeStringAsBoolean());
        System.out.println("Bit rate mode (Variable, Cconstant) AS BigInteger === " + jMetaDataVideo.getBitRateModeStringAsBigInteger());
        System.out.println("Bit rate mode (Variable, Cconstant) AS URL === " + jMetaDataVideo.getBitRateModeStringAsURL());
        System.out.println("Multiview, count of views AS Integer === " + jMetaDataVideo.getMultiViewCountAsInteger());
        System.out.println("Multiview, count of views AS Long === " + jMetaDataVideo.getMultiViewCountAsLong());
        System.out.println("Multiview, count of views AS LocalDateTime === " + jMetaDataVideo.getMultiViewCountAsLocalDateTime());
        System.out.println("Multiview, count of views AS LocalTime === " + jMetaDataVideo.getMultiViewCountAsLocalTime());
        System.out.println("Multiview, count of views AS String === " + jMetaDataVideo.getMultiViewCountAsString());
        System.out.println("Multiview, count of views AS Boolean === " + jMetaDataVideo.getMultiViewCountAsBoolean());
        System.out.println("Multiview, count of views AS BigInteger === " + jMetaDataVideo.getMultiViewCountAsBigInteger());
        System.out.println("Multiview, count of views AS URL === " + jMetaDataVideo.getMultiViewCountAsURL());
        System.out.println("Offset between original width and displayed width in pixel AS Integer === " + jMetaDataVideo.getWidthOffsetStringAsInteger());
        System.out.println("Offset between original width and displayed width in pixel AS Long === " + jMetaDataVideo.getWidthOffsetStringAsLong());
        System.out.println("Offset between original width and displayed width in pixel AS LocalDateTime === " + jMetaDataVideo.getWidthOffsetStringAsLocalDateTime());
        System.out.println("Offset between original width and displayed width in pixel AS LocalTime === " + jMetaDataVideo.getWidthOffsetStringAsLocalTime());
        System.out.println("Offset between original width and displayed width in pixel AS String === " + jMetaDataVideo.getWidthOffsetStringAsString());
        System.out.println("Offset between original width and displayed width in pixel AS Boolean === " + jMetaDataVideo.getWidthOffsetStringAsBoolean());
        System.out.println("Offset between original width and displayed width in pixel AS BigInteger === " + jMetaDataVideo.getWidthOffsetStringAsBigInteger());
        System.out.println("Offset between original width and displayed width in pixel AS URL === " + jMetaDataVideo.getWidthOffsetStringAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsBVOPStringAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsBVOPStringAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsBVOPStringAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsBVOPStringAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsBVOPStringAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsBVOPStringAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsBVOPStringAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsBVOPStringAsURL());
        System.out.println("Minimum Frames per second (with measurement) AS Integer === " + jMetaDataVideo.getFrameRateMinimumStringAsInteger());
        System.out.println("Minimum Frames per second (with measurement) AS Long === " + jMetaDataVideo.getFrameRateMinimumStringAsLong());
        System.out.println("Minimum Frames per second (with measurement) AS LocalDateTime === " + jMetaDataVideo.getFrameRateMinimumStringAsLocalDateTime());
        System.out.println("Minimum Frames per second (with measurement) AS LocalTime === " + jMetaDataVideo.getFrameRateMinimumStringAsLocalTime());
        System.out.println("Minimum Frames per second (with measurement) AS String === " + jMetaDataVideo.getFrameRateMinimumStringAsString());
        System.out.println("Minimum Frames per second (with measurement) AS Boolean === " + jMetaDataVideo.getFrameRateMinimumStringAsBoolean());
        System.out.println("Minimum Frames per second (with measurement) AS BigInteger === " + jMetaDataVideo.getFrameRateMinimumStringAsBigInteger());
        System.out.println("Minimum Frames per second (with measurement) AS URL === " + jMetaDataVideo.getFrameRateMinimumStringAsURL());
        System.out.println("Version of encoding-software AS Integer === " + jMetaDataVideo.getEncodedLibraryVersionAsInteger());
        System.out.println("Version of encoding-software AS Long === " + jMetaDataVideo.getEncodedLibraryVersionAsLong());
        System.out.println("Version of encoding-software AS LocalDateTime === " + jMetaDataVideo.getEncodedLibraryVersionAsLocalDateTime());
        System.out.println("Version of encoding-software AS LocalTime === " + jMetaDataVideo.getEncodedLibraryVersionAsLocalTime());
        System.out.println("Version of encoding-software AS String === " + jMetaDataVideo.getEncodedLibraryVersionAsString());
        System.out.println("Version of encoding-software AS Boolean === " + jMetaDataVideo.getEncodedLibraryVersionAsBoolean());
        System.out.println("Version of encoding-software AS BigInteger === " + jMetaDataVideo.getEncodedLibraryVersionAsBigInteger());
        System.out.println("Version of encoding-software AS URL === " + jMetaDataVideo.getEncodedLibraryVersionAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsFrameModeAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsFrameModeAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsFrameModeAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsFrameModeAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsFrameModeAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsFrameModeAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsFrameModeAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsFrameModeAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationLastFrameStringAsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getSourceDurationLastFrameStringAsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationLastFrameStringAsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationLastFrameStringAsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getSourceDurationLastFrameStringAsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationLastFrameStringAsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationLastFrameStringAsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getSourceDurationLastFrameStringAsURL());
        System.out.println("Info on the codec AS Integer === " + jMetaDataVideo.getCodecIDInfoAsInteger());
        System.out.println("Info on the codec AS Long === " + jMetaDataVideo.getCodecIDInfoAsLong());
        System.out.println("Info on the codec AS LocalDateTime === " + jMetaDataVideo.getCodecIDInfoAsLocalDateTime());
        System.out.println("Info on the codec AS LocalTime === " + jMetaDataVideo.getCodecIDInfoAsLocalTime());
        System.out.println("Info on the codec AS String === " + jMetaDataVideo.getCodecIDInfoAsString());
        System.out.println("Info on the codec AS Boolean === " + jMetaDataVideo.getCodecIDInfoAsBoolean());
        System.out.println("Info on the codec AS BigInteger === " + jMetaDataVideo.getCodecIDInfoAsBigInteger());
        System.out.println("Info on the codec AS URL === " + jMetaDataVideo.getCodecIDInfoAsURL());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS Integer === " + jMetaDataVideo.getDisplayAspectRatioOriginalAsInteger());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS Long === " + jMetaDataVideo.getDisplayAspectRatioOriginalAsLong());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getDisplayAspectRatioOriginalAsLocalDateTime());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS LocalTime === " + jMetaDataVideo.getDisplayAspectRatioOriginalAsLocalTime());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS String === " + jMetaDataVideo.getDisplayAspectRatioOriginalAsString());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS Boolean === " + jMetaDataVideo.getDisplayAspectRatioOriginalAsBoolean());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS BigInteger === " + jMetaDataVideo.getDisplayAspectRatioOriginalAsBigInteger());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS URL === " + jMetaDataVideo.getDisplayAspectRatioOriginalAsURL());
        System.out.println("Presence of colour description AS Integer === " + jMetaDataVideo.getcolourdescriptionpresentOriginalAsInteger());
        System.out.println("Presence of colour description AS Long === " + jMetaDataVideo.getcolourdescriptionpresentOriginalAsLong());
        System.out.println("Presence of colour description AS LocalDateTime === " + jMetaDataVideo.getcolourdescriptionpresentOriginalAsLocalDateTime());
        System.out.println("Presence of colour description AS LocalTime === " + jMetaDataVideo.getcolourdescriptionpresentOriginalAsLocalTime());
        System.out.println("Presence of colour description AS String === " + jMetaDataVideo.getcolourdescriptionpresentOriginalAsString());
        System.out.println("Presence of colour description AS Boolean === " + jMetaDataVideo.getcolourdescriptionpresentOriginalAsBoolean());
        System.out.println("Presence of colour description AS BigInteger === " + jMetaDataVideo.getcolourdescriptionpresentOriginalAsBigInteger());
        System.out.println("Presence of colour description AS URL === " + jMetaDataVideo.getcolourdescriptionpresentOriginalAsURL());
        System.out.println("Streamsize in bytes AS Integer === " + jMetaDataVideo.getStreamSizeAsInteger());
        System.out.println("Streamsize in bytes AS Long === " + jMetaDataVideo.getStreamSizeAsLong());
        System.out.println("Streamsize in bytes AS LocalDateTime === " + jMetaDataVideo.getStreamSizeAsLocalDateTime());
        System.out.println("Streamsize in bytes AS LocalTime === " + jMetaDataVideo.getStreamSizeAsLocalTime());
        System.out.println("Streamsize in bytes AS String === " + jMetaDataVideo.getStreamSizeAsString());
        System.out.println("Streamsize in bytes AS Boolean === " + jMetaDataVideo.getStreamSizeAsBoolean());
        System.out.println("Streamsize in bytes AS BigInteger === " + jMetaDataVideo.getStreamSizeAsBigInteger());
        System.out.println("Streamsize in bytes AS URL === " + jMetaDataVideo.getStreamSizeAsURL());
        System.out.println("Active Format Description (text) AS Integer === " + jMetaDataVideo.getActiveFormatDescriptionStringAsInteger());
        System.out.println("Active Format Description (text) AS Long === " + jMetaDataVideo.getActiveFormatDescriptionStringAsLong());
        System.out.println("Active Format Description (text) AS LocalDateTime === " + jMetaDataVideo.getActiveFormatDescriptionStringAsLocalDateTime());
        System.out.println("Active Format Description (text) AS LocalTime === " + jMetaDataVideo.getActiveFormatDescriptionStringAsLocalTime());
        System.out.println("Active Format Description (text) AS String === " + jMetaDataVideo.getActiveFormatDescriptionStringAsString());
        System.out.println("Active Format Description (text) AS Boolean === " + jMetaDataVideo.getActiveFormatDescriptionStringAsBoolean());
        System.out.println("Active Format Description (text) AS BigInteger === " + jMetaDataVideo.getActiveFormatDescriptionStringAsBigInteger());
        System.out.println("Active Format Description (text) AS URL === " + jMetaDataVideo.getActiveFormatDescriptionStringAsURL());
        System.out.println("Width (aperture size if present) with measurement (pixel) AS Integer === " + jMetaDataVideo.getWidthStringAsInteger());
        System.out.println("Width (aperture size if present) with measurement (pixel) AS Long === " + jMetaDataVideo.getWidthStringAsLong());
        System.out.println("Width (aperture size if present) with measurement (pixel) AS LocalDateTime === " + jMetaDataVideo.getWidthStringAsLocalDateTime());
        System.out.println("Width (aperture size if present) with measurement (pixel) AS LocalTime === " + jMetaDataVideo.getWidthStringAsLocalTime());
        System.out.println("Width (aperture size if present) with measurement (pixel) AS String === " + jMetaDataVideo.getWidthStringAsString());
        System.out.println("Width (aperture size if present) with measurement (pixel) AS Boolean === " + jMetaDataVideo.getWidthStringAsBoolean());
        System.out.println("Width (aperture size if present) with measurement (pixel) AS BigInteger === " + jMetaDataVideo.getWidthStringAsBigInteger());
        System.out.println("Width (aperture size if present) with measurement (pixel) AS URL === " + jMetaDataVideo.getWidthStringAsURL());
        System.out.println("Info about Format AS Integer === " + jMetaDataVideo.getFormatInfoAsInteger());
        System.out.println("Info about Format AS Long === " + jMetaDataVideo.getFormatInfoAsLong());
        System.out.println("Info about Format AS LocalDateTime === " + jMetaDataVideo.getFormatInfoAsLocalDateTime());
        System.out.println("Info about Format AS LocalTime === " + jMetaDataVideo.getFormatInfoAsLocalTime());
        System.out.println("Info about Format AS String === " + jMetaDataVideo.getFormatInfoAsString());
        System.out.println("Info about Format AS Boolean === " + jMetaDataVideo.getFormatInfoAsBoolean());
        System.out.println("Info about Format AS BigInteger === " + jMetaDataVideo.getFormatInfoAsBigInteger());
        System.out.println("Info about Format AS URL === " + jMetaDataVideo.getFormatInfoAsURL());
        System.out.println("Source_StreamSize/String1 AS Integer === " + jMetaDataVideo.getSourceStreamSizeString1AsInteger());
        System.out.println("Source_StreamSize/String1 AS Long === " + jMetaDataVideo.getSourceStreamSizeString1AsLong());
        System.out.println("Source_StreamSize/String1 AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeString1AsLocalDateTime());
        System.out.println("Source_StreamSize/String1 AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeString1AsLocalTime());
        System.out.println("Source_StreamSize/String1 AS String === " + jMetaDataVideo.getSourceStreamSizeString1AsString());
        System.out.println("Source_StreamSize/String1 AS Boolean === " + jMetaDataVideo.getSourceStreamSizeString1AsBoolean());
        System.out.println("Source_StreamSize/String1 AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeString1AsBigInteger());
        System.out.println("Source_StreamSize/String1 AS URL === " + jMetaDataVideo.getSourceStreamSizeString1AsURL());
        System.out.println("Source Stream size divided by file size AS Integer === " + jMetaDataVideo.getSourceStreamSizeProportionAsInteger());
        System.out.println("Source Stream size divided by file size AS Long === " + jMetaDataVideo.getSourceStreamSizeProportionAsLong());
        System.out.println("Source Stream size divided by file size AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeProportionAsLocalDateTime());
        System.out.println("Source Stream size divided by file size AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeProportionAsLocalTime());
        System.out.println("Source Stream size divided by file size AS String === " + jMetaDataVideo.getSourceStreamSizeProportionAsString());
        System.out.println("Source Stream size divided by file size AS Boolean === " + jMetaDataVideo.getSourceStreamSizeProportionAsBoolean());
        System.out.println("Source Stream size divided by file size AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeProportionAsBigInteger());
        System.out.println("Source Stream size divided by file size AS URL === " + jMetaDataVideo.getSourceStreamSizeProportionAsURL());
        System.out.println("Homepage for more details about this codec AS Integer === " + jMetaDataVideo.getCodecIDUrlAsInteger());
        System.out.println("Homepage for more details about this codec AS Long === " + jMetaDataVideo.getCodecIDUrlAsLong());
        System.out.println("Homepage for more details about this codec AS LocalDateTime === " + jMetaDataVideo.getCodecIDUrlAsLocalDateTime());
        System.out.println("Homepage for more details about this codec AS LocalTime === " + jMetaDataVideo.getCodecIDUrlAsLocalTime());
        System.out.println("Homepage for more details about this codec AS String === " + jMetaDataVideo.getCodecIDUrlAsString());
        System.out.println("Homepage for more details about this codec AS Boolean === " + jMetaDataVideo.getCodecIDUrlAsBoolean());
        System.out.println("Homepage for more details about this codec AS BigInteger === " + jMetaDataVideo.getCodecIDUrlAsBigInteger());
        System.out.println("Homepage for more details about this codec AS URL === " + jMetaDataVideo.getCodecIDUrlAsURL());
        System.out.println("Source_StreamSize/String2 AS Integer === " + jMetaDataVideo.getSourceStreamSizeString2AsInteger());
        System.out.println("Source_StreamSize/String2 AS Long === " + jMetaDataVideo.getSourceStreamSizeString2AsLong());
        System.out.println("Source_StreamSize/String2 AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeString2AsLocalDateTime());
        System.out.println("Source_StreamSize/String2 AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeString2AsLocalTime());
        System.out.println("Source_StreamSize/String2 AS String === " + jMetaDataVideo.getSourceStreamSizeString2AsString());
        System.out.println("Source_StreamSize/String2 AS Boolean === " + jMetaDataVideo.getSourceStreamSizeString2AsBoolean());
        System.out.println("Source_StreamSize/String2 AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeString2AsBigInteger());
        System.out.println("Source_StreamSize/String2 AS URL === " + jMetaDataVideo.getSourceStreamSizeString2AsURL());
        System.out.println("Height with measurement (pixel) AS Integer === " + jMetaDataVideo.getHeightStringAsInteger());
        System.out.println("Height with measurement (pixel) AS Long === " + jMetaDataVideo.getHeightStringAsLong());
        System.out.println("Height with measurement (pixel) AS LocalDateTime === " + jMetaDataVideo.getHeightStringAsLocalDateTime());
        System.out.println("Height with measurement (pixel) AS LocalTime === " + jMetaDataVideo.getHeightStringAsLocalTime());
        System.out.println("Height with measurement (pixel) AS String === " + jMetaDataVideo.getHeightStringAsString());
        System.out.println("Height with measurement (pixel) AS Boolean === " + jMetaDataVideo.getHeightStringAsBoolean());
        System.out.println("Height with measurement (pixel) AS BigInteger === " + jMetaDataVideo.getHeightStringAsBigInteger());
        System.out.println("Height with measurement (pixel) AS URL === " + jMetaDataVideo.getHeightStringAsURL());
        System.out.println("Source Streamsize in with percentage value AS Integer === " + jMetaDataVideo.getSourceStreamSizeString5AsInteger());
        System.out.println("Source Streamsize in with percentage value AS Long === " + jMetaDataVideo.getSourceStreamSizeString5AsLong());
        System.out.println("Source Streamsize in with percentage value AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeString5AsLocalDateTime());
        System.out.println("Source Streamsize in with percentage value AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeString5AsLocalTime());
        System.out.println("Source Streamsize in with percentage value AS String === " + jMetaDataVideo.getSourceStreamSizeString5AsString());
        System.out.println("Source Streamsize in with percentage value AS Boolean === " + jMetaDataVideo.getSourceStreamSizeString5AsBoolean());
        System.out.println("Source Streamsize in with percentage value AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeString5AsBigInteger());
        System.out.println("Source Streamsize in with percentage value AS URL === " + jMetaDataVideo.getSourceStreamSizeString5AsURL());
        System.out.println("Source_StreamSize/String3 AS Integer === " + jMetaDataVideo.getSourceStreamSizeString3AsInteger());
        System.out.println("Source_StreamSize/String3 AS Long === " + jMetaDataVideo.getSourceStreamSizeString3AsLong());
        System.out.println("Source_StreamSize/String3 AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeString3AsLocalDateTime());
        System.out.println("Source_StreamSize/String3 AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeString3AsLocalTime());
        System.out.println("Source_StreamSize/String3 AS String === " + jMetaDataVideo.getSourceStreamSizeString3AsString());
        System.out.println("Source_StreamSize/String3 AS Boolean === " + jMetaDataVideo.getSourceStreamSizeString3AsBoolean());
        System.out.println("Source_StreamSize/String3 AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeString3AsBigInteger());
        System.out.println("Source_StreamSize/String3 AS URL === " + jMetaDataVideo.getSourceStreamSizeString3AsURL());
        System.out.println("Source_StreamSize/String4 AS Integer === " + jMetaDataVideo.getSourceStreamSizeString4AsInteger());
        System.out.println("Source_StreamSize/String4 AS Long === " + jMetaDataVideo.getSourceStreamSizeString4AsLong());
        System.out.println("Source_StreamSize/String4 AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeString4AsLocalDateTime());
        System.out.println("Source_StreamSize/String4 AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeString4AsLocalTime());
        System.out.println("Source_StreamSize/String4 AS String === " + jMetaDataVideo.getSourceStreamSizeString4AsString());
        System.out.println("Source_StreamSize/String4 AS Boolean === " + jMetaDataVideo.getSourceStreamSizeString4AsBoolean());
        System.out.println("Source_StreamSize/String4 AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeString4AsBigInteger());
        System.out.println("Source_StreamSize/String4 AS URL === " + jMetaDataVideo.getSourceStreamSizeString4AsURL());
        System.out.println("Set if that track should not be used AS Integer === " + jMetaDataVideo.getDisabledStringAsInteger());
        System.out.println("Set if that track should not be used AS Long === " + jMetaDataVideo.getDisabledStringAsLong());
        System.out.println("Set if that track should not be used AS LocalDateTime === " + jMetaDataVideo.getDisabledStringAsLocalDateTime());
        System.out.println("Set if that track should not be used AS LocalTime === " + jMetaDataVideo.getDisabledStringAsLocalTime());
        System.out.println("Set if that track should not be used AS String === " + jMetaDataVideo.getDisabledStringAsString());
        System.out.println("Set if that track should not be used AS Boolean === " + jMetaDataVideo.getDisabledStringAsBoolean());
        System.out.println("Set if that track should not be used AS BigInteger === " + jMetaDataVideo.getDisabledStringAsBigInteger());
        System.out.println("Set if that track should not be used AS URL === " + jMetaDataVideo.getDisabledStringAsURL());
        System.out.println("ScanType_Original/String AS Integer === " + jMetaDataVideo.getScanTypeOriginalStringAsInteger());
        System.out.println("ScanType_Original/String AS Long === " + jMetaDataVideo.getScanTypeOriginalStringAsLong());
        System.out.println("ScanType_Original/String AS LocalDateTime === " + jMetaDataVideo.getScanTypeOriginalStringAsLocalDateTime());
        System.out.println("ScanType_Original/String AS LocalTime === " + jMetaDataVideo.getScanTypeOriginalStringAsLocalTime());
        System.out.println("ScanType_Original/String AS String === " + jMetaDataVideo.getScanTypeOriginalStringAsString());
        System.out.println("ScanType_Original/String AS Boolean === " + jMetaDataVideo.getScanTypeOriginalStringAsBoolean());
        System.out.println("ScanType_Original/String AS BigInteger === " + jMetaDataVideo.getScanTypeOriginalStringAsBigInteger());
        System.out.println("ScanType_Original/String AS URL === " + jMetaDataVideo.getScanTypeOriginalStringAsURL());
        System.out.println("Operating System of encoding-software AS Integer === " + jMetaDataVideo.getEncodedOperatingSystemAsInteger());
        System.out.println("Operating System of encoding-software AS Long === " + jMetaDataVideo.getEncodedOperatingSystemAsLong());
        System.out.println("Operating System of encoding-software AS LocalDateTime === " + jMetaDataVideo.getEncodedOperatingSystemAsLocalDateTime());
        System.out.println("Operating System of encoding-software AS LocalTime === " + jMetaDataVideo.getEncodedOperatingSystemAsLocalTime());
        System.out.println("Operating System of encoding-software AS String === " + jMetaDataVideo.getEncodedOperatingSystemAsString());
        System.out.println("Operating System of encoding-software AS Boolean === " + jMetaDataVideo.getEncodedOperatingSystemAsBoolean());
        System.out.println("Operating System of encoding-software AS BigInteger === " + jMetaDataVideo.getEncodedOperatingSystemAsBigInteger());
        System.out.println("Operating System of encoding-software AS URL === " + jMetaDataVideo.getEncodedOperatingSystemAsURL());
        System.out.println("Sampled height AS Integer === " + jMetaDataVideo.getSampledHeightAsInteger());
        System.out.println("Sampled height AS Long === " + jMetaDataVideo.getSampledHeightAsLong());
        System.out.println("Sampled height AS LocalDateTime === " + jMetaDataVideo.getSampledHeightAsLocalDateTime());
        System.out.println("Sampled height AS LocalTime === " + jMetaDataVideo.getSampledHeightAsLocalTime());
        System.out.println("Sampled height AS String === " + jMetaDataVideo.getSampledHeightAsString());
        System.out.println("Sampled height AS Boolean === " + jMetaDataVideo.getSampledHeightAsBoolean());
        System.out.println("Sampled height AS BigInteger === " + jMetaDataVideo.getSampledHeightAsBigInteger());
        System.out.println("Sampled height AS URL === " + jMetaDataVideo.getSampledHeightAsURL());
        System.out.println("Name of the company AS Integer === " + jMetaDataVideo.getEncodedApplicationCompanyNameAsInteger());
        System.out.println("Name of the company AS Long === " + jMetaDataVideo.getEncodedApplicationCompanyNameAsLong());
        System.out.println("Name of the company AS LocalDateTime === " + jMetaDataVideo.getEncodedApplicationCompanyNameAsLocalDateTime());
        System.out.println("Name of the company AS LocalTime === " + jMetaDataVideo.getEncodedApplicationCompanyNameAsLocalTime());
        System.out.println("Name of the company AS String === " + jMetaDataVideo.getEncodedApplicationCompanyNameAsString());
        System.out.println("Name of the company AS Boolean === " + jMetaDataVideo.getEncodedApplicationCompanyNameAsBoolean());
        System.out.println("Name of the company AS BigInteger === " + jMetaDataVideo.getEncodedApplicationCompanyNameAsBigInteger());
        System.out.println("Name of the company AS URL === " + jMetaDataVideo.getEncodedApplicationCompanyNameAsURL());
        System.out.println("Current stream size divided by uncompressed stream size AS Integer === " + jMetaDataVideo.getCompressionRatioAsInteger());
        System.out.println("Current stream size divided by uncompressed stream size AS Long === " + jMetaDataVideo.getCompressionRatioAsLong());
        System.out.println("Current stream size divided by uncompressed stream size AS LocalDateTime === " + jMetaDataVideo.getCompressionRatioAsLocalDateTime());
        System.out.println("Current stream size divided by uncompressed stream size AS LocalTime === " + jMetaDataVideo.getCompressionRatioAsLocalTime());
        System.out.println("Current stream size divided by uncompressed stream size AS String === " + jMetaDataVideo.getCompressionRatioAsString());
        System.out.println("Current stream size divided by uncompressed stream size AS Boolean === " + jMetaDataVideo.getCompressionRatioAsBoolean());
        System.out.println("Current stream size divided by uncompressed stream size AS BigInteger === " + jMetaDataVideo.getCompressionRatioAsBigInteger());
        System.out.println("Current stream size divided by uncompressed stream size AS URL === " + jMetaDataVideo.getCompressionRatioAsURL());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Integer === " + jMetaDataVideo.getFormatCommercialIfAnyAsInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Long === " + jMetaDataVideo.getFormatCommercialIfAnyAsLong());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalDateTime === " + jMetaDataVideo.getFormatCommercialIfAnyAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalTime === " + jMetaDataVideo.getFormatCommercialIfAnyAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS String === " + jMetaDataVideo.getFormatCommercialIfAnyAsString());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Boolean === " + jMetaDataVideo.getFormatCommercialIfAnyAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS BigInteger === " + jMetaDataVideo.getFormatCommercialIfAnyAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS URL === " + jMetaDataVideo.getFormatCommercialIfAnyAsURL());
        System.out.println("UTC time that the tags were done for this item. AS Integer === " + jMetaDataVideo.getTaggedDateAsInteger());
        System.out.println("UTC time that the tags were done for this item. AS Long === " + jMetaDataVideo.getTaggedDateAsLong());
        System.out.println("UTC time that the tags were done for this item. AS LocalDateTime === " + jMetaDataVideo.getTaggedDateAsLocalDateTime());
        System.out.println("UTC time that the tags were done for this item. AS LocalTime === " + jMetaDataVideo.getTaggedDateAsLocalTime());
        System.out.println("UTC time that the tags were done for this item. AS String === " + jMetaDataVideo.getTaggedDateAsString());
        System.out.println("UTC time that the tags were done for this item. AS Boolean === " + jMetaDataVideo.getTaggedDateAsBoolean());
        System.out.println("UTC time that the tags were done for this item. AS BigInteger === " + jMetaDataVideo.getTaggedDateAsBigInteger());
        System.out.println("UTC time that the tags were done for this item. AS URL === " + jMetaDataVideo.getTaggedDateAsURL());
        System.out.println("Clean Aperture Display Aspect ratio AS Integer === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureAsInteger());
        System.out.println("Clean Aperture Display Aspect ratio AS Long === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureAsLong());
        System.out.println("Clean Aperture Display Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureAsLocalDateTime());
        System.out.println("Clean Aperture Display Aspect ratio AS LocalTime === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureAsLocalTime());
        System.out.println("Clean Aperture Display Aspect ratio AS String === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureAsString());
        System.out.println("Clean Aperture Display Aspect ratio AS Boolean === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureAsBoolean());
        System.out.println("Clean Aperture Display Aspect ratio AS BigInteger === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureAsBigInteger());
        System.out.println("Clean Aperture Display Aspect ratio AS URL === " + jMetaDataVideo.getDisplayAspectRatioCleanApertureAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataVideo.getIDStringAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataVideo.getIDStringAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataVideo.getIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataVideo.getIDStringAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataVideo.getIDStringAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataVideo.getIDStringAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataVideo.getIDStringAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataVideo.getIDStringAsURL());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS Integer === " + jMetaDataVideo.getPixelAspectRatioOriginalAsInteger());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS Long === " + jMetaDataVideo.getPixelAspectRatioOriginalAsLong());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getPixelAspectRatioOriginalAsLocalDateTime());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS LocalTime === " + jMetaDataVideo.getPixelAspectRatioOriginalAsLocalTime());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS String === " + jMetaDataVideo.getPixelAspectRatioOriginalAsString());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS Boolean === " + jMetaDataVideo.getPixelAspectRatioOriginalAsBoolean());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS BigInteger === " + jMetaDataVideo.getPixelAspectRatioOriginalAsBigInteger());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS URL === " + jMetaDataVideo.getPixelAspectRatioOriginalAsURL());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS Integer === " + jMetaDataVideo.getmatrixcoefficientsOriginalAsInteger());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS Long === " + jMetaDataVideo.getmatrixcoefficientsOriginalAsLong());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS LocalDateTime === " + jMetaDataVideo.getmatrixcoefficientsOriginalAsLocalDateTime());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS LocalTime === " + jMetaDataVideo.getmatrixcoefficientsOriginalAsLocalTime());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS String === " + jMetaDataVideo.getmatrixcoefficientsOriginalAsString());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS Boolean === " + jMetaDataVideo.getmatrixcoefficientsOriginalAsBoolean());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS BigInteger === " + jMetaDataVideo.getmatrixcoefficientsOriginalAsBigInteger());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS URL === " + jMetaDataVideo.getmatrixcoefficientsOriginalAsURL());
        System.out.println("Compression mode (Lossy or Lossless) AS Integer === " + jMetaDataVideo.getCompressionModeAsInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS Long === " + jMetaDataVideo.getCompressionModeAsLong());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalDateTime === " + jMetaDataVideo.getCompressionModeAsLocalDateTime());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalTime === " + jMetaDataVideo.getCompressionModeAsLocalTime());
        System.out.println("Compression mode (Lossy or Lossless) AS String === " + jMetaDataVideo.getCompressionModeAsString());
        System.out.println("Compression mode (Lossy or Lossless) AS Boolean === " + jMetaDataVideo.getCompressionModeAsBoolean());
        System.out.println("Compression mode (Lossy or Lossless) AS BigInteger === " + jMetaDataVideo.getCompressionModeAsBigInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS URL === " + jMetaDataVideo.getCompressionModeAsURL());
        System.out.println("Bit rate in bps AS Integer === " + jMetaDataVideo.getBitRateAsInteger());
        System.out.println("Bit rate in bps AS Long === " + jMetaDataVideo.getBitRateAsLong());
        System.out.println("Bit rate in bps AS LocalDateTime === " + jMetaDataVideo.getBitRateAsLocalDateTime());
        System.out.println("Bit rate in bps AS LocalTime === " + jMetaDataVideo.getBitRateAsLocalTime());
        System.out.println("Bit rate in bps AS String === " + jMetaDataVideo.getBitRateAsString());
        System.out.println("Bit rate in bps AS Boolean === " + jMetaDataVideo.getBitRateAsBoolean());
        System.out.println("Bit rate in bps AS BigInteger === " + jMetaDataVideo.getBitRateAsBigInteger());
        System.out.println("Bit rate in bps AS URL === " + jMetaDataVideo.getBitRateAsURL());
        System.out.println("UTC time that the encoding of this item was completed began. AS Integer === " + jMetaDataVideo.getEncodedDateAsInteger());
        System.out.println("UTC time that the encoding of this item was completed began. AS Long === " + jMetaDataVideo.getEncodedDateAsLong());
        System.out.println("UTC time that the encoding of this item was completed began. AS LocalDateTime === " + jMetaDataVideo.getEncodedDateAsLocalDateTime());
        System.out.println("UTC time that the encoding of this item was completed began. AS LocalTime === " + jMetaDataVideo.getEncodedDateAsLocalTime());
        System.out.println("UTC time that the encoding of this item was completed began. AS String === " + jMetaDataVideo.getEncodedDateAsString());
        System.out.println("UTC time that the encoding of this item was completed began. AS Boolean === " + jMetaDataVideo.getEncodedDateAsBoolean());
        System.out.println("UTC time that the encoding of this item was completed began. AS BigInteger === " + jMetaDataVideo.getEncodedDateAsBigInteger());
        System.out.println("UTC time that the encoding of this item was completed began. AS URL === " + jMetaDataVideo.getEncodedDateAsURL());
        System.out.println("Bit rate mode (VBR, CBR) AS Integer === " + jMetaDataVideo.getBitRateModeAsInteger());
        System.out.println("Bit rate mode (VBR, CBR) AS Long === " + jMetaDataVideo.getBitRateModeAsLong());
        System.out.println("Bit rate mode (VBR, CBR) AS LocalDateTime === " + jMetaDataVideo.getBitRateModeAsLocalDateTime());
        System.out.println("Bit rate mode (VBR, CBR) AS LocalTime === " + jMetaDataVideo.getBitRateModeAsLocalTime());
        System.out.println("Bit rate mode (VBR, CBR) AS String === " + jMetaDataVideo.getBitRateModeAsString());
        System.out.println("Bit rate mode (VBR, CBR) AS Boolean === " + jMetaDataVideo.getBitRateModeAsBoolean());
        System.out.println("Bit rate mode (VBR, CBR) AS BigInteger === " + jMetaDataVideo.getBitRateModeAsBigInteger());
        System.out.println("Bit rate mode (VBR, CBR) AS URL === " + jMetaDataVideo.getBitRateModeAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataVideo.getUniqueIDAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataVideo.getUniqueIDAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataVideo.getUniqueIDAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataVideo.getUniqueIDAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataVideo.getUniqueIDAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataVideo.getUniqueIDAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataVideo.getUniqueIDAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataVideo.getUniqueIDAsURL());
        System.out.println("Maximum Bit rate (with measurement) AS Integer === " + jMetaDataVideo.getBitRateMaximumStringAsInteger());
        System.out.println("Maximum Bit rate (with measurement) AS Long === " + jMetaDataVideo.getBitRateMaximumStringAsLong());
        System.out.println("Maximum Bit rate (with measurement) AS LocalDateTime === " + jMetaDataVideo.getBitRateMaximumStringAsLocalDateTime());
        System.out.println("Maximum Bit rate (with measurement) AS LocalTime === " + jMetaDataVideo.getBitRateMaximumStringAsLocalTime());
        System.out.println("Maximum Bit rate (with measurement) AS String === " + jMetaDataVideo.getBitRateMaximumStringAsString());
        System.out.println("Maximum Bit rate (with measurement) AS Boolean === " + jMetaDataVideo.getBitRateMaximumStringAsBoolean());
        System.out.println("Maximum Bit rate (with measurement) AS BigInteger === " + jMetaDataVideo.getBitRateMaximumStringAsBigInteger());
        System.out.println("Maximum Bit rate (with measurement) AS URL === " + jMetaDataVideo.getBitRateMaximumStringAsURL());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getDelayString3AsInteger());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getDelayString3AsLong());
        System.out.println("Delay in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getDelayString3AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getDelayString3AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.MMM AS String === " + jMetaDataVideo.getDelayString3AsString());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getDelayString3AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getDelayString3AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getDelayString3AsURL());
        System.out.println("Matrix, in binary format encoded BASE64. Order = intra, non-intra, gray intra, gray non-intra AS Integer === " + jMetaDataVideo.getFormatSettingsMatrixDataAsInteger());
        System.out.println("Matrix, in binary format encoded BASE64. Order = intra, non-intra, gray intra, gray non-intra AS Long === " + jMetaDataVideo.getFormatSettingsMatrixDataAsLong());
        System.out.println("Matrix, in binary format encoded BASE64. Order = intra, non-intra, gray intra, gray non-intra AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsMatrixDataAsLocalDateTime());
        System.out.println("Matrix, in binary format encoded BASE64. Order = intra, non-intra, gray intra, gray non-intra AS LocalTime === " + jMetaDataVideo.getFormatSettingsMatrixDataAsLocalTime());
        System.out.println("Matrix, in binary format encoded BASE64. Order = intra, non-intra, gray intra, gray non-intra AS String === " + jMetaDataVideo.getFormatSettingsMatrixDataAsString());
        System.out.println("Matrix, in binary format encoded BASE64. Order = intra, non-intra, gray intra, gray non-intra AS Boolean === " + jMetaDataVideo.getFormatSettingsMatrixDataAsBoolean());
        System.out.println("Matrix, in binary format encoded BASE64. Order = intra, non-intra, gray intra, gray non-intra AS BigInteger === " + jMetaDataVideo.getFormatSettingsMatrixDataAsBigInteger());
        System.out.println("Matrix, in binary format encoded BASE64. Order = intra, non-intra, gray intra, gray non-intra AS URL === " + jMetaDataVideo.getFormatSettingsMatrixDataAsURL());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getDelayString4AsInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getDelayString4AsLong());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getDelayString4AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getDelayString4AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getDelayString4AsString());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getDelayString4AsBoolean());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getDelayString4AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getDelayString4AsURL());
        System.out.println("ColorSpace AS Integer === " + jMetaDataVideo.getColorSpaceAsInteger());
        System.out.println("ColorSpace AS Long === " + jMetaDataVideo.getColorSpaceAsLong());
        System.out.println("ColorSpace AS LocalDateTime === " + jMetaDataVideo.getColorSpaceAsLocalDateTime());
        System.out.println("ColorSpace AS LocalTime === " + jMetaDataVideo.getColorSpaceAsLocalTime());
        System.out.println("ColorSpace AS String === " + jMetaDataVideo.getColorSpaceAsString());
        System.out.println("ColorSpace AS Boolean === " + jMetaDataVideo.getColorSpaceAsBoolean());
        System.out.println("ColorSpace AS BigInteger === " + jMetaDataVideo.getColorSpaceAsBigInteger());
        System.out.println("ColorSpace AS URL === " + jMetaDataVideo.getColorSpaceAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataVideo.getDelayString1AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataVideo.getDelayString1AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataVideo.getDelayString1AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataVideo.getDelayString1AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataVideo.getDelayString1AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataVideo.getDelayString1AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataVideo.getDelayString1AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataVideo.getDelayString1AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataVideo.getDelayString2AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataVideo.getDelayString2AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataVideo.getDelayString2AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataVideo.getDelayString2AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataVideo.getDelayString2AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataVideo.getDelayString2AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataVideo.getDelayString2AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataVideo.getDelayString2AsURL());
        System.out.println("Time code settings AS Integer === " + jMetaDataVideo.getTimeCodeSettingsAsInteger());
        System.out.println("Time code settings AS Long === " + jMetaDataVideo.getTimeCodeSettingsAsLong());
        System.out.println("Time code settings AS LocalDateTime === " + jMetaDataVideo.getTimeCodeSettingsAsLocalDateTime());
        System.out.println("Time code settings AS LocalTime === " + jMetaDataVideo.getTimeCodeSettingsAsLocalTime());
        System.out.println("Time code settings AS String === " + jMetaDataVideo.getTimeCodeSettingsAsString());
        System.out.println("Time code settings AS Boolean === " + jMetaDataVideo.getTimeCodeSettingsAsBoolean());
        System.out.println("Time code settings AS BigInteger === " + jMetaDataVideo.getTimeCodeSettingsAsBigInteger());
        System.out.println("Time code settings AS URL === " + jMetaDataVideo.getTimeCodeSettingsAsURL());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getDelayString5AsInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getDelayString5AsLong());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getDelayString5AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getDelayString5AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getDelayString5AsString());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getDelayString5AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getDelayString5AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getDelayString5AsURL());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Integer === " + jMetaDataVideo.getDelayAsInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Long === " + jMetaDataVideo.getDelayAsLong());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalDateTime === " + jMetaDataVideo.getDelayAsLocalDateTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalTime === " + jMetaDataVideo.getDelayAsLocalTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS String === " + jMetaDataVideo.getDelayAsString());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Boolean === " + jMetaDataVideo.getDelayAsBoolean());
        System.out.println("Delay fixed in the stream (relative) IN MS AS BigInteger === " + jMetaDataVideo.getDelayAsBigInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS URL === " + jMetaDataVideo.getDelayAsURL());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS Integer === " + jMetaDataVideo.getGopOpenClosedFirstFrameStringAsInteger());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS Long === " + jMetaDataVideo.getGopOpenClosedFirstFrameStringAsLong());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS LocalDateTime === " + jMetaDataVideo.getGopOpenClosedFirstFrameStringAsLocalDateTime());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS LocalTime === " + jMetaDataVideo.getGopOpenClosedFirstFrameStringAsLocalTime());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS String === " + jMetaDataVideo.getGopOpenClosedFirstFrameStringAsString());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS Boolean === " + jMetaDataVideo.getGopOpenClosedFirstFrameStringAsBoolean());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS BigInteger === " + jMetaDataVideo.getGopOpenClosedFirstFrameStringAsBigInteger());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS URL === " + jMetaDataVideo.getGopOpenClosedFirstFrameStringAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Integer === " + jMetaDataVideo.getEncodedApplicationUrlAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Long === " + jMetaDataVideo.getEncodedApplicationUrlAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS LocalDateTime === " + jMetaDataVideo.getEncodedApplicationUrlAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS LocalTime === " + jMetaDataVideo.getEncodedApplicationUrlAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS String === " + jMetaDataVideo.getEncodedApplicationUrlAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Boolean === " + jMetaDataVideo.getEncodedApplicationUrlAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS BigInteger === " + jMetaDataVideo.getEncodedApplicationUrlAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS URL === " + jMetaDataVideo.getEncodedApplicationUrlAsURL());
        System.out.println("Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format AS Integer === " + jMetaDataVideo.getTimeCodeFirstFrameAsInteger());
        System.out.println("Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format AS Long === " + jMetaDataVideo.getTimeCodeFirstFrameAsLong());
        System.out.println("Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format AS LocalDateTime === " + jMetaDataVideo.getTimeCodeFirstFrameAsLocalDateTime());
        System.out.println("Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format AS LocalTime === " + jMetaDataVideo.getTimeCodeFirstFrameAsLocalTime());
        System.out.println("Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format AS String === " + jMetaDataVideo.getTimeCodeFirstFrameAsString());
        System.out.println("Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format AS Boolean === " + jMetaDataVideo.getTimeCodeFirstFrameAsBoolean());
        System.out.println("Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format AS BigInteger === " + jMetaDataVideo.getTimeCodeFirstFrameAsBigInteger());
        System.out.println("Time code in HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available format AS URL === " + jMetaDataVideo.getTimeCodeFirstFrameAsURL());
        System.out.println("Source_StreamSize_Encoded/String4 AS Integer === " + jMetaDataVideo.getSourceStreamSizeEncodedString4AsInteger());
        System.out.println("Source_StreamSize_Encoded/String4 AS Long === " + jMetaDataVideo.getSourceStreamSizeEncodedString4AsLong());
        System.out.println("Source_StreamSize_Encoded/String4 AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString4AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String4 AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString4AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String4 AS String === " + jMetaDataVideo.getSourceStreamSizeEncodedString4AsString());
        System.out.println("Source_StreamSize_Encoded/String4 AS Boolean === " + jMetaDataVideo.getSourceStreamSizeEncodedString4AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String4 AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeEncodedString4AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String4 AS URL === " + jMetaDataVideo.getSourceStreamSizeEncodedString4AsURL());
        System.out.println("Source Encoded Streamsize in with percentage value AS Integer === " + jMetaDataVideo.getSourceStreamSizeEncodedString5AsInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS Long === " + jMetaDataVideo.getSourceStreamSizeEncodedString5AsLong());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString5AsLocalDateTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString5AsLocalTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS String === " + jMetaDataVideo.getSourceStreamSizeEncodedString5AsString());
        System.out.println("Source Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataVideo.getSourceStreamSizeEncodedString5AsBoolean());
        System.out.println("Source Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeEncodedString5AsBigInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS URL === " + jMetaDataVideo.getSourceStreamSizeEncodedString5AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationFirstFrameString1AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataVideo.getSourceDurationFirstFrameString1AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationFirstFrameString1AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationFirstFrameString1AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataVideo.getSourceDurationFirstFrameString1AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationFirstFrameString1AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationFirstFrameString1AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataVideo.getSourceDurationFirstFrameString1AsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsPulldownAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsPulldownAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsPulldownAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsPulldownAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsPulldownAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsPulldownAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsPulldownAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsPulldownAsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationFirstFrameString2AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getSourceDurationFirstFrameString2AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationFirstFrameString2AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationFirstFrameString2AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getSourceDurationFirstFrameString2AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationFirstFrameString2AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationFirstFrameString2AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getSourceDurationFirstFrameString2AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getSourceDurationFirstFrameString3AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getSourceDurationFirstFrameString3AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getSourceDurationFirstFrameString3AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getSourceDurationFirstFrameString3AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataVideo.getSourceDurationFirstFrameString3AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getSourceDurationFirstFrameString3AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getSourceDurationFirstFrameString3AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getSourceDurationFirstFrameString3AsURL());
        System.out.println("Software used to create the file AS Integer === " + jMetaDataVideo.getEncodedLibraryAsInteger());
        System.out.println("Software used to create the file AS Long === " + jMetaDataVideo.getEncodedLibraryAsLong());
        System.out.println("Software used to create the file AS LocalDateTime === " + jMetaDataVideo.getEncodedLibraryAsLocalDateTime());
        System.out.println("Software used to create the file AS LocalTime === " + jMetaDataVideo.getEncodedLibraryAsLocalTime());
        System.out.println("Software used to create the file AS String === " + jMetaDataVideo.getEncodedLibraryAsString());
        System.out.println("Software used to create the file AS Boolean === " + jMetaDataVideo.getEncodedLibraryAsBoolean());
        System.out.println("Software used to create the file AS BigInteger === " + jMetaDataVideo.getEncodedLibraryAsBigInteger());
        System.out.println("Software used to create the file AS URL === " + jMetaDataVideo.getEncodedLibraryAsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getSourceDurationFirstFrameString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getSourceDurationFirstFrameString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getSourceDurationFirstFrameString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getSourceDurationFirstFrameString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getSourceDurationFirstFrameString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getSourceDurationFirstFrameString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getSourceDurationFirstFrameString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getSourceDurationFirstFrameString4AsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getSourceDurationFirstFrameString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getSourceDurationFirstFrameString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getSourceDurationFirstFrameString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getSourceDurationFirstFrameString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getSourceDurationFirstFrameString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getSourceDurationFirstFrameString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getSourceDurationFirstFrameString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getSourceDurationFirstFrameString5AsURL());
        System.out.println("Stored height AS Integer === " + jMetaDataVideo.getStoredHeightAsInteger());
        System.out.println("Stored height AS Long === " + jMetaDataVideo.getStoredHeightAsLong());
        System.out.println("Stored height AS LocalDateTime === " + jMetaDataVideo.getStoredHeightAsLocalDateTime());
        System.out.println("Stored height AS LocalTime === " + jMetaDataVideo.getStoredHeightAsLocalTime());
        System.out.println("Stored height AS String === " + jMetaDataVideo.getStoredHeightAsString());
        System.out.println("Stored height AS Boolean === " + jMetaDataVideo.getStoredHeightAsBoolean());
        System.out.println("Stored height AS BigInteger === " + jMetaDataVideo.getStoredHeightAsBigInteger());
        System.out.println("Stored height AS URL === " + jMetaDataVideo.getStoredHeightAsURL());
        System.out.println("Nominal Frames per second AS Integer === " + jMetaDataVideo.getFrameRateNominalAsInteger());
        System.out.println("Nominal Frames per second AS Long === " + jMetaDataVideo.getFrameRateNominalAsLong());
        System.out.println("Nominal Frames per second AS LocalDateTime === " + jMetaDataVideo.getFrameRateNominalAsLocalDateTime());
        System.out.println("Nominal Frames per second AS LocalTime === " + jMetaDataVideo.getFrameRateNominalAsLocalTime());
        System.out.println("Nominal Frames per second AS String === " + jMetaDataVideo.getFrameRateNominalAsString());
        System.out.println("Nominal Frames per second AS Boolean === " + jMetaDataVideo.getFrameRateNominalAsBoolean());
        System.out.println("Nominal Frames per second AS BigInteger === " + jMetaDataVideo.getFrameRateNominalAsBigInteger());
        System.out.println("Nominal Frames per second AS URL === " + jMetaDataVideo.getFrameRateNominalAsURL());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Integer === " + jMetaDataVideo.getInternetMediaTypeAsInteger());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Long === " + jMetaDataVideo.getInternetMediaTypeAsLong());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS LocalDateTime === " + jMetaDataVideo.getInternetMediaTypeAsLocalDateTime());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS LocalTime === " + jMetaDataVideo.getInternetMediaTypeAsLocalTime());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS String === " + jMetaDataVideo.getInternetMediaTypeAsString());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Boolean === " + jMetaDataVideo.getInternetMediaTypeAsBoolean());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS BigInteger === " + jMetaDataVideo.getInternetMediaTypeAsBigInteger());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS URL === " + jMetaDataVideo.getInternetMediaTypeAsURL());
        System.out.println("Source_StreamSize_Encoded/String2 AS Integer === " + jMetaDataVideo.getSourceStreamSizeEncodedString2AsInteger());
        System.out.println("Source_StreamSize_Encoded/String2 AS Long === " + jMetaDataVideo.getSourceStreamSizeEncodedString2AsLong());
        System.out.println("Source_StreamSize_Encoded/String2 AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString2AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String2 AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString2AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String2 AS String === " + jMetaDataVideo.getSourceStreamSizeEncodedString2AsString());
        System.out.println("Source_StreamSize_Encoded/String2 AS Boolean === " + jMetaDataVideo.getSourceStreamSizeEncodedString2AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String2 AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeEncodedString2AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String2 AS URL === " + jMetaDataVideo.getSourceStreamSizeEncodedString2AsURL());
        System.out.println("Set if that track should not be used AS Integer === " + jMetaDataVideo.getDisabledAsInteger());
        System.out.println("Set if that track should not be used AS Long === " + jMetaDataVideo.getDisabledAsLong());
        System.out.println("Set if that track should not be used AS LocalDateTime === " + jMetaDataVideo.getDisabledAsLocalDateTime());
        System.out.println("Set if that track should not be used AS LocalTime === " + jMetaDataVideo.getDisabledAsLocalTime());
        System.out.println("Set if that track should not be used AS String === " + jMetaDataVideo.getDisabledAsString());
        System.out.println("Set if that track should not be used AS Boolean === " + jMetaDataVideo.getDisabledAsBoolean());
        System.out.println("Set if that track should not be used AS BigInteger === " + jMetaDataVideo.getDisabledAsBigInteger());
        System.out.println("Set if that track should not be used AS URL === " + jMetaDataVideo.getDisabledAsURL());
        System.out.println("Frames per second, denominator AS Integer === " + jMetaDataVideo.getFrameRateDenAsInteger());
        System.out.println("Frames per second, denominator AS Long === " + jMetaDataVideo.getFrameRateDenAsLong());
        System.out.println("Frames per second, denominator AS LocalDateTime === " + jMetaDataVideo.getFrameRateDenAsLocalDateTime());
        System.out.println("Frames per second, denominator AS LocalTime === " + jMetaDataVideo.getFrameRateDenAsLocalTime());
        System.out.println("Frames per second, denominator AS String === " + jMetaDataVideo.getFrameRateDenAsString());
        System.out.println("Frames per second, denominator AS Boolean === " + jMetaDataVideo.getFrameRateDenAsBoolean());
        System.out.println("Frames per second, denominator AS BigInteger === " + jMetaDataVideo.getFrameRateDenAsBigInteger());
        System.out.println("Frames per second, denominator AS URL === " + jMetaDataVideo.getFrameRateDenAsURL());
        System.out.println("Source_StreamSize_Encoded/String3 AS Integer === " + jMetaDataVideo.getSourceStreamSizeEncodedString3AsInteger());
        System.out.println("Source_StreamSize_Encoded/String3 AS Long === " + jMetaDataVideo.getSourceStreamSizeEncodedString3AsLong());
        System.out.println("Source_StreamSize_Encoded/String3 AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString3AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String3 AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString3AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String3 AS String === " + jMetaDataVideo.getSourceStreamSizeEncodedString3AsString());
        System.out.println("Source_StreamSize_Encoded/String3 AS Boolean === " + jMetaDataVideo.getSourceStreamSizeEncodedString3AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String3 AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeEncodedString3AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String3 AS URL === " + jMetaDataVideo.getSourceStreamSizeEncodedString3AsURL());
        System.out.println("Maximum Frames per second (with measurement) AS Integer === " + jMetaDataVideo.getFrameRateMaximumStringAsInteger());
        System.out.println("Maximum Frames per second (with measurement) AS Long === " + jMetaDataVideo.getFrameRateMaximumStringAsLong());
        System.out.println("Maximum Frames per second (with measurement) AS LocalDateTime === " + jMetaDataVideo.getFrameRateMaximumStringAsLocalDateTime());
        System.out.println("Maximum Frames per second (with measurement) AS LocalTime === " + jMetaDataVideo.getFrameRateMaximumStringAsLocalTime());
        System.out.println("Maximum Frames per second (with measurement) AS String === " + jMetaDataVideo.getFrameRateMaximumStringAsString());
        System.out.println("Maximum Frames per second (with measurement) AS Boolean === " + jMetaDataVideo.getFrameRateMaximumStringAsBoolean());
        System.out.println("Maximum Frames per second (with measurement) AS BigInteger === " + jMetaDataVideo.getFrameRateMaximumStringAsBigInteger());
        System.out.println("Maximum Frames per second (with measurement) AS URL === " + jMetaDataVideo.getFrameRateMaximumStringAsURL());
        System.out.println("Encoded Stream size divided by file size AS Integer === " + jMetaDataVideo.getStreamSizeEncodedProportionAsInteger());
        System.out.println("Encoded Stream size divided by file size AS Long === " + jMetaDataVideo.getStreamSizeEncodedProportionAsLong());
        System.out.println("Encoded Stream size divided by file size AS LocalDateTime === " + jMetaDataVideo.getStreamSizeEncodedProportionAsLocalDateTime());
        System.out.println("Encoded Stream size divided by file size AS LocalTime === " + jMetaDataVideo.getStreamSizeEncodedProportionAsLocalTime());
        System.out.println("Encoded Stream size divided by file size AS String === " + jMetaDataVideo.getStreamSizeEncodedProportionAsString());
        System.out.println("Encoded Stream size divided by file size AS Boolean === " + jMetaDataVideo.getStreamSizeEncodedProportionAsBoolean());
        System.out.println("Encoded Stream size divided by file size AS BigInteger === " + jMetaDataVideo.getStreamSizeEncodedProportionAsBigInteger());
        System.out.println("Encoded Stream size divided by file size AS URL === " + jMetaDataVideo.getStreamSizeEncodedProportionAsURL());
        System.out.println("Source_StreamSize_Encoded/String1 AS Integer === " + jMetaDataVideo.getSourceStreamSizeEncodedString1AsInteger());
        System.out.println("Source_StreamSize_Encoded/String1 AS Long === " + jMetaDataVideo.getSourceStreamSizeEncodedString1AsLong());
        System.out.println("Source_StreamSize_Encoded/String1 AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString1AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String1 AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeEncodedString1AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String1 AS String === " + jMetaDataVideo.getSourceStreamSizeEncodedString1AsString());
        System.out.println("Source_StreamSize_Encoded/String1 AS Boolean === " + jMetaDataVideo.getSourceStreamSizeEncodedString1AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String1 AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeEncodedString1AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String1 AS URL === " + jMetaDataVideo.getSourceStreamSizeEncodedString1AsURL());
        System.out.println("ScanOrder_Original AS Integer === " + jMetaDataVideo.getScanOrderOriginalAsInteger());
        System.out.println("ScanOrder_Original AS Long === " + jMetaDataVideo.getScanOrderOriginalAsLong());
        System.out.println("ScanOrder_Original AS LocalDateTime === " + jMetaDataVideo.getScanOrderOriginalAsLocalDateTime());
        System.out.println("ScanOrder_Original AS LocalTime === " + jMetaDataVideo.getScanOrderOriginalAsLocalTime());
        System.out.println("ScanOrder_Original AS String === " + jMetaDataVideo.getScanOrderOriginalAsString());
        System.out.println("ScanOrder_Original AS Boolean === " + jMetaDataVideo.getScanOrderOriginalAsBoolean());
        System.out.println("ScanOrder_Original AS BigInteger === " + jMetaDataVideo.getScanOrderOriginalAsBigInteger());
        System.out.println("ScanOrder_Original AS URL === " + jMetaDataVideo.getScanOrderOriginalAsURL());
        System.out.println("Play time of the stream in ms AS Integer === " + jMetaDataVideo.getDurationAsInteger());
        System.out.println("Play time of the stream in ms AS Long === " + jMetaDataVideo.getDurationAsLong());
        System.out.println("Play time of the stream in ms AS LocalDateTime === " + jMetaDataVideo.getDurationAsLocalDateTime());
        System.out.println("Play time of the stream in ms AS LocalTime === " + jMetaDataVideo.getDurationAsLocalTime());
        System.out.println("Play time of the stream in ms AS String === " + jMetaDataVideo.getDurationAsString());
        System.out.println("Play time of the stream in ms AS Boolean === " + jMetaDataVideo.getDurationAsBoolean());
        System.out.println("Play time of the stream in ms AS BigInteger === " + jMetaDataVideo.getDurationAsBigInteger());
        System.out.println("Play time of the stream in ms AS URL === " + jMetaDataVideo.getDurationAsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getSourceDurationString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getSourceDurationString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getSourceDurationString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getSourceDurationString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getSourceDurationString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getSourceDurationString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getSourceDurationString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getSourceDurationString5AsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getDurationLastFrameStringAsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getDurationLastFrameStringAsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationLastFrameStringAsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getDurationLastFrameStringAsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getDurationLastFrameStringAsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getDurationLastFrameStringAsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getDurationLastFrameStringAsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getDurationLastFrameStringAsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getSourceDurationString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getSourceDurationString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getSourceDurationString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getSourceDurationString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getSourceDurationString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getSourceDurationString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getSourceDurationString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getSourceDurationString4AsURL());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getSourceDurationString3AsInteger());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getSourceDurationString3AsLong());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getSourceDurationString3AsLocalDateTime());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getSourceDurationString3AsLocalTime());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS String === " + jMetaDataVideo.getSourceDurationString3AsString());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getSourceDurationString3AsBoolean());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getSourceDurationString3AsBigInteger());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getSourceDurationString3AsURL());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationString2AsInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getSourceDurationString2AsLong());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationString2AsLocalDateTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationString2AsLocalTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getSourceDurationString2AsString());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationString2AsBoolean());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationString2AsBigInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getSourceDurationString2AsURL());
        System.out.println("ChromaSubsampling/String AS Integer === " + jMetaDataVideo.getChromaSubsamplingStringAsInteger());
        System.out.println("ChromaSubsampling/String AS Long === " + jMetaDataVideo.getChromaSubsamplingStringAsLong());
        System.out.println("ChromaSubsampling/String AS LocalDateTime === " + jMetaDataVideo.getChromaSubsamplingStringAsLocalDateTime());
        System.out.println("ChromaSubsampling/String AS LocalTime === " + jMetaDataVideo.getChromaSubsamplingStringAsLocalTime());
        System.out.println("ChromaSubsampling/String AS String === " + jMetaDataVideo.getChromaSubsamplingStringAsString());
        System.out.println("ChromaSubsampling/String AS Boolean === " + jMetaDataVideo.getChromaSubsamplingStringAsBoolean());
        System.out.println("ChromaSubsampling/String AS BigInteger === " + jMetaDataVideo.getChromaSubsamplingStringAsBigInteger());
        System.out.println("ChromaSubsampling/String AS URL === " + jMetaDataVideo.getChromaSubsamplingStringAsURL());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationString1AsInteger());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataVideo.getSourceDurationString1AsLong());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationString1AsLocalDateTime());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationString1AsLocalTime());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataVideo.getSourceDurationString1AsString());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationString1AsBoolean());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationString1AsBigInteger());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataVideo.getSourceDurationString1AsURL());
        System.out.println("Hint/popular name for this codec AS Integer === " + jMetaDataVideo.getCodecIDHintAsInteger());
        System.out.println("Hint/popular name for this codec AS Long === " + jMetaDataVideo.getCodecIDHintAsLong());
        System.out.println("Hint/popular name for this codec AS LocalDateTime === " + jMetaDataVideo.getCodecIDHintAsLocalDateTime());
        System.out.println("Hint/popular name for this codec AS LocalTime === " + jMetaDataVideo.getCodecIDHintAsLocalTime());
        System.out.println("Hint/popular name for this codec AS String === " + jMetaDataVideo.getCodecIDHintAsString());
        System.out.println("Hint/popular name for this codec AS Boolean === " + jMetaDataVideo.getCodecIDHintAsBoolean());
        System.out.println("Hint/popular name for this codec AS BigInteger === " + jMetaDataVideo.getCodecIDHintAsBigInteger());
        System.out.println("Hint/popular name for this codec AS URL === " + jMetaDataVideo.getCodecIDHintAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Integer === " + jMetaDataVideo.getEncodedApplicationAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Long === " + jMetaDataVideo.getEncodedApplicationAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS LocalDateTime === " + jMetaDataVideo.getEncodedApplicationAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS LocalTime === " + jMetaDataVideo.getEncodedApplicationAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS String === " + jMetaDataVideo.getEncodedApplicationAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Boolean === " + jMetaDataVideo.getEncodedApplicationAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS BigInteger === " + jMetaDataVideo.getEncodedApplicationAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS URL === " + jMetaDataVideo.getEncodedApplicationAsURL());
        System.out.println("Compression mode (Lossy or Lossless) AS Integer === " + jMetaDataVideo.getCompressionModeStringAsInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS Long === " + jMetaDataVideo.getCompressionModeStringAsLong());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalDateTime === " + jMetaDataVideo.getCompressionModeStringAsLocalDateTime());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalTime === " + jMetaDataVideo.getCompressionModeStringAsLocalTime());
        System.out.println("Compression mode (Lossy or Lossless) AS String === " + jMetaDataVideo.getCompressionModeStringAsString());
        System.out.println("Compression mode (Lossy or Lossless) AS Boolean === " + jMetaDataVideo.getCompressionModeStringAsBoolean());
        System.out.println("Compression mode (Lossy or Lossless) AS BigInteger === " + jMetaDataVideo.getCompressionModeStringAsBigInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS URL === " + jMetaDataVideo.getCompressionModeStringAsURL());
        System.out.println("StreamSize/String2 AS Integer === " + jMetaDataVideo.getStreamSizeString2AsInteger());
        System.out.println("StreamSize/String2 AS Long === " + jMetaDataVideo.getStreamSizeString2AsLong());
        System.out.println("StreamSize/String2 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeString2AsLocalDateTime());
        System.out.println("StreamSize/String2 AS LocalTime === " + jMetaDataVideo.getStreamSizeString2AsLocalTime());
        System.out.println("StreamSize/String2 AS String === " + jMetaDataVideo.getStreamSizeString2AsString());
        System.out.println("StreamSize/String2 AS Boolean === " + jMetaDataVideo.getStreamSizeString2AsBoolean());
        System.out.println("StreamSize/String2 AS BigInteger === " + jMetaDataVideo.getStreamSizeString2AsBigInteger());
        System.out.println("StreamSize/String2 AS URL === " + jMetaDataVideo.getStreamSizeString2AsURL());
        System.out.println("StreamSize/String1 AS Integer === " + jMetaDataVideo.getStreamSizeString1AsInteger());
        System.out.println("StreamSize/String1 AS Long === " + jMetaDataVideo.getStreamSizeString1AsLong());
        System.out.println("StreamSize/String1 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeString1AsLocalDateTime());
        System.out.println("StreamSize/String1 AS LocalTime === " + jMetaDataVideo.getStreamSizeString1AsLocalTime());
        System.out.println("StreamSize/String1 AS String === " + jMetaDataVideo.getStreamSizeString1AsString());
        System.out.println("StreamSize/String1 AS Boolean === " + jMetaDataVideo.getStreamSizeString1AsBoolean());
        System.out.println("StreamSize/String1 AS BigInteger === " + jMetaDataVideo.getStreamSizeString1AsBigInteger());
        System.out.println("StreamSize/String1 AS URL === " + jMetaDataVideo.getStreamSizeString1AsURL());
        System.out.println("StreamSize/String4 AS Integer === " + jMetaDataVideo.getStreamSizeString4AsInteger());
        System.out.println("StreamSize/String4 AS Long === " + jMetaDataVideo.getStreamSizeString4AsLong());
        System.out.println("StreamSize/String4 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeString4AsLocalDateTime());
        System.out.println("StreamSize/String4 AS LocalTime === " + jMetaDataVideo.getStreamSizeString4AsLocalTime());
        System.out.println("StreamSize/String4 AS String === " + jMetaDataVideo.getStreamSizeString4AsString());
        System.out.println("StreamSize/String4 AS Boolean === " + jMetaDataVideo.getStreamSizeString4AsBoolean());
        System.out.println("StreamSize/String4 AS BigInteger === " + jMetaDataVideo.getStreamSizeString4AsBigInteger());
        System.out.println("StreamSize/String4 AS URL === " + jMetaDataVideo.getStreamSizeString4AsURL());
        System.out.println("Original frame rate mode (Constant, Variable) AS Integer === " + jMetaDataVideo.getFrameRateModeOriginalStringAsInteger());
        System.out.println("Original frame rate mode (Constant, Variable) AS Long === " + jMetaDataVideo.getFrameRateModeOriginalStringAsLong());
        System.out.println("Original frame rate mode (Constant, Variable) AS LocalDateTime === " + jMetaDataVideo.getFrameRateModeOriginalStringAsLocalDateTime());
        System.out.println("Original frame rate mode (Constant, Variable) AS LocalTime === " + jMetaDataVideo.getFrameRateModeOriginalStringAsLocalTime());
        System.out.println("Original frame rate mode (Constant, Variable) AS String === " + jMetaDataVideo.getFrameRateModeOriginalStringAsString());
        System.out.println("Original frame rate mode (Constant, Variable) AS Boolean === " + jMetaDataVideo.getFrameRateModeOriginalStringAsBoolean());
        System.out.println("Original frame rate mode (Constant, Variable) AS BigInteger === " + jMetaDataVideo.getFrameRateModeOriginalStringAsBigInteger());
        System.out.println("Original frame rate mode (Constant, Variable) AS URL === " + jMetaDataVideo.getFrameRateModeOriginalStringAsURL());
        System.out.println("StreamSize/String3 AS Integer === " + jMetaDataVideo.getStreamSizeString3AsInteger());
        System.out.println("StreamSize/String3 AS Long === " + jMetaDataVideo.getStreamSizeString3AsLong());
        System.out.println("StreamSize/String3 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeString3AsLocalDateTime());
        System.out.println("StreamSize/String3 AS LocalTime === " + jMetaDataVideo.getStreamSizeString3AsLocalTime());
        System.out.println("StreamSize/String3 AS String === " + jMetaDataVideo.getStreamSizeString3AsString());
        System.out.println("StreamSize/String3 AS Boolean === " + jMetaDataVideo.getStreamSizeString3AsBoolean());
        System.out.println("StreamSize/String3 AS BigInteger === " + jMetaDataVideo.getStreamSizeString3AsBigInteger());
        System.out.println("StreamSize/String3 AS URL === " + jMetaDataVideo.getStreamSizeString3AsURL());
        System.out.println("Streamsize in with percentage value AS Integer === " + jMetaDataVideo.getStreamSizeString5AsInteger());
        System.out.println("Streamsize in with percentage value AS Long === " + jMetaDataVideo.getStreamSizeString5AsLong());
        System.out.println("Streamsize in with percentage value AS LocalDateTime === " + jMetaDataVideo.getStreamSizeString5AsLocalDateTime());
        System.out.println("Streamsize in with percentage value AS LocalTime === " + jMetaDataVideo.getStreamSizeString5AsLocalTime());
        System.out.println("Streamsize in with percentage value AS String === " + jMetaDataVideo.getStreamSizeString5AsString());
        System.out.println("Streamsize in with percentage value AS Boolean === " + jMetaDataVideo.getStreamSizeString5AsBoolean());
        System.out.println("Streamsize in with percentage value AS BigInteger === " + jMetaDataVideo.getStreamSizeString5AsBigInteger());
        System.out.println("Streamsize in with percentage value AS URL === " + jMetaDataVideo.getStreamSizeString5AsURL());
        System.out.println("Minimum Frames per second AS Integer === " + jMetaDataVideo.getFrameRateMinimumAsInteger());
        System.out.println("Minimum Frames per second AS Long === " + jMetaDataVideo.getFrameRateMinimumAsLong());
        System.out.println("Minimum Frames per second AS LocalDateTime === " + jMetaDataVideo.getFrameRateMinimumAsLocalDateTime());
        System.out.println("Minimum Frames per second AS LocalTime === " + jMetaDataVideo.getFrameRateMinimumAsLocalTime());
        System.out.println("Minimum Frames per second AS String === " + jMetaDataVideo.getFrameRateMinimumAsString());
        System.out.println("Minimum Frames per second AS Boolean === " + jMetaDataVideo.getFrameRateMinimumAsBoolean());
        System.out.println("Minimum Frames per second AS BigInteger === " + jMetaDataVideo.getFrameRateMinimumAsBigInteger());
        System.out.println("Minimum Frames per second AS URL === " + jMetaDataVideo.getFrameRateMinimumAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataVideo.getStreamKindAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataVideo.getStreamKindAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataVideo.getStreamKindAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataVideo.getStreamKindAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataVideo.getStreamKindAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataVideo.getStreamKindAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataVideo.getStreamKindAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataVideo.getStreamKindAsURL());
        System.out.println("Bit rate (with measurement) AS Integer === " + jMetaDataVideo.getBitRateStringAsInteger());
        System.out.println("Bit rate (with measurement) AS Long === " + jMetaDataVideo.getBitRateStringAsLong());
        System.out.println("Bit rate (with measurement) AS LocalDateTime === " + jMetaDataVideo.getBitRateStringAsLocalDateTime());
        System.out.println("Bit rate (with measurement) AS LocalTime === " + jMetaDataVideo.getBitRateStringAsLocalTime());
        System.out.println("Bit rate (with measurement) AS String === " + jMetaDataVideo.getBitRateStringAsString());
        System.out.println("Bit rate (with measurement) AS Boolean === " + jMetaDataVideo.getBitRateStringAsBoolean());
        System.out.println("Bit rate (with measurement) AS BigInteger === " + jMetaDataVideo.getBitRateStringAsBigInteger());
        System.out.println("Bit rate (with measurement) AS URL === " + jMetaDataVideo.getBitRateStringAsURL());
        System.out.println("Frame rate mode (Constant, Variable) AS Integer === " + jMetaDataVideo.getFrameRateModeStringAsInteger());
        System.out.println("Frame rate mode (Constant, Variable) AS Long === " + jMetaDataVideo.getFrameRateModeStringAsLong());
        System.out.println("Frame rate mode (Constant, Variable) AS LocalDateTime === " + jMetaDataVideo.getFrameRateModeStringAsLocalDateTime());
        System.out.println("Frame rate mode (Constant, Variable) AS LocalTime === " + jMetaDataVideo.getFrameRateModeStringAsLocalTime());
        System.out.println("Frame rate mode (Constant, Variable) AS String === " + jMetaDataVideo.getFrameRateModeStringAsString());
        System.out.println("Frame rate mode (Constant, Variable) AS Boolean === " + jMetaDataVideo.getFrameRateModeStringAsBoolean());
        System.out.println("Frame rate mode (Constant, Variable) AS BigInteger === " + jMetaDataVideo.getFrameRateModeStringAsBigInteger());
        System.out.println("Frame rate mode (Constant, Variable) AS URL === " + jMetaDataVideo.getFrameRateModeStringAsURL());
        System.out.println("Language (full) AS Integer === " + jMetaDataVideo.getLanguageString1AsInteger());
        System.out.println("Language (full) AS Long === " + jMetaDataVideo.getLanguageString1AsLong());
        System.out.println("Language (full) AS LocalDateTime === " + jMetaDataVideo.getLanguageString1AsLocalDateTime());
        System.out.println("Language (full) AS LocalTime === " + jMetaDataVideo.getLanguageString1AsLocalTime());
        System.out.println("Language (full) AS String === " + jMetaDataVideo.getLanguageString1AsString());
        System.out.println("Language (full) AS Boolean === " + jMetaDataVideo.getLanguageString1AsBoolean());
        System.out.println("Language (full) AS BigInteger === " + jMetaDataVideo.getLanguageString1AsBigInteger());
        System.out.println("Language (full) AS URL === " + jMetaDataVideo.getLanguageString1AsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsGMCAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsGMCAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsGMCAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsGMCAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsGMCAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsGMCAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsGMCAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsGMCAsURL());
        System.out.println("NTSC or PAL AS Integer === " + jMetaDataVideo.getStandardAsInteger());
        System.out.println("NTSC or PAL AS Long === " + jMetaDataVideo.getStandardAsLong());
        System.out.println("NTSC or PAL AS LocalDateTime === " + jMetaDataVideo.getStandardAsLocalDateTime());
        System.out.println("NTSC or PAL AS LocalTime === " + jMetaDataVideo.getStandardAsLocalTime());
        System.out.println("NTSC or PAL AS String === " + jMetaDataVideo.getStandardAsString());
        System.out.println("NTSC or PAL AS Boolean === " + jMetaDataVideo.getStandardAsBoolean());
        System.out.println("NTSC or PAL AS BigInteger === " + jMetaDataVideo.getStandardAsBigInteger());
        System.out.println("NTSC or PAL AS URL === " + jMetaDataVideo.getStandardAsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Integer === " + jMetaDataVideo.getLanguageString2AsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Long === " + jMetaDataVideo.getLanguageString2AsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS LocalDateTime === " + jMetaDataVideo.getLanguageString2AsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS LocalTime === " + jMetaDataVideo.getLanguageString2AsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS String === " + jMetaDataVideo.getLanguageString2AsString());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Boolean === " + jMetaDataVideo.getLanguageString2AsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS BigInteger === " + jMetaDataVideo.getLanguageString2AsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS URL === " + jMetaDataVideo.getLanguageString2AsURL());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Integer === " + jMetaDataVideo.getLanguageString3AsInteger());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Long === " + jMetaDataVideo.getLanguageString3AsLong());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS LocalDateTime === " + jMetaDataVideo.getLanguageString3AsLocalDateTime());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS LocalTime === " + jMetaDataVideo.getLanguageString3AsLocalTime());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS String === " + jMetaDataVideo.getLanguageString3AsString());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Boolean === " + jMetaDataVideo.getLanguageString3AsBoolean());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS BigInteger === " + jMetaDataVideo.getLanguageString3AsBigInteger());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS URL === " + jMetaDataVideo.getLanguageString3AsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Integer === " + jMetaDataVideo.getLanguageString4AsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Long === " + jMetaDataVideo.getLanguageString4AsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS LocalDateTime === " + jMetaDataVideo.getLanguageString4AsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS LocalTime === " + jMetaDataVideo.getLanguageString4AsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS String === " + jMetaDataVideo.getLanguageString4AsString());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Boolean === " + jMetaDataVideo.getLanguageString4AsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS BigInteger === " + jMetaDataVideo.getLanguageString4AsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS URL === " + jMetaDataVideo.getLanguageString4AsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataVideo.getCodecIDAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataVideo.getCodecIDAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataVideo.getCodecIDAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataVideo.getCodecIDAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataVideo.getCodecIDAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataVideo.getCodecIDAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataVideo.getCodecIDAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataVideo.getCodecIDAsURL());
        System.out.println("Number of a group in order to provide versions of the same track AS Integer === " + jMetaDataVideo.getAlternateGroupAsInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS Long === " + jMetaDataVideo.getAlternateGroupAsLong());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalDateTime === " + jMetaDataVideo.getAlternateGroupAsLocalDateTime());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalTime === " + jMetaDataVideo.getAlternateGroupAsLocalTime());
        System.out.println("Number of a group in order to provide versions of the same track AS String === " + jMetaDataVideo.getAlternateGroupAsString());
        System.out.println("Number of a group in order to provide versions of the same track AS Boolean === " + jMetaDataVideo.getAlternateGroupAsBoolean());
        System.out.println("Number of a group in order to provide versions of the same track AS BigInteger === " + jMetaDataVideo.getAlternateGroupAsBigInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS URL === " + jMetaDataVideo.getAlternateGroupAsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Integer === " + jMetaDataVideo.getLanguageAsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Long === " + jMetaDataVideo.getLanguageAsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS LocalDateTime === " + jMetaDataVideo.getLanguageAsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS LocalTime === " + jMetaDataVideo.getLanguageAsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS String === " + jMetaDataVideo.getLanguageAsString());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Boolean === " + jMetaDataVideo.getLanguageAsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS BigInteger === " + jMetaDataVideo.getLanguageAsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS URL === " + jMetaDataVideo.getLanguageAsURL());
        System.out.println("ScanOrder/String AS Integer === " + jMetaDataVideo.getScanOrderStringAsInteger());
        System.out.println("ScanOrder/String AS Long === " + jMetaDataVideo.getScanOrderStringAsLong());
        System.out.println("ScanOrder/String AS LocalDateTime === " + jMetaDataVideo.getScanOrderStringAsLocalDateTime());
        System.out.println("ScanOrder/String AS LocalTime === " + jMetaDataVideo.getScanOrderStringAsLocalTime());
        System.out.println("ScanOrder/String AS String === " + jMetaDataVideo.getScanOrderStringAsString());
        System.out.println("ScanOrder/String AS Boolean === " + jMetaDataVideo.getScanOrderStringAsBoolean());
        System.out.println("ScanOrder/String AS BigInteger === " + jMetaDataVideo.getScanOrderStringAsBigInteger());
        System.out.println("ScanOrder/String AS URL === " + jMetaDataVideo.getScanOrderStringAsURL());
        System.out.println("Offset between original height and displayed height  in pixel AS Integer === " + jMetaDataVideo.getHeightOffsetStringAsInteger());
        System.out.println("Offset between original height and displayed height  in pixel AS Long === " + jMetaDataVideo.getHeightOffsetStringAsLong());
        System.out.println("Offset between original height and displayed height  in pixel AS LocalDateTime === " + jMetaDataVideo.getHeightOffsetStringAsLocalDateTime());
        System.out.println("Offset between original height and displayed height  in pixel AS LocalTime === " + jMetaDataVideo.getHeightOffsetStringAsLocalTime());
        System.out.println("Offset between original height and displayed height  in pixel AS String === " + jMetaDataVideo.getHeightOffsetStringAsString());
        System.out.println("Offset between original height and displayed height  in pixel AS Boolean === " + jMetaDataVideo.getHeightOffsetStringAsBoolean());
        System.out.println("Offset between original height and displayed height  in pixel AS BigInteger === " + jMetaDataVideo.getHeightOffsetStringAsBigInteger());
        System.out.println("Offset between original height and displayed height  in pixel AS URL === " + jMetaDataVideo.getHeightOffsetStringAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Integer === " + jMetaDataVideo.getDurationLastFrameAsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Long === " + jMetaDataVideo.getDurationLastFrameAsLong());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataVideo.getDurationLastFrameAsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS LocalTime === " + jMetaDataVideo.getDurationLastFrameAsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS String === " + jMetaDataVideo.getDurationLastFrameAsString());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Boolean === " + jMetaDataVideo.getDurationLastFrameAsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS BigInteger === " + jMetaDataVideo.getDurationLastFrameAsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS URL === " + jMetaDataVideo.getDurationLastFrameAsURL());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Integer === " + jMetaDataVideo.getEncodedLibraryStringAsInteger());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Long === " + jMetaDataVideo.getEncodedLibraryStringAsLong());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalDateTime === " + jMetaDataVideo.getEncodedLibraryStringAsLocalDateTime());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalTime === " + jMetaDataVideo.getEncodedLibraryStringAsLocalTime());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS String === " + jMetaDataVideo.getEncodedLibraryStringAsString());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Boolean === " + jMetaDataVideo.getEncodedLibraryStringAsBoolean());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS BigInteger === " + jMetaDataVideo.getEncodedLibraryStringAsBigInteger());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS URL === " + jMetaDataVideo.getEncodedLibraryStringAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsRefFramesStringAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsRefFramesStringAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsRefFramesStringAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsRefFramesStringAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsRefFramesStringAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsRefFramesStringAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsRefFramesStringAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsRefFramesStringAsURL());
        System.out.println("Streamsize in with percentage value AS Integer === " + jMetaDataVideo.getStreamSizeStringAsInteger());
        System.out.println("Streamsize in with percentage value AS Long === " + jMetaDataVideo.getStreamSizeStringAsLong());
        System.out.println("Streamsize in with percentage value AS LocalDateTime === " + jMetaDataVideo.getStreamSizeStringAsLocalDateTime());
        System.out.println("Streamsize in with percentage value AS LocalTime === " + jMetaDataVideo.getStreamSizeStringAsLocalTime());
        System.out.println("Streamsize in with percentage value AS String === " + jMetaDataVideo.getStreamSizeStringAsString());
        System.out.println("Streamsize in with percentage value AS Boolean === " + jMetaDataVideo.getStreamSizeStringAsBoolean());
        System.out.println("Streamsize in with percentage value AS BigInteger === " + jMetaDataVideo.getStreamSizeStringAsBigInteger());
        System.out.println("Streamsize in with percentage value AS URL === " + jMetaDataVideo.getStreamSizeStringAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataVideo.getDefaultStringAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataVideo.getDefaultStringAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataVideo.getDefaultStringAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataVideo.getDefaultStringAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataVideo.getDefaultStringAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataVideo.getDefaultStringAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataVideo.getDefaultStringAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataVideo.getDefaultStringAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataVideo.getOriginalSourceMediumIDStringAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataVideo.getOriginalSourceMediumIDStringAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataVideo.getOriginalSourceMediumIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataVideo.getOriginalSourceMediumIDStringAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataVideo.getOriginalSourceMediumIDStringAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataVideo.getOriginalSourceMediumIDStringAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataVideo.getOriginalSourceMediumIDStringAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataVideo.getOriginalSourceMediumIDStringAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationLastFrameString1AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataVideo.getSourceDurationLastFrameString1AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationLastFrameString1AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationLastFrameString1AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataVideo.getSourceDurationLastFrameString1AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationLastFrameString1AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationLastFrameString1AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataVideo.getSourceDurationLastFrameString1AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getSourceDurationLastFrameString3AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getSourceDurationLastFrameString3AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getSourceDurationLastFrameString3AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getSourceDurationLastFrameString3AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataVideo.getSourceDurationLastFrameString3AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getSourceDurationLastFrameString3AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getSourceDurationLastFrameString3AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getSourceDurationLastFrameString3AsURL());
        System.out.println("Presence of colour description AS Integer === " + jMetaDataVideo.getcolourdescriptionpresentAsInteger());
        System.out.println("Presence of colour description AS Long === " + jMetaDataVideo.getcolourdescriptionpresentAsLong());
        System.out.println("Presence of colour description AS LocalDateTime === " + jMetaDataVideo.getcolourdescriptionpresentAsLocalDateTime());
        System.out.println("Presence of colour description AS LocalTime === " + jMetaDataVideo.getcolourdescriptionpresentAsLocalTime());
        System.out.println("Presence of colour description AS String === " + jMetaDataVideo.getcolourdescriptionpresentAsString());
        System.out.println("Presence of colour description AS Boolean === " + jMetaDataVideo.getcolourdescriptionpresentAsBoolean());
        System.out.println("Presence of colour description AS BigInteger === " + jMetaDataVideo.getcolourdescriptionpresentAsBigInteger());
        System.out.println("Presence of colour description AS URL === " + jMetaDataVideo.getcolourdescriptionpresentAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationLastFrameString2AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getSourceDurationLastFrameString2AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationLastFrameString2AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationLastFrameString2AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getSourceDurationLastFrameString2AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationLastFrameString2AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationLastFrameString2AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getSourceDurationLastFrameString2AsURL());
        System.out.println("ScanOrder_Stored/String AS Integer === " + jMetaDataVideo.getScanOrderStoredStringAsInteger());
        System.out.println("ScanOrder_Stored/String AS Long === " + jMetaDataVideo.getScanOrderStoredStringAsLong());
        System.out.println("ScanOrder_Stored/String AS LocalDateTime === " + jMetaDataVideo.getScanOrderStoredStringAsLocalDateTime());
        System.out.println("ScanOrder_Stored/String AS LocalTime === " + jMetaDataVideo.getScanOrderStoredStringAsLocalTime());
        System.out.println("ScanOrder_Stored/String AS String === " + jMetaDataVideo.getScanOrderStoredStringAsString());
        System.out.println("ScanOrder_Stored/String AS Boolean === " + jMetaDataVideo.getScanOrderStoredStringAsBoolean());
        System.out.println("ScanOrder_Stored/String AS BigInteger === " + jMetaDataVideo.getScanOrderStoredStringAsBigInteger());
        System.out.println("ScanOrder_Stored/String AS URL === " + jMetaDataVideo.getScanOrderStoredStringAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsMatrixAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsMatrixAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsMatrixAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsMatrixAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsMatrixAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsMatrixAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsMatrixAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsMatrixAsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getSourceDurationLastFrameString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getSourceDurationLastFrameString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getSourceDurationLastFrameString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getSourceDurationLastFrameString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getSourceDurationLastFrameString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getSourceDurationLastFrameString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getSourceDurationLastFrameString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getSourceDurationLastFrameString5AsURL());
        System.out.println("Display Aspect ratio AS Integer === " + jMetaDataVideo.getDisplayAspectRatioStringAsInteger());
        System.out.println("Display Aspect ratio AS Long === " + jMetaDataVideo.getDisplayAspectRatioStringAsLong());
        System.out.println("Display Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getDisplayAspectRatioStringAsLocalDateTime());
        System.out.println("Display Aspect ratio AS LocalTime === " + jMetaDataVideo.getDisplayAspectRatioStringAsLocalTime());
        System.out.println("Display Aspect ratio AS String === " + jMetaDataVideo.getDisplayAspectRatioStringAsString());
        System.out.println("Display Aspect ratio AS Boolean === " + jMetaDataVideo.getDisplayAspectRatioStringAsBoolean());
        System.out.println("Display Aspect ratio AS BigInteger === " + jMetaDataVideo.getDisplayAspectRatioStringAsBigInteger());
        System.out.println("Display Aspect ratio AS URL === " + jMetaDataVideo.getDisplayAspectRatioStringAsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getSourceDurationLastFrameString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getSourceDurationLastFrameString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getSourceDurationLastFrameString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getSourceDurationLastFrameString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getSourceDurationLastFrameString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getSourceDurationLastFrameString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getSourceDurationLastFrameString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getSourceDurationLastFrameString4AsURL());
        System.out.println("16/24/32 bits AS Integer === " + jMetaDataVideo.getBitDepthStringAsInteger());
        System.out.println("16/24/32 bits AS Long === " + jMetaDataVideo.getBitDepthStringAsLong());
        System.out.println("16/24/32 bits AS LocalDateTime === " + jMetaDataVideo.getBitDepthStringAsLocalDateTime());
        System.out.println("16/24/32 bits AS LocalTime === " + jMetaDataVideo.getBitDepthStringAsLocalTime());
        System.out.println("16/24/32 bits AS String === " + jMetaDataVideo.getBitDepthStringAsString());
        System.out.println("16/24/32 bits AS Boolean === " + jMetaDataVideo.getBitDepthStringAsBoolean());
        System.out.println("16/24/32 bits AS BigInteger === " + jMetaDataVideo.getBitDepthStringAsBigInteger());
        System.out.println("16/24/32 bits AS URL === " + jMetaDataVideo.getBitDepthStringAsURL());
        System.out.println("Number of frames AS Integer === " + jMetaDataVideo.getFrameCountAsInteger());
        System.out.println("Number of frames AS Long === " + jMetaDataVideo.getFrameCountAsLong());
        System.out.println("Number of frames AS LocalDateTime === " + jMetaDataVideo.getFrameCountAsLocalDateTime());
        System.out.println("Number of frames AS LocalTime === " + jMetaDataVideo.getFrameCountAsLocalTime());
        System.out.println("Number of frames AS String === " + jMetaDataVideo.getFrameCountAsString());
        System.out.println("Number of frames AS Boolean === " + jMetaDataVideo.getFrameCountAsBoolean());
        System.out.println("Number of frames AS BigInteger === " + jMetaDataVideo.getFrameCountAsBigInteger());
        System.out.println("Number of frames AS URL === " + jMetaDataVideo.getFrameCountAsURL());
        System.out.println("Name of the track AS Integer === " + jMetaDataVideo.getTitleAsInteger());
        System.out.println("Name of the track AS Long === " + jMetaDataVideo.getTitleAsLong());
        System.out.println("Name of the track AS LocalDateTime === " + jMetaDataVideo.getTitleAsLocalDateTime());
        System.out.println("Name of the track AS LocalTime === " + jMetaDataVideo.getTitleAsLocalTime());
        System.out.println("Name of the track AS String === " + jMetaDataVideo.getTitleAsString());
        System.out.println("Name of the track AS Boolean === " + jMetaDataVideo.getTitleAsBoolean());
        System.out.println("Name of the track AS BigInteger === " + jMetaDataVideo.getTitleAsBigInteger());
        System.out.println("Name of the track AS URL === " + jMetaDataVideo.getTitleAsURL());
        System.out.println("Delay drop frame AS Integer === " + jMetaDataVideo.getDelayDropFrameAsInteger());
        System.out.println("Delay drop frame AS Long === " + jMetaDataVideo.getDelayDropFrameAsLong());
        System.out.println("Delay drop frame AS LocalDateTime === " + jMetaDataVideo.getDelayDropFrameAsLocalDateTime());
        System.out.println("Delay drop frame AS LocalTime === " + jMetaDataVideo.getDelayDropFrameAsLocalTime());
        System.out.println("Delay drop frame AS String === " + jMetaDataVideo.getDelayDropFrameAsString());
        System.out.println("Delay drop frame AS Boolean === " + jMetaDataVideo.getDelayDropFrameAsBoolean());
        System.out.println("Delay drop frame AS BigInteger === " + jMetaDataVideo.getDelayDropFrameAsBigInteger());
        System.out.println("Delay drop frame AS URL === " + jMetaDataVideo.getDelayDropFrameAsURL());
        System.out.println("Rotation AS Integer === " + jMetaDataVideo.getRotationAsInteger());
        System.out.println("Rotation AS Long === " + jMetaDataVideo.getRotationAsLong());
        System.out.println("Rotation AS LocalDateTime === " + jMetaDataVideo.getRotationAsLocalDateTime());
        System.out.println("Rotation AS LocalTime === " + jMetaDataVideo.getRotationAsLocalTime());
        System.out.println("Rotation AS String === " + jMetaDataVideo.getRotationAsString());
        System.out.println("Rotation AS Boolean === " + jMetaDataVideo.getRotationAsBoolean());
        System.out.println("Rotation AS BigInteger === " + jMetaDataVideo.getRotationAsBigInteger());
        System.out.println("Rotation AS URL === " + jMetaDataVideo.getRotationAsURL());
        System.out.println("Maximum Bit rate in bps AS Integer === " + jMetaDataVideo.getBitRateMaximumAsInteger());
        System.out.println("Maximum Bit rate in bps AS Long === " + jMetaDataVideo.getBitRateMaximumAsLong());
        System.out.println("Maximum Bit rate in bps AS LocalDateTime === " + jMetaDataVideo.getBitRateMaximumAsLocalDateTime());
        System.out.println("Maximum Bit rate in bps AS LocalTime === " + jMetaDataVideo.getBitRateMaximumAsLocalTime());
        System.out.println("Maximum Bit rate in bps AS String === " + jMetaDataVideo.getBitRateMaximumAsString());
        System.out.println("Maximum Bit rate in bps AS Boolean === " + jMetaDataVideo.getBitRateMaximumAsBoolean());
        System.out.println("Maximum Bit rate in bps AS BigInteger === " + jMetaDataVideo.getBitRateMaximumAsBigInteger());
        System.out.println("Maximum Bit rate in bps AS URL === " + jMetaDataVideo.getBitRateMaximumAsURL());
        System.out.println("Defines the size of the buffer needed to decode the sequence. AS Integer === " + jMetaDataVideo.getBufferSizeAsInteger());
        System.out.println("Defines the size of the buffer needed to decode the sequence. AS Long === " + jMetaDataVideo.getBufferSizeAsLong());
        System.out.println("Defines the size of the buffer needed to decode the sequence. AS LocalDateTime === " + jMetaDataVideo.getBufferSizeAsLocalDateTime());
        System.out.println("Defines the size of the buffer needed to decode the sequence. AS LocalTime === " + jMetaDataVideo.getBufferSizeAsLocalTime());
        System.out.println("Defines the size of the buffer needed to decode the sequence. AS String === " + jMetaDataVideo.getBufferSizeAsString());
        System.out.println("Defines the size of the buffer needed to decode the sequence. AS Boolean === " + jMetaDataVideo.getBufferSizeAsBoolean());
        System.out.println("Defines the size of the buffer needed to decode the sequence. AS BigInteger === " + jMetaDataVideo.getBufferSizeAsBigInteger());
        System.out.println("Defines the size of the buffer needed to decode the sequence. AS URL === " + jMetaDataVideo.getBufferSizeAsURL());
        System.out.println("Stream size divided by file size AS Integer === " + jMetaDataVideo.getStreamSizeProportionAsInteger());
        System.out.println("Stream size divided by file size AS Long === " + jMetaDataVideo.getStreamSizeProportionAsLong());
        System.out.println("Stream size divided by file size AS LocalDateTime === " + jMetaDataVideo.getStreamSizeProportionAsLocalDateTime());
        System.out.println("Stream size divided by file size AS LocalTime === " + jMetaDataVideo.getStreamSizeProportionAsLocalTime());
        System.out.println("Stream size divided by file size AS String === " + jMetaDataVideo.getStreamSizeProportionAsString());
        System.out.println("Stream size divided by file size AS Boolean === " + jMetaDataVideo.getStreamSizeProportionAsBoolean());
        System.out.println("Stream size divided by file size AS BigInteger === " + jMetaDataVideo.getStreamSizeProportionAsBigInteger());
        System.out.println("Stream size divided by file size AS URL === " + jMetaDataVideo.getStreamSizeProportionAsURL());
        System.out.println("Source Encoded Stream size divided by file size AS Integer === " + jMetaDataVideo.getSourceStreamSizeEncodedProportionAsInteger());
        System.out.println("Source Encoded Stream size divided by file size AS Long === " + jMetaDataVideo.getSourceStreamSizeEncodedProportionAsLong());
        System.out.println("Source Encoded Stream size divided by file size AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeEncodedProportionAsLocalDateTime());
        System.out.println("Source Encoded Stream size divided by file size AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeEncodedProportionAsLocalTime());
        System.out.println("Source Encoded Stream size divided by file size AS String === " + jMetaDataVideo.getSourceStreamSizeEncodedProportionAsString());
        System.out.println("Source Encoded Stream size divided by file size AS Boolean === " + jMetaDataVideo.getSourceStreamSizeEncodedProportionAsBoolean());
        System.out.println("Source Encoded Stream size divided by file size AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeEncodedProportionAsBigInteger());
        System.out.println("Source Encoded Stream size divided by file size AS URL === " + jMetaDataVideo.getSourceStreamSizeEncodedProportionAsURL());
        System.out.println("Parameters used by the software AS Integer === " + jMetaDataVideo.getEncodedLibrarySettingsAsInteger());
        System.out.println("Parameters used by the software AS Long === " + jMetaDataVideo.getEncodedLibrarySettingsAsLong());
        System.out.println("Parameters used by the software AS LocalDateTime === " + jMetaDataVideo.getEncodedLibrarySettingsAsLocalDateTime());
        System.out.println("Parameters used by the software AS LocalTime === " + jMetaDataVideo.getEncodedLibrarySettingsAsLocalTime());
        System.out.println("Parameters used by the software AS String === " + jMetaDataVideo.getEncodedLibrarySettingsAsString());
        System.out.println("Parameters used by the software AS Boolean === " + jMetaDataVideo.getEncodedLibrarySettingsAsBoolean());
        System.out.println("Parameters used by the software AS BigInteger === " + jMetaDataVideo.getEncodedLibrarySettingsAsBigInteger());
        System.out.println("Parameters used by the software AS URL === " + jMetaDataVideo.getEncodedLibrarySettingsAsURL());
        System.out.println("Source Play time of the stream, in ms AS Integer === " + jMetaDataVideo.getSourceDurationAsInteger());
        System.out.println("Source Play time of the stream, in ms AS Long === " + jMetaDataVideo.getSourceDurationAsLong());
        System.out.println("Source Play time of the stream, in ms AS LocalDateTime === " + jMetaDataVideo.getSourceDurationAsLocalDateTime());
        System.out.println("Source Play time of the stream, in ms AS LocalTime === " + jMetaDataVideo.getSourceDurationAsLocalTime());
        System.out.println("Source Play time of the stream, in ms AS String === " + jMetaDataVideo.getSourceDurationAsString());
        System.out.println("Source Play time of the stream, in ms AS Boolean === " + jMetaDataVideo.getSourceDurationAsBoolean());
        System.out.println("Source Play time of the stream, in ms AS BigInteger === " + jMetaDataVideo.getSourceDurationAsBigInteger());
        System.out.println("Source Play time of the stream, in ms AS URL === " + jMetaDataVideo.getSourceDurationAsURL());
        System.out.println("Frame rate mode (CFR, VFR) AS Integer === " + jMetaDataVideo.getFrameRateModeAsInteger());
        System.out.println("Frame rate mode (CFR, VFR) AS Long === " + jMetaDataVideo.getFrameRateModeAsLong());
        System.out.println("Frame rate mode (CFR, VFR) AS LocalDateTime === " + jMetaDataVideo.getFrameRateModeAsLocalDateTime());
        System.out.println("Frame rate mode (CFR, VFR) AS LocalTime === " + jMetaDataVideo.getFrameRateModeAsLocalTime());
        System.out.println("Frame rate mode (CFR, VFR) AS String === " + jMetaDataVideo.getFrameRateModeAsString());
        System.out.println("Frame rate mode (CFR, VFR) AS Boolean === " + jMetaDataVideo.getFrameRateModeAsBoolean());
        System.out.println("Frame rate mode (CFR, VFR) AS BigInteger === " + jMetaDataVideo.getFrameRateModeAsBigInteger());
        System.out.println("Frame rate mode (CFR, VFR) AS URL === " + jMetaDataVideo.getFrameRateModeAsURL());
        System.out.println("Offset between original width and displayed width in pixel AS Integer === " + jMetaDataVideo.getWidthOffsetAsInteger());
        System.out.println("Offset between original width and displayed width in pixel AS Long === " + jMetaDataVideo.getWidthOffsetAsLong());
        System.out.println("Offset between original width and displayed width in pixel AS LocalDateTime === " + jMetaDataVideo.getWidthOffsetAsLocalDateTime());
        System.out.println("Offset between original width and displayed width in pixel AS LocalTime === " + jMetaDataVideo.getWidthOffsetAsLocalTime());
        System.out.println("Offset between original width and displayed width in pixel AS String === " + jMetaDataVideo.getWidthOffsetAsString());
        System.out.println("Offset between original width and displayed width in pixel AS Boolean === " + jMetaDataVideo.getWidthOffsetAsBoolean());
        System.out.println("Offset between original width and displayed width in pixel AS BigInteger === " + jMetaDataVideo.getWidthOffsetAsBigInteger());
        System.out.println("Offset between original width and displayed width in pixel AS URL === " + jMetaDataVideo.getWidthOffsetAsURL());
        System.out.println("Sampled width AS Integer === " + jMetaDataVideo.getSampledWidthAsInteger());
        System.out.println("Sampled width AS Long === " + jMetaDataVideo.getSampledWidthAsLong());
        System.out.println("Sampled width AS LocalDateTime === " + jMetaDataVideo.getSampledWidthAsLocalDateTime());
        System.out.println("Sampled width AS LocalTime === " + jMetaDataVideo.getSampledWidthAsLocalTime());
        System.out.println("Sampled width AS String === " + jMetaDataVideo.getSampledWidthAsString());
        System.out.println("Sampled width AS Boolean === " + jMetaDataVideo.getSampledWidthAsBoolean());
        System.out.println("Sampled width AS BigInteger === " + jMetaDataVideo.getSampledWidthAsBigInteger());
        System.out.println("Sampled width AS URL === " + jMetaDataVideo.getSampledWidthAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataVideo.getDelayOriginalString1AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataVideo.getDelayOriginalString1AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalString1AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataVideo.getDelayOriginalString1AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataVideo.getDelayOriginalString1AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataVideo.getDelayOriginalString1AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataVideo.getDelayOriginalString1AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataVideo.getDelayOriginalString1AsURL());
        System.out.println("Count of objects available in this stream AS Integer === " + jMetaDataVideo.getCountAsInteger());
        System.out.println("Count of objects available in this stream AS Long === " + jMetaDataVideo.getCountAsLong());
        System.out.println("Count of objects available in this stream AS LocalDateTime === " + jMetaDataVideo.getCountAsLocalDateTime());
        System.out.println("Count of objects available in this stream AS LocalTime === " + jMetaDataVideo.getCountAsLocalTime());
        System.out.println("Count of objects available in this stream AS String === " + jMetaDataVideo.getCountAsString());
        System.out.println("Count of objects available in this stream AS Boolean === " + jMetaDataVideo.getCountAsBoolean());
        System.out.println("Count of objects available in this stream AS BigInteger === " + jMetaDataVideo.getCountAsBigInteger());
        System.out.println("Count of objects available in this stream AS URL === " + jMetaDataVideo.getCountAsURL());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Integer === " + jMetaDataVideo.getFormatSettingsWrappingAsInteger());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Long === " + jMetaDataVideo.getFormatSettingsWrappingAsLong());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsWrappingAsLocalDateTime());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS LocalTime === " + jMetaDataVideo.getFormatSettingsWrappingAsLocalTime());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS String === " + jMetaDataVideo.getFormatSettingsWrappingAsString());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Boolean === " + jMetaDataVideo.getFormatSettingsWrappingAsBoolean());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS BigInteger === " + jMetaDataVideo.getFormatSettingsWrappingAsBigInteger());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS URL === " + jMetaDataVideo.getFormatSettingsWrappingAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataVideo.getDelayOriginalString2AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataVideo.getDelayOriginalString2AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalString2AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataVideo.getDelayOriginalString2AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataVideo.getDelayOriginalString2AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataVideo.getDelayOriginalString2AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataVideo.getDelayOriginalString2AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataVideo.getDelayOriginalString2AsURL());
        System.out.println("Encryption AS Integer === " + jMetaDataVideo.getEncryptionAsInteger());
        System.out.println("Encryption AS Long === " + jMetaDataVideo.getEncryptionAsLong());
        System.out.println("Encryption AS LocalDateTime === " + jMetaDataVideo.getEncryptionAsLocalDateTime());
        System.out.println("Encryption AS LocalTime === " + jMetaDataVideo.getEncryptionAsLocalTime());
        System.out.println("Encryption AS String === " + jMetaDataVideo.getEncryptionAsString());
        System.out.println("Encryption AS Boolean === " + jMetaDataVideo.getEncryptionAsBoolean());
        System.out.println("Encryption AS BigInteger === " + jMetaDataVideo.getEncryptionAsBigInteger());
        System.out.println("Encryption AS URL === " + jMetaDataVideo.getEncryptionAsURL());
        System.out.println("Multiview, profile of the base stream AS Integer === " + jMetaDataVideo.getMultiViewBaseProfileAsInteger());
        System.out.println("Multiview, profile of the base stream AS Long === " + jMetaDataVideo.getMultiViewBaseProfileAsLong());
        System.out.println("Multiview, profile of the base stream AS LocalDateTime === " + jMetaDataVideo.getMultiViewBaseProfileAsLocalDateTime());
        System.out.println("Multiview, profile of the base stream AS LocalTime === " + jMetaDataVideo.getMultiViewBaseProfileAsLocalTime());
        System.out.println("Multiview, profile of the base stream AS String === " + jMetaDataVideo.getMultiViewBaseProfileAsString());
        System.out.println("Multiview, profile of the base stream AS Boolean === " + jMetaDataVideo.getMultiViewBaseProfileAsBoolean());
        System.out.println("Multiview, profile of the base stream AS BigInteger === " + jMetaDataVideo.getMultiViewBaseProfileAsBigInteger());
        System.out.println("Multiview, profile of the base stream AS URL === " + jMetaDataVideo.getMultiViewBaseProfileAsURL());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Integer === " + jMetaDataVideo.getDelayOriginalAsInteger());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Long === " + jMetaDataVideo.getDelayOriginalAsLong());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalAsLocalDateTime());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS LocalTime === " + jMetaDataVideo.getDelayOriginalAsLocalTime());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS String === " + jMetaDataVideo.getDelayOriginalAsString());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Boolean === " + jMetaDataVideo.getDelayOriginalAsBoolean());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS BigInteger === " + jMetaDataVideo.getDelayOriginalAsBigInteger());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS URL === " + jMetaDataVideo.getDelayOriginalAsURL());
        System.out.println("bits/(Pixel*Frame) (like Gordian Knot) AS Integer === " + jMetaDataVideo.getBitsPixelFrameAsInteger());
        System.out.println("bits/(Pixel*Frame) (like Gordian Knot) AS Long === " + jMetaDataVideo.getBitsPixelFrameAsLong());
        System.out.println("bits/(Pixel*Frame) (like Gordian Knot) AS LocalDateTime === " + jMetaDataVideo.getBitsPixelFrameAsLocalDateTime());
        System.out.println("bits/(Pixel*Frame) (like Gordian Knot) AS LocalTime === " + jMetaDataVideo.getBitsPixelFrameAsLocalTime());
        System.out.println("bits/(Pixel*Frame) (like Gordian Knot) AS String === " + jMetaDataVideo.getBitsPixelFrameAsString());
        System.out.println("bits/(Pixel*Frame) (like Gordian Knot) AS Boolean === " + jMetaDataVideo.getBitsPixelFrameAsBoolean());
        System.out.println("bits/(Pixel*Frame) (like Gordian Knot) AS BigInteger === " + jMetaDataVideo.getBitsPixelFrameAsBigInteger());
        System.out.println("bits/(Pixel*Frame) (like Gordian Knot) AS URL === " + jMetaDataVideo.getBitsPixelFrameAsURL());
        System.out.println("Frames per second, numerator AS Integer === " + jMetaDataVideo.getFrameRateNumAsInteger());
        System.out.println("Frames per second, numerator AS Long === " + jMetaDataVideo.getFrameRateNumAsLong());
        System.out.println("Frames per second, numerator AS LocalDateTime === " + jMetaDataVideo.getFrameRateNumAsLocalDateTime());
        System.out.println("Frames per second, numerator AS LocalTime === " + jMetaDataVideo.getFrameRateNumAsLocalTime());
        System.out.println("Frames per second, numerator AS String === " + jMetaDataVideo.getFrameRateNumAsString());
        System.out.println("Frames per second, numerator AS Boolean === " + jMetaDataVideo.getFrameRateNumAsBoolean());
        System.out.println("Frames per second, numerator AS BigInteger === " + jMetaDataVideo.getFrameRateNumAsBigInteger());
        System.out.println("Frames per second, numerator AS URL === " + jMetaDataVideo.getFrameRateNumAsURL());
        System.out.println("How this stream file is aligned in the container AS Integer === " + jMetaDataVideo.getAlignmentAsInteger());
        System.out.println("How this stream file is aligned in the container AS Long === " + jMetaDataVideo.getAlignmentAsLong());
        System.out.println("How this stream file is aligned in the container AS LocalDateTime === " + jMetaDataVideo.getAlignmentAsLocalDateTime());
        System.out.println("How this stream file is aligned in the container AS LocalTime === " + jMetaDataVideo.getAlignmentAsLocalTime());
        System.out.println("How this stream file is aligned in the container AS String === " + jMetaDataVideo.getAlignmentAsString());
        System.out.println("How this stream file is aligned in the container AS Boolean === " + jMetaDataVideo.getAlignmentAsBoolean());
        System.out.println("How this stream file is aligned in the container AS BigInteger === " + jMetaDataVideo.getAlignmentAsBigInteger());
        System.out.println("How this stream file is aligned in the container AS URL === " + jMetaDataVideo.getAlignmentAsURL());
        System.out.println("Version of this format AS Integer === " + jMetaDataVideo.getFormatVersionAsInteger());
        System.out.println("Version of this format AS Long === " + jMetaDataVideo.getFormatVersionAsLong());
        System.out.println("Version of this format AS LocalDateTime === " + jMetaDataVideo.getFormatVersionAsLocalDateTime());
        System.out.println("Version of this format AS LocalTime === " + jMetaDataVideo.getFormatVersionAsLocalTime());
        System.out.println("Version of this format AS String === " + jMetaDataVideo.getFormatVersionAsString());
        System.out.println("Version of this format AS Boolean === " + jMetaDataVideo.getFormatVersionAsBoolean());
        System.out.println("Version of this format AS BigInteger === " + jMetaDataVideo.getFormatVersionAsBigInteger());
        System.out.println("Version of this format AS URL === " + jMetaDataVideo.getFormatVersionAsURL());
        System.out.println("When multiple streams, number of the stream (base=1) AS Integer === " + jMetaDataVideo.getStreamKindPosAsInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS Long === " + jMetaDataVideo.getStreamKindPosAsLong());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalDateTime === " + jMetaDataVideo.getStreamKindPosAsLocalDateTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalTime === " + jMetaDataVideo.getStreamKindPosAsLocalTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS String === " + jMetaDataVideo.getStreamKindPosAsString());
        System.out.println("When multiple streams, number of the stream (base=1) AS Boolean === " + jMetaDataVideo.getStreamKindPosAsBoolean());
        System.out.println("When multiple streams, number of the stream (base=1) AS BigInteger === " + jMetaDataVideo.getStreamKindPosAsBigInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS URL === " + jMetaDataVideo.getStreamKindPosAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataVideo.getOriginalSourceMediumIDAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataVideo.getOriginalSourceMediumIDAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataVideo.getOriginalSourceMediumIDAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataVideo.getOriginalSourceMediumIDAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataVideo.getOriginalSourceMediumIDAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataVideo.getOriginalSourceMediumIDAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataVideo.getOriginalSourceMediumIDAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataVideo.getOriginalSourceMediumIDAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getDurationStringAsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getDurationStringAsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationStringAsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getDurationStringAsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getDurationStringAsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getDurationStringAsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getDurationStringAsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getDurationStringAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsMatrixStringAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsMatrixStringAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsMatrixStringAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsMatrixStringAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsMatrixStringAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsMatrixStringAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsMatrixStringAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsMatrixStringAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataVideo.getIDAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataVideo.getIDAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataVideo.getIDAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataVideo.getIDAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataVideo.getIDAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataVideo.getIDAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataVideo.getIDAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataVideo.getIDAsURL());
        System.out.println("Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) AS Integer === " + jMetaDataVideo.getTimeCodeSourceAsInteger());
        System.out.println("Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) AS Long === " + jMetaDataVideo.getTimeCodeSourceAsLong());
        System.out.println("Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) AS LocalDateTime === " + jMetaDataVideo.getTimeCodeSourceAsLocalDateTime());
        System.out.println("Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) AS LocalTime === " + jMetaDataVideo.getTimeCodeSourceAsLocalTime());
        System.out.println("Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) AS String === " + jMetaDataVideo.getTimeCodeSourceAsString());
        System.out.println("Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) AS Boolean === " + jMetaDataVideo.getTimeCodeSourceAsBoolean());
        System.out.println("Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) AS BigInteger === " + jMetaDataVideo.getTimeCodeSourceAsBigInteger());
        System.out.println("Time code source (Container, Stream, SystemScheme1, SDTI, ANC...) AS URL === " + jMetaDataVideo.getTimeCodeSourceAsURL());
        System.out.println("Release date of software AS Integer === " + jMetaDataVideo.getEncodedLibraryDateAsInteger());
        System.out.println("Release date of software AS Long === " + jMetaDataVideo.getEncodedLibraryDateAsLong());
        System.out.println("Release date of software AS LocalDateTime === " + jMetaDataVideo.getEncodedLibraryDateAsLocalDateTime());
        System.out.println("Release date of software AS LocalTime === " + jMetaDataVideo.getEncodedLibraryDateAsLocalTime());
        System.out.println("Release date of software AS String === " + jMetaDataVideo.getEncodedLibraryDateAsString());
        System.out.println("Release date of software AS Boolean === " + jMetaDataVideo.getEncodedLibraryDateAsBoolean());
        System.out.println("Release date of software AS BigInteger === " + jMetaDataVideo.getEncodedLibraryDateAsBigInteger());
        System.out.println("Release date of software AS URL === " + jMetaDataVideo.getEncodedLibraryDateAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataVideo.getMenuIDStringAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataVideo.getMenuIDStringAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataVideo.getMenuIDStringAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataVideo.getMenuIDStringAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataVideo.getMenuIDStringAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataVideo.getMenuIDStringAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataVideo.getMenuIDStringAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataVideo.getMenuIDStringAsURL());
        System.out.println("ScanType/String AS Integer === " + jMetaDataVideo.getScanTypeStringAsInteger());
        System.out.println("ScanType/String AS Long === " + jMetaDataVideo.getScanTypeStringAsLong());
        System.out.println("ScanType/String AS LocalDateTime === " + jMetaDataVideo.getScanTypeStringAsLocalDateTime());
        System.out.println("ScanType/String AS LocalTime === " + jMetaDataVideo.getScanTypeStringAsLocalTime());
        System.out.println("ScanType/String AS String === " + jMetaDataVideo.getScanTypeStringAsString());
        System.out.println("ScanType/String AS Boolean === " + jMetaDataVideo.getScanTypeStringAsBoolean());
        System.out.println("ScanType/String AS BigInteger === " + jMetaDataVideo.getScanTypeStringAsBigInteger());
        System.out.println("ScanType/String AS URL === " + jMetaDataVideo.getScanTypeStringAsURL());
        System.out.println("More info about Language (e.g. Director's Comment) AS Integer === " + jMetaDataVideo.getLanguageMoreAsInteger());
        System.out.println("More info about Language (e.g. Director's Comment) AS Long === " + jMetaDataVideo.getLanguageMoreAsLong());
        System.out.println("More info about Language (e.g. Director's Comment) AS LocalDateTime === " + jMetaDataVideo.getLanguageMoreAsLocalDateTime());
        System.out.println("More info about Language (e.g. Director's Comment) AS LocalTime === " + jMetaDataVideo.getLanguageMoreAsLocalTime());
        System.out.println("More info about Language (e.g. Director's Comment) AS String === " + jMetaDataVideo.getLanguageMoreAsString());
        System.out.println("More info about Language (e.g. Director's Comment) AS Boolean === " + jMetaDataVideo.getLanguageMoreAsBoolean());
        System.out.println("More info about Language (e.g. Director's Comment) AS BigInteger === " + jMetaDataVideo.getLanguageMoreAsBigInteger());
        System.out.println("More info about Language (e.g. Director's Comment) AS URL === " + jMetaDataVideo.getLanguageMoreAsURL());
        System.out.println("Source Streamsize in with percentage value AS Integer === " + jMetaDataVideo.getSourceStreamSizeStringAsInteger());
        System.out.println("Source Streamsize in with percentage value AS Long === " + jMetaDataVideo.getSourceStreamSizeStringAsLong());
        System.out.println("Source Streamsize in with percentage value AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeStringAsLocalDateTime());
        System.out.println("Source Streamsize in with percentage value AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeStringAsLocalTime());
        System.out.println("Source Streamsize in with percentage value AS String === " + jMetaDataVideo.getSourceStreamSizeStringAsString());
        System.out.println("Source Streamsize in with percentage value AS Boolean === " + jMetaDataVideo.getSourceStreamSizeStringAsBoolean());
        System.out.println("Source Streamsize in with percentage value AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeStringAsBigInteger());
        System.out.println("Source Streamsize in with percentage value AS URL === " + jMetaDataVideo.getSourceStreamSizeStringAsURL());
        System.out.println("Maximum Frames per second AS Integer === " + jMetaDataVideo.getFrameRateMaximumAsInteger());
        System.out.println("Maximum Frames per second AS Long === " + jMetaDataVideo.getFrameRateMaximumAsLong());
        System.out.println("Maximum Frames per second AS LocalDateTime === " + jMetaDataVideo.getFrameRateMaximumAsLocalDateTime());
        System.out.println("Maximum Frames per second AS LocalTime === " + jMetaDataVideo.getFrameRateMaximumAsLocalTime());
        System.out.println("Maximum Frames per second AS String === " + jMetaDataVideo.getFrameRateMaximumAsString());
        System.out.println("Maximum Frames per second AS Boolean === " + jMetaDataVideo.getFrameRateMaximumAsBoolean());
        System.out.println("Maximum Frames per second AS BigInteger === " + jMetaDataVideo.getFrameRateMaximumAsBigInteger());
        System.out.println("Maximum Frames per second AS URL === " + jMetaDataVideo.getFrameRateMaximumAsURL());
        System.out.println("Original (in the raw stream) frames per second AS Integer === " + jMetaDataVideo.getFrameRateOriginalAsInteger());
        System.out.println("Original (in the raw stream) frames per second AS Long === " + jMetaDataVideo.getFrameRateOriginalAsLong());
        System.out.println("Original (in the raw stream) frames per second AS LocalDateTime === " + jMetaDataVideo.getFrameRateOriginalAsLocalDateTime());
        System.out.println("Original (in the raw stream) frames per second AS LocalTime === " + jMetaDataVideo.getFrameRateOriginalAsLocalTime());
        System.out.println("Original (in the raw stream) frames per second AS String === " + jMetaDataVideo.getFrameRateOriginalAsString());
        System.out.println("Original (in the raw stream) frames per second AS Boolean === " + jMetaDataVideo.getFrameRateOriginalAsBoolean());
        System.out.println("Original (in the raw stream) frames per second AS BigInteger === " + jMetaDataVideo.getFrameRateOriginalAsBigInteger());
        System.out.println("Original (in the raw stream) frames per second AS URL === " + jMetaDataVideo.getFrameRateOriginalAsURL());
        System.out.println("Display Aspect ratio AS Integer === " + jMetaDataVideo.getDisplayAspectRatioAsInteger());
        System.out.println("Display Aspect ratio AS Long === " + jMetaDataVideo.getDisplayAspectRatioAsLong());
        System.out.println("Display Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getDisplayAspectRatioAsLocalDateTime());
        System.out.println("Display Aspect ratio AS LocalTime === " + jMetaDataVideo.getDisplayAspectRatioAsLocalTime());
        System.out.println("Display Aspect ratio AS String === " + jMetaDataVideo.getDisplayAspectRatioAsString());
        System.out.println("Display Aspect ratio AS Boolean === " + jMetaDataVideo.getDisplayAspectRatioAsBoolean());
        System.out.println("Display Aspect ratio AS BigInteger === " + jMetaDataVideo.getDisplayAspectRatioAsBigInteger());
        System.out.println("Display Aspect ratio AS URL === " + jMetaDataVideo.getDisplayAspectRatioAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Integer === " + jMetaDataVideo.getDurationFirstFrameAsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Long === " + jMetaDataVideo.getDurationFirstFrameAsLong());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataVideo.getDurationFirstFrameAsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS LocalTime === " + jMetaDataVideo.getDurationFirstFrameAsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS String === " + jMetaDataVideo.getDurationFirstFrameAsString());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Boolean === " + jMetaDataVideo.getDurationFirstFrameAsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS BigInteger === " + jMetaDataVideo.getDurationFirstFrameAsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS URL === " + jMetaDataVideo.getDurationFirstFrameAsURL());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getDelayOriginalString3AsInteger());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getDelayOriginalString3AsLong());
        System.out.println("Delay in format: HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalString3AsLocalDateTime());
        System.out.println("Delay in format: HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getDelayOriginalString3AsLocalTime());
        System.out.println("Delay in format: HH:MM:SS.MMM AS String === " + jMetaDataVideo.getDelayOriginalString3AsString());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getDelayOriginalString3AsBoolean());
        System.out.println("Delay in format: HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getDelayOriginalString3AsBigInteger());
        System.out.println("Delay in format: HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getDelayOriginalString3AsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Integer === " + jMetaDataVideo.getEncodedApplicationStringAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Long === " + jMetaDataVideo.getEncodedApplicationStringAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalDateTime === " + jMetaDataVideo.getEncodedApplicationStringAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalTime === " + jMetaDataVideo.getEncodedApplicationStringAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS String === " + jMetaDataVideo.getEncodedApplicationStringAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Boolean === " + jMetaDataVideo.getEncodedApplicationStringAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS BigInteger === " + jMetaDataVideo.getEncodedApplicationStringAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS URL === " + jMetaDataVideo.getEncodedApplicationStringAsURL());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getDelayOriginalString4AsInteger());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getDelayOriginalString4AsLong());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalString4AsLocalDateTime());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getDelayOriginalString4AsLocalTime());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getDelayOriginalString4AsString());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getDelayOriginalString4AsBoolean());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getDelayOriginalString4AsBigInteger());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getDelayOriginalString4AsURL());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getDelayOriginalString5AsInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getDelayOriginalString5AsLong());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalString5AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getDelayOriginalString5AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getDelayOriginalString5AsString());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getDelayOriginalString5AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getDelayOriginalString5AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getDelayOriginalString5AsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataVideo.getForcedAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataVideo.getForcedAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataVideo.getForcedAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataVideo.getForcedAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataVideo.getForcedAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataVideo.getForcedAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataVideo.getForcedAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataVideo.getForcedAsURL());
        System.out.println("Stored width AS Integer === " + jMetaDataVideo.getStoredWidthAsInteger());
        System.out.println("Stored width AS Long === " + jMetaDataVideo.getStoredWidthAsLong());
        System.out.println("Stored width AS LocalDateTime === " + jMetaDataVideo.getStoredWidthAsLocalDateTime());
        System.out.println("Stored width AS LocalTime === " + jMetaDataVideo.getStoredWidthAsLocalTime());
        System.out.println("Stored width AS String === " + jMetaDataVideo.getStoredWidthAsString());
        System.out.println("Stored width AS Boolean === " + jMetaDataVideo.getStoredWidthAsBoolean());
        System.out.println("Stored width AS BigInteger === " + jMetaDataVideo.getStoredWidthAsBigInteger());
        System.out.println("Stored width AS URL === " + jMetaDataVideo.getStoredWidthAsURL());
        System.out.println("Frames per second, denominator AS Integer === " + jMetaDataVideo.getFrameRateOriginalDenAsInteger());
        System.out.println("Frames per second, denominator AS Long === " + jMetaDataVideo.getFrameRateOriginalDenAsLong());
        System.out.println("Frames per second, denominator AS LocalDateTime === " + jMetaDataVideo.getFrameRateOriginalDenAsLocalDateTime());
        System.out.println("Frames per second, denominator AS LocalTime === " + jMetaDataVideo.getFrameRateOriginalDenAsLocalTime());
        System.out.println("Frames per second, denominator AS String === " + jMetaDataVideo.getFrameRateOriginalDenAsString());
        System.out.println("Frames per second, denominator AS Boolean === " + jMetaDataVideo.getFrameRateOriginalDenAsBoolean());
        System.out.println("Frames per second, denominator AS BigInteger === " + jMetaDataVideo.getFrameRateOriginalDenAsBigInteger());
        System.out.println("Frames per second, denominator AS URL === " + jMetaDataVideo.getFrameRateOriginalDenAsURL());
        System.out.println("Last **Inform** call AS Integer === " + jMetaDataVideo.getInformAsInteger());
        System.out.println("Last **Inform** call AS Long === " + jMetaDataVideo.getInformAsLong());
        System.out.println("Last **Inform** call AS LocalDateTime === " + jMetaDataVideo.getInformAsLocalDateTime());
        System.out.println("Last **Inform** call AS LocalTime === " + jMetaDataVideo.getInformAsLocalTime());
        System.out.println("Last **Inform** call AS String === " + jMetaDataVideo.getInformAsString());
        System.out.println("Last **Inform** call AS Boolean === " + jMetaDataVideo.getInformAsBoolean());
        System.out.println("Last **Inform** call AS BigInteger === " + jMetaDataVideo.getInformAsBigInteger());
        System.out.println("Last **Inform** call AS URL === " + jMetaDataVideo.getInformAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsRefFramesAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsRefFramesAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsRefFramesAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsRefFramesAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsRefFramesAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsRefFramesAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsRefFramesAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsRefFramesAsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Integer === " + jMetaDataVideo.getSourceDurationFirstFrameAsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Long === " + jMetaDataVideo.getSourceDurationFirstFrameAsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataVideo.getSourceDurationFirstFrameAsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS LocalTime === " + jMetaDataVideo.getSourceDurationFirstFrameAsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS String === " + jMetaDataVideo.getSourceDurationFirstFrameAsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Boolean === " + jMetaDataVideo.getSourceDurationFirstFrameAsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS BigInteger === " + jMetaDataVideo.getSourceDurationFirstFrameAsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS URL === " + jMetaDataVideo.getSourceDurationFirstFrameAsURL());
        System.out.println("TimeStamp with measurement AS Integer === " + jMetaDataVideo.getTimeStampFirstFrameStringAsInteger());
        System.out.println("TimeStamp with measurement AS Long === " + jMetaDataVideo.getTimeStampFirstFrameStringAsLong());
        System.out.println("TimeStamp with measurement AS LocalDateTime === " + jMetaDataVideo.getTimeStampFirstFrameStringAsLocalDateTime());
        System.out.println("TimeStamp with measurement AS LocalTime === " + jMetaDataVideo.getTimeStampFirstFrameStringAsLocalTime());
        System.out.println("TimeStamp with measurement AS String === " + jMetaDataVideo.getTimeStampFirstFrameStringAsString());
        System.out.println("TimeStamp with measurement AS Boolean === " + jMetaDataVideo.getTimeStampFirstFrameStringAsBoolean());
        System.out.println("TimeStamp with measurement AS BigInteger === " + jMetaDataVideo.getTimeStampFirstFrameStringAsBigInteger());
        System.out.println("TimeStamp with measurement AS URL === " + jMetaDataVideo.getTimeStampFirstFrameStringAsURL());
        System.out.println("Active Format Description (AFD value) AS Integer === " + jMetaDataVideo.getActiveFormatDescriptionAsInteger());
        System.out.println("Active Format Description (AFD value) AS Long === " + jMetaDataVideo.getActiveFormatDescriptionAsLong());
        System.out.println("Active Format Description (AFD value) AS LocalDateTime === " + jMetaDataVideo.getActiveFormatDescriptionAsLocalDateTime());
        System.out.println("Active Format Description (AFD value) AS LocalTime === " + jMetaDataVideo.getActiveFormatDescriptionAsLocalTime());
        System.out.println("Active Format Description (AFD value) AS String === " + jMetaDataVideo.getActiveFormatDescriptionAsString());
        System.out.println("Active Format Description (AFD value) AS Boolean === " + jMetaDataVideo.getActiveFormatDescriptionAsBoolean());
        System.out.println("Active Format Description (AFD value) AS BigInteger === " + jMetaDataVideo.getActiveFormatDescriptionAsBigInteger());
        System.out.println("Active Format Description (AFD value) AS URL === " + jMetaDataVideo.getActiveFormatDescriptionAsURL());
        System.out.println("ScanOrder_StoredDisplayedInverted AS Integer === " + jMetaDataVideo.getScanOrderStoredDisplayedInvertedAsInteger());
        System.out.println("ScanOrder_StoredDisplayedInverted AS Long === " + jMetaDataVideo.getScanOrderStoredDisplayedInvertedAsLong());
        System.out.println("ScanOrder_StoredDisplayedInverted AS LocalDateTime === " + jMetaDataVideo.getScanOrderStoredDisplayedInvertedAsLocalDateTime());
        System.out.println("ScanOrder_StoredDisplayedInverted AS LocalTime === " + jMetaDataVideo.getScanOrderStoredDisplayedInvertedAsLocalTime());
        System.out.println("ScanOrder_StoredDisplayedInverted AS String === " + jMetaDataVideo.getScanOrderStoredDisplayedInvertedAsString());
        System.out.println("ScanOrder_StoredDisplayedInverted AS Boolean === " + jMetaDataVideo.getScanOrderStoredDisplayedInvertedAsBoolean());
        System.out.println("ScanOrder_StoredDisplayedInverted AS BigInteger === " + jMetaDataVideo.getScanOrderStoredDisplayedInvertedAsBigInteger());
        System.out.println("ScanOrder_StoredDisplayedInverted AS URL === " + jMetaDataVideo.getScanOrderStoredDisplayedInvertedAsURL());
        System.out.println("Number of the stream (base=0) AS Integer === " + jMetaDataVideo.getStreamKindIDAsInteger());
        System.out.println("Number of the stream (base=0) AS Long === " + jMetaDataVideo.getStreamKindIDAsLong());
        System.out.println("Number of the stream (base=0) AS LocalDateTime === " + jMetaDataVideo.getStreamKindIDAsLocalDateTime());
        System.out.println("Number of the stream (base=0) AS LocalTime === " + jMetaDataVideo.getStreamKindIDAsLocalTime());
        System.out.println("Number of the stream (base=0) AS String === " + jMetaDataVideo.getStreamKindIDAsString());
        System.out.println("Number of the stream (base=0) AS Boolean === " + jMetaDataVideo.getStreamKindIDAsBoolean());
        System.out.println("Number of the stream (base=0) AS BigInteger === " + jMetaDataVideo.getStreamKindIDAsBigInteger());
        System.out.println("Number of the stream (base=0) AS URL === " + jMetaDataVideo.getStreamKindIDAsURL());
        System.out.println("Nominal Frames per second (with measurement) AS Integer === " + jMetaDataVideo.getFrameRateNominalStringAsInteger());
        System.out.println("Nominal Frames per second (with measurement) AS Long === " + jMetaDataVideo.getFrameRateNominalStringAsLong());
        System.out.println("Nominal Frames per second (with measurement) AS LocalDateTime === " + jMetaDataVideo.getFrameRateNominalStringAsLocalDateTime());
        System.out.println("Nominal Frames per second (with measurement) AS LocalTime === " + jMetaDataVideo.getFrameRateNominalStringAsLocalTime());
        System.out.println("Nominal Frames per second (with measurement) AS String === " + jMetaDataVideo.getFrameRateNominalStringAsString());
        System.out.println("Nominal Frames per second (with measurement) AS Boolean === " + jMetaDataVideo.getFrameRateNominalStringAsBoolean());
        System.out.println("Nominal Frames per second (with measurement) AS BigInteger === " + jMetaDataVideo.getFrameRateNominalStringAsBigInteger());
        System.out.println("Nominal Frames per second (with measurement) AS URL === " + jMetaDataVideo.getFrameRateNominalStringAsURL());
        System.out.println("Link AS Integer === " + jMetaDataVideo.getFormatUrlAsInteger());
        System.out.println("Link AS Long === " + jMetaDataVideo.getFormatUrlAsLong());
        System.out.println("Link AS LocalDateTime === " + jMetaDataVideo.getFormatUrlAsLocalDateTime());
        System.out.println("Link AS LocalTime === " + jMetaDataVideo.getFormatUrlAsLocalTime());
        System.out.println("Link AS String === " + jMetaDataVideo.getFormatUrlAsString());
        System.out.println("Link AS Boolean === " + jMetaDataVideo.getFormatUrlAsBoolean());
        System.out.println("Link AS BigInteger === " + jMetaDataVideo.getFormatUrlAsBigInteger());
        System.out.println("Link AS URL === " + jMetaDataVideo.getFormatUrlAsURL());
        System.out.println("Minimum Bit rate (with measurement) AS Integer === " + jMetaDataVideo.getBitRateMinimumStringAsInteger());
        System.out.println("Minimum Bit rate (with measurement) AS Long === " + jMetaDataVideo.getBitRateMinimumStringAsLong());
        System.out.println("Minimum Bit rate (with measurement) AS LocalDateTime === " + jMetaDataVideo.getBitRateMinimumStringAsLocalDateTime());
        System.out.println("Minimum Bit rate (with measurement) AS LocalTime === " + jMetaDataVideo.getBitRateMinimumStringAsLocalTime());
        System.out.println("Minimum Bit rate (with measurement) AS String === " + jMetaDataVideo.getBitRateMinimumStringAsString());
        System.out.println("Minimum Bit rate (with measurement) AS Boolean === " + jMetaDataVideo.getBitRateMinimumStringAsBoolean());
        System.out.println("Minimum Bit rate (with measurement) AS BigInteger === " + jMetaDataVideo.getBitRateMinimumStringAsBigInteger());
        System.out.println("Minimum Bit rate (with measurement) AS URL === " + jMetaDataVideo.getBitRateMinimumStringAsURL());
        System.out.println("Width (aperture size if present) in pixel AS Integer === " + jMetaDataVideo.getWidthAsInteger());
        System.out.println("Width (aperture size if present) in pixel AS Long === " + jMetaDataVideo.getWidthAsLong());
        System.out.println("Width (aperture size if present) in pixel AS LocalDateTime === " + jMetaDataVideo.getWidthAsLocalDateTime());
        System.out.println("Width (aperture size if present) in pixel AS LocalTime === " + jMetaDataVideo.getWidthAsLocalTime());
        System.out.println("Width (aperture size if present) in pixel AS String === " + jMetaDataVideo.getWidthAsString());
        System.out.println("Width (aperture size if present) in pixel AS Boolean === " + jMetaDataVideo.getWidthAsBoolean());
        System.out.println("Width (aperture size if present) in pixel AS BigInteger === " + jMetaDataVideo.getWidthAsBigInteger());
        System.out.println("Width (aperture size if present) in pixel AS URL === " + jMetaDataVideo.getWidthAsURL());
        System.out.println("Frames per second (with measurement) AS Integer === " + jMetaDataVideo.getFrameRateStringAsInteger());
        System.out.println("Frames per second (with measurement) AS Long === " + jMetaDataVideo.getFrameRateStringAsLong());
        System.out.println("Frames per second (with measurement) AS LocalDateTime === " + jMetaDataVideo.getFrameRateStringAsLocalDateTime());
        System.out.println("Frames per second (with measurement) AS LocalTime === " + jMetaDataVideo.getFrameRateStringAsLocalTime());
        System.out.println("Frames per second (with measurement) AS String === " + jMetaDataVideo.getFrameRateStringAsString());
        System.out.println("Frames per second (with measurement) AS Boolean === " + jMetaDataVideo.getFrameRateStringAsBoolean());
        System.out.println("Frames per second (with measurement) AS BigInteger === " + jMetaDataVideo.getFrameRateStringAsBigInteger());
        System.out.println("Frames per second (with measurement) AS URL === " + jMetaDataVideo.getFrameRateStringAsURL());
        System.out.println("Source Number of frames AS Integer === " + jMetaDataVideo.getSourceFrameCountAsInteger());
        System.out.println("Source Number of frames AS Long === " + jMetaDataVideo.getSourceFrameCountAsLong());
        System.out.println("Source Number of frames AS LocalDateTime === " + jMetaDataVideo.getSourceFrameCountAsLocalDateTime());
        System.out.println("Source Number of frames AS LocalTime === " + jMetaDataVideo.getSourceFrameCountAsLocalTime());
        System.out.println("Source Number of frames AS String === " + jMetaDataVideo.getSourceFrameCountAsString());
        System.out.println("Source Number of frames AS Boolean === " + jMetaDataVideo.getSourceFrameCountAsBoolean());
        System.out.println("Source Number of frames AS BigInteger === " + jMetaDataVideo.getSourceFrameCountAsBigInteger());
        System.out.println("Source Number of frames AS URL === " + jMetaDataVideo.getSourceFrameCountAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsBVOPAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsBVOPAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsBVOPAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsBVOPAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsBVOPAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsBVOPAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsBVOPAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsBVOPAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataVideo.getDefaultAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataVideo.getDefaultAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataVideo.getDefaultAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataVideo.getDefaultAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataVideo.getDefaultAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataVideo.getDefaultAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataVideo.getDefaultAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataVideo.getDefaultAsURL());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS Integer === " + jMetaDataVideo.getGopOpenClosedFirstFrameAsInteger());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS Long === " + jMetaDataVideo.getGopOpenClosedFirstFrameAsLong());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS LocalDateTime === " + jMetaDataVideo.getGopOpenClosedFirstFrameAsLocalDateTime());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS LocalTime === " + jMetaDataVideo.getGopOpenClosedFirstFrameAsLocalTime());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS String === " + jMetaDataVideo.getGopOpenClosedFirstFrameAsString());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS Boolean === " + jMetaDataVideo.getGopOpenClosedFirstFrameAsBoolean());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS BigInteger === " + jMetaDataVideo.getGopOpenClosedFirstFrameAsBigInteger());
        System.out.println("Time code information about Open/Closed of first frame if GOP is Open for the other GOPs AS URL === " + jMetaDataVideo.getGopOpenClosedFirstFrameAsURL());
        System.out.println("Time code information about Open/Closed AS Integer === " + jMetaDataVideo.getGopOpenClosedAsInteger());
        System.out.println("Time code information about Open/Closed AS Long === " + jMetaDataVideo.getGopOpenClosedAsLong());
        System.out.println("Time code information about Open/Closed AS LocalDateTime === " + jMetaDataVideo.getGopOpenClosedAsLocalDateTime());
        System.out.println("Time code information about Open/Closed AS LocalTime === " + jMetaDataVideo.getGopOpenClosedAsLocalTime());
        System.out.println("Time code information about Open/Closed AS String === " + jMetaDataVideo.getGopOpenClosedAsString());
        System.out.println("Time code information about Open/Closed AS Boolean === " + jMetaDataVideo.getGopOpenClosedAsBoolean());
        System.out.println("Time code information about Open/Closed AS BigInteger === " + jMetaDataVideo.getGopOpenClosedAsBigInteger());
        System.out.println("Time code information about Open/Closed AS URL === " + jMetaDataVideo.getGopOpenClosedAsURL());
        System.out.println("Delay settings (in case of timecode for example) AS Integer === " + jMetaDataVideo.getDelayOriginalSettingsAsInteger());
        System.out.println("Delay settings (in case of timecode for example) AS Long === " + jMetaDataVideo.getDelayOriginalSettingsAsLong());
        System.out.println("Delay settings (in case of timecode for example) AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalSettingsAsLocalDateTime());
        System.out.println("Delay settings (in case of timecode for example) AS LocalTime === " + jMetaDataVideo.getDelayOriginalSettingsAsLocalTime());
        System.out.println("Delay settings (in case of timecode for example) AS String === " + jMetaDataVideo.getDelayOriginalSettingsAsString());
        System.out.println("Delay settings (in case of timecode for example) AS Boolean === " + jMetaDataVideo.getDelayOriginalSettingsAsBoolean());
        System.out.println("Delay settings (in case of timecode for example) AS BigInteger === " + jMetaDataVideo.getDelayOriginalSettingsAsBigInteger());
        System.out.println("Delay settings (in case of timecode for example) AS URL === " + jMetaDataVideo.getDelayOriginalSettingsAsURL());
        System.out.println("Name of the product AS Integer === " + jMetaDataVideo.getEncodedApplicationNameAsInteger());
        System.out.println("Name of the product AS Long === " + jMetaDataVideo.getEncodedApplicationNameAsLong());
        System.out.println("Name of the product AS LocalDateTime === " + jMetaDataVideo.getEncodedApplicationNameAsLocalDateTime());
        System.out.println("Name of the product AS LocalTime === " + jMetaDataVideo.getEncodedApplicationNameAsLocalTime());
        System.out.println("Name of the product AS String === " + jMetaDataVideo.getEncodedApplicationNameAsString());
        System.out.println("Name of the product AS Boolean === " + jMetaDataVideo.getEncodedApplicationNameAsBoolean());
        System.out.println("Name of the product AS BigInteger === " + jMetaDataVideo.getEncodedApplicationNameAsBigInteger());
        System.out.println("Name of the product AS URL === " + jMetaDataVideo.getEncodedApplicationNameAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataVideo.getUniqueIDStringAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataVideo.getUniqueIDStringAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataVideo.getUniqueIDStringAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataVideo.getUniqueIDStringAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataVideo.getUniqueIDStringAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataVideo.getUniqueIDStringAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataVideo.getUniqueIDStringAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataVideo.getUniqueIDStringAsURL());
        System.out.println("ScanOrder AS Integer === " + jMetaDataVideo.getScanOrderAsInteger());
        System.out.println("ScanOrder AS Long === " + jMetaDataVideo.getScanOrderAsLong());
        System.out.println("ScanOrder AS LocalDateTime === " + jMetaDataVideo.getScanOrderAsLocalDateTime());
        System.out.println("ScanOrder AS LocalTime === " + jMetaDataVideo.getScanOrderAsLocalTime());
        System.out.println("ScanOrder AS String === " + jMetaDataVideo.getScanOrderAsString());
        System.out.println("ScanOrder AS Boolean === " + jMetaDataVideo.getScanOrderAsBoolean());
        System.out.println("ScanOrder AS BigInteger === " + jMetaDataVideo.getScanOrderAsBigInteger());
        System.out.println("ScanOrder AS URL === " + jMetaDataVideo.getScanOrderAsURL());
        System.out.println("Profile of the Format AS Integer === " + jMetaDataVideo.getFormatProfileAsInteger());
        System.out.println("Profile of the Format AS Long === " + jMetaDataVideo.getFormatProfileAsLong());
        System.out.println("Profile of the Format AS LocalDateTime === " + jMetaDataVideo.getFormatProfileAsLocalDateTime());
        System.out.println("Profile of the Format AS LocalTime === " + jMetaDataVideo.getFormatProfileAsLocalTime());
        System.out.println("Profile of the Format AS String === " + jMetaDataVideo.getFormatProfileAsString());
        System.out.println("Profile of the Format AS Boolean === " + jMetaDataVideo.getFormatProfileAsBoolean());
        System.out.println("Profile of the Format AS BigInteger === " + jMetaDataVideo.getFormatProfileAsBigInteger());
        System.out.println("Profile of the Format AS URL === " + jMetaDataVideo.getFormatProfileAsURL());
        System.out.println("Offset between original height and displayed height in pixel AS Integer === " + jMetaDataVideo.getHeightOffsetAsInteger());
        System.out.println("Offset between original height and displayed height in pixel AS Long === " + jMetaDataVideo.getHeightOffsetAsLong());
        System.out.println("Offset between original height and displayed height in pixel AS LocalDateTime === " + jMetaDataVideo.getHeightOffsetAsLocalDateTime());
        System.out.println("Offset between original height and displayed height in pixel AS LocalTime === " + jMetaDataVideo.getHeightOffsetAsLocalTime());
        System.out.println("Offset between original height and displayed height in pixel AS String === " + jMetaDataVideo.getHeightOffsetAsString());
        System.out.println("Offset between original height and displayed height in pixel AS Boolean === " + jMetaDataVideo.getHeightOffsetAsBoolean());
        System.out.println("Offset between original height and displayed height in pixel AS BigInteger === " + jMetaDataVideo.getHeightOffsetAsBigInteger());
        System.out.println("Offset between original height and displayed height in pixel AS URL === " + jMetaDataVideo.getHeightOffsetAsURL());
        System.out.println("ChromaSubsampling_Position AS Integer === " + jMetaDataVideo.getChromaSubsamplingPositionAsInteger());
        System.out.println("ChromaSubsampling_Position AS Long === " + jMetaDataVideo.getChromaSubsamplingPositionAsLong());
        System.out.println("ChromaSubsampling_Position AS LocalDateTime === " + jMetaDataVideo.getChromaSubsamplingPositionAsLocalDateTime());
        System.out.println("ChromaSubsampling_Position AS LocalTime === " + jMetaDataVideo.getChromaSubsamplingPositionAsLocalTime());
        System.out.println("ChromaSubsampling_Position AS String === " + jMetaDataVideo.getChromaSubsamplingPositionAsString());
        System.out.println("ChromaSubsampling_Position AS Boolean === " + jMetaDataVideo.getChromaSubsamplingPositionAsBoolean());
        System.out.println("ChromaSubsampling_Position AS BigInteger === " + jMetaDataVideo.getChromaSubsamplingPositionAsBigInteger());
        System.out.println("ChromaSubsampling_Position AS URL === " + jMetaDataVideo.getChromaSubsamplingPositionAsURL());
        System.out.println("StreamSize_Encoded/String2 AS Integer === " + jMetaDataVideo.getStreamSizeEncodedString2AsInteger());
        System.out.println("StreamSize_Encoded/String2 AS Long === " + jMetaDataVideo.getStreamSizeEncodedString2AsLong());
        System.out.println("StreamSize_Encoded/String2 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeEncodedString2AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String2 AS LocalTime === " + jMetaDataVideo.getStreamSizeEncodedString2AsLocalTime());
        System.out.println("StreamSize_Encoded/String2 AS String === " + jMetaDataVideo.getStreamSizeEncodedString2AsString());
        System.out.println("StreamSize_Encoded/String2 AS Boolean === " + jMetaDataVideo.getStreamSizeEncodedString2AsBoolean());
        System.out.println("StreamSize_Encoded/String2 AS BigInteger === " + jMetaDataVideo.getStreamSizeEncodedString2AsBigInteger());
        System.out.println("StreamSize_Encoded/String2 AS URL === " + jMetaDataVideo.getStreamSizeEncodedString2AsURL());
        System.out.println("StreamSize_Demuxed/String1 AS Integer === " + jMetaDataVideo.getStreamSizeDemuxedString1AsInteger());
        System.out.println("StreamSize_Demuxed/String1 AS Long === " + jMetaDataVideo.getStreamSizeDemuxedString1AsLong());
        System.out.println("StreamSize_Demuxed/String1 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeDemuxedString1AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String1 AS LocalTime === " + jMetaDataVideo.getStreamSizeDemuxedString1AsLocalTime());
        System.out.println("StreamSize_Demuxed/String1 AS String === " + jMetaDataVideo.getStreamSizeDemuxedString1AsString());
        System.out.println("StreamSize_Demuxed/String1 AS Boolean === " + jMetaDataVideo.getStreamSizeDemuxedString1AsBoolean());
        System.out.println("StreamSize_Demuxed/String1 AS BigInteger === " + jMetaDataVideo.getStreamSizeDemuxedString1AsBigInteger());
        System.out.println("StreamSize_Demuxed/String1 AS URL === " + jMetaDataVideo.getStreamSizeDemuxedString1AsURL());
        System.out.println("StreamSize_Encoded/String3 AS Integer === " + jMetaDataVideo.getStreamSizeEncodedString3AsInteger());
        System.out.println("StreamSize_Encoded/String3 AS Long === " + jMetaDataVideo.getStreamSizeEncodedString3AsLong());
        System.out.println("StreamSize_Encoded/String3 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeEncodedString3AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String3 AS LocalTime === " + jMetaDataVideo.getStreamSizeEncodedString3AsLocalTime());
        System.out.println("StreamSize_Encoded/String3 AS String === " + jMetaDataVideo.getStreamSizeEncodedString3AsString());
        System.out.println("StreamSize_Encoded/String3 AS Boolean === " + jMetaDataVideo.getStreamSizeEncodedString3AsBoolean());
        System.out.println("StreamSize_Encoded/String3 AS BigInteger === " + jMetaDataVideo.getStreamSizeEncodedString3AsBigInteger());
        System.out.println("StreamSize_Encoded/String3 AS URL === " + jMetaDataVideo.getStreamSizeEncodedString3AsURL());
        System.out.println("StreamSize_Demuxed/String2 AS Integer === " + jMetaDataVideo.getStreamSizeDemuxedString2AsInteger());
        System.out.println("StreamSize_Demuxed/String2 AS Long === " + jMetaDataVideo.getStreamSizeDemuxedString2AsLong());
        System.out.println("StreamSize_Demuxed/String2 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeDemuxedString2AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String2 AS LocalTime === " + jMetaDataVideo.getStreamSizeDemuxedString2AsLocalTime());
        System.out.println("StreamSize_Demuxed/String2 AS String === " + jMetaDataVideo.getStreamSizeDemuxedString2AsString());
        System.out.println("StreamSize_Demuxed/String2 AS Boolean === " + jMetaDataVideo.getStreamSizeDemuxedString2AsBoolean());
        System.out.println("StreamSize_Demuxed/String2 AS BigInteger === " + jMetaDataVideo.getStreamSizeDemuxedString2AsBigInteger());
        System.out.println("StreamSize_Demuxed/String2 AS URL === " + jMetaDataVideo.getStreamSizeDemuxedString2AsURL());
        System.out.println("StreamSize_Demuxed/String3 AS Integer === " + jMetaDataVideo.getStreamSizeDemuxedString3AsInteger());
        System.out.println("StreamSize_Demuxed/String3 AS Long === " + jMetaDataVideo.getStreamSizeDemuxedString3AsLong());
        System.out.println("StreamSize_Demuxed/String3 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeDemuxedString3AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String3 AS LocalTime === " + jMetaDataVideo.getStreamSizeDemuxedString3AsLocalTime());
        System.out.println("StreamSize_Demuxed/String3 AS String === " + jMetaDataVideo.getStreamSizeDemuxedString3AsString());
        System.out.println("StreamSize_Demuxed/String3 AS Boolean === " + jMetaDataVideo.getStreamSizeDemuxedString3AsBoolean());
        System.out.println("StreamSize_Demuxed/String3 AS BigInteger === " + jMetaDataVideo.getStreamSizeDemuxedString3AsBigInteger());
        System.out.println("StreamSize_Demuxed/String3 AS URL === " + jMetaDataVideo.getStreamSizeDemuxedString3AsURL());
        System.out.println("StreamSize_Encoded/String1 AS Integer === " + jMetaDataVideo.getStreamSizeEncodedString1AsInteger());
        System.out.println("StreamSize_Encoded/String1 AS Long === " + jMetaDataVideo.getStreamSizeEncodedString1AsLong());
        System.out.println("StreamSize_Encoded/String1 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeEncodedString1AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String1 AS LocalTime === " + jMetaDataVideo.getStreamSizeEncodedString1AsLocalTime());
        System.out.println("StreamSize_Encoded/String1 AS String === " + jMetaDataVideo.getStreamSizeEncodedString1AsString());
        System.out.println("StreamSize_Encoded/String1 AS Boolean === " + jMetaDataVideo.getStreamSizeEncodedString1AsBoolean());
        System.out.println("StreamSize_Encoded/String1 AS BigInteger === " + jMetaDataVideo.getStreamSizeEncodedString1AsBigInteger());
        System.out.println("StreamSize_Encoded/String1 AS URL === " + jMetaDataVideo.getStreamSizeEncodedString1AsURL());
        System.out.println("Language (full) AS Integer === " + jMetaDataVideo.getLanguageStringAsInteger());
        System.out.println("Language (full) AS Long === " + jMetaDataVideo.getLanguageStringAsLong());
        System.out.println("Language (full) AS LocalDateTime === " + jMetaDataVideo.getLanguageStringAsLocalDateTime());
        System.out.println("Language (full) AS LocalTime === " + jMetaDataVideo.getLanguageStringAsLocalTime());
        System.out.println("Language (full) AS String === " + jMetaDataVideo.getLanguageStringAsString());
        System.out.println("Language (full) AS Boolean === " + jMetaDataVideo.getLanguageStringAsBoolean());
        System.out.println("Language (full) AS BigInteger === " + jMetaDataVideo.getLanguageStringAsBigInteger());
        System.out.println("Language (full) AS URL === " + jMetaDataVideo.getLanguageStringAsURL());
        System.out.println("StreamSize_Demuxed/String4 AS Integer === " + jMetaDataVideo.getStreamSizeDemuxedString4AsInteger());
        System.out.println("StreamSize_Demuxed/String4 AS Long === " + jMetaDataVideo.getStreamSizeDemuxedString4AsLong());
        System.out.println("StreamSize_Demuxed/String4 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeDemuxedString4AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String4 AS LocalTime === " + jMetaDataVideo.getStreamSizeDemuxedString4AsLocalTime());
        System.out.println("StreamSize_Demuxed/String4 AS String === " + jMetaDataVideo.getStreamSizeDemuxedString4AsString());
        System.out.println("StreamSize_Demuxed/String4 AS Boolean === " + jMetaDataVideo.getStreamSizeDemuxedString4AsBoolean());
        System.out.println("StreamSize_Demuxed/String4 AS BigInteger === " + jMetaDataVideo.getStreamSizeDemuxedString4AsBigInteger());
        System.out.println("StreamSize_Demuxed/String4 AS URL === " + jMetaDataVideo.getStreamSizeDemuxedString4AsURL());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Integer === " + jMetaDataVideo.getStreamSizeDemuxedString5AsInteger());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Long === " + jMetaDataVideo.getStreamSizeDemuxedString5AsLong());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS LocalDateTime === " + jMetaDataVideo.getStreamSizeDemuxedString5AsLocalDateTime());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS LocalTime === " + jMetaDataVideo.getStreamSizeDemuxedString5AsLocalTime());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS String === " + jMetaDataVideo.getStreamSizeDemuxedString5AsString());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Boolean === " + jMetaDataVideo.getStreamSizeDemuxedString5AsBoolean());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS BigInteger === " + jMetaDataVideo.getStreamSizeDemuxedString5AsBigInteger());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS URL === " + jMetaDataVideo.getStreamSizeDemuxedString5AsURL());
        System.out.println("StreamSize_Encoded/String4 AS Integer === " + jMetaDataVideo.getStreamSizeEncodedString4AsInteger());
        System.out.println("StreamSize_Encoded/String4 AS Long === " + jMetaDataVideo.getStreamSizeEncodedString4AsLong());
        System.out.println("StreamSize_Encoded/String4 AS LocalDateTime === " + jMetaDataVideo.getStreamSizeEncodedString4AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String4 AS LocalTime === " + jMetaDataVideo.getStreamSizeEncodedString4AsLocalTime());
        System.out.println("StreamSize_Encoded/String4 AS String === " + jMetaDataVideo.getStreamSizeEncodedString4AsString());
        System.out.println("StreamSize_Encoded/String4 AS Boolean === " + jMetaDataVideo.getStreamSizeEncodedString4AsBoolean());
        System.out.println("StreamSize_Encoded/String4 AS BigInteger === " + jMetaDataVideo.getStreamSizeEncodedString4AsBigInteger());
        System.out.println("StreamSize_Encoded/String4 AS URL === " + jMetaDataVideo.getStreamSizeEncodedString4AsURL());
        System.out.println("Original (in the raw stream) frames per second (with measurement) AS Integer === " + jMetaDataVideo.getFrameRateOriginalStringAsInteger());
        System.out.println("Original (in the raw stream) frames per second (with measurement) AS Long === " + jMetaDataVideo.getFrameRateOriginalStringAsLong());
        System.out.println("Original (in the raw stream) frames per second (with measurement) AS LocalDateTime === " + jMetaDataVideo.getFrameRateOriginalStringAsLocalDateTime());
        System.out.println("Original (in the raw stream) frames per second (with measurement) AS LocalTime === " + jMetaDataVideo.getFrameRateOriginalStringAsLocalTime());
        System.out.println("Original (in the raw stream) frames per second (with measurement) AS String === " + jMetaDataVideo.getFrameRateOriginalStringAsString());
        System.out.println("Original (in the raw stream) frames per second (with measurement) AS Boolean === " + jMetaDataVideo.getFrameRateOriginalStringAsBoolean());
        System.out.println("Original (in the raw stream) frames per second (with measurement) AS BigInteger === " + jMetaDataVideo.getFrameRateOriginalStringAsBigInteger());
        System.out.println("Original (in the raw stream) frames per second (with measurement) AS URL === " + jMetaDataVideo.getFrameRateOriginalStringAsURL());
        System.out.println("Encoded Streamsize in with percentage value AS Integer === " + jMetaDataVideo.getStreamSizeEncodedString5AsInteger());
        System.out.println("Encoded Streamsize in with percentage value AS Long === " + jMetaDataVideo.getStreamSizeEncodedString5AsLong());
        System.out.println("Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataVideo.getStreamSizeEncodedString5AsLocalDateTime());
        System.out.println("Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataVideo.getStreamSizeEncodedString5AsLocalTime());
        System.out.println("Encoded Streamsize in with percentage value AS String === " + jMetaDataVideo.getStreamSizeEncodedString5AsString());
        System.out.println("Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataVideo.getStreamSizeEncodedString5AsBoolean());
        System.out.println("Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataVideo.getStreamSizeEncodedString5AsBigInteger());
        System.out.println("Encoded Streamsize in with percentage value AS URL === " + jMetaDataVideo.getStreamSizeEncodedString5AsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getDurationLastFrameString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getDurationLastFrameString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getDurationLastFrameString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getDurationLastFrameString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getDurationLastFrameString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getDurationLastFrameString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getDurationLastFrameString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getDurationLastFrameString5AsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getDurationLastFrameString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getDurationLastFrameString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getDurationLastFrameString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getDurationLastFrameString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getDurationLastFrameString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getDurationLastFrameString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getDurationLastFrameString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getDurationLastFrameString4AsURL());
        System.out.println("Original frame rate mode (CFR, VFR) AS Integer === " + jMetaDataVideo.getFrameRateModeOriginalAsInteger());
        System.out.println("Original frame rate mode (CFR, VFR) AS Long === " + jMetaDataVideo.getFrameRateModeOriginalAsLong());
        System.out.println("Original frame rate mode (CFR, VFR) AS LocalDateTime === " + jMetaDataVideo.getFrameRateModeOriginalAsLocalDateTime());
        System.out.println("Original frame rate mode (CFR, VFR) AS LocalTime === " + jMetaDataVideo.getFrameRateModeOriginalAsLocalTime());
        System.out.println("Original frame rate mode (CFR, VFR) AS String === " + jMetaDataVideo.getFrameRateModeOriginalAsString());
        System.out.println("Original frame rate mode (CFR, VFR) AS Boolean === " + jMetaDataVideo.getFrameRateModeOriginalAsBoolean());
        System.out.println("Original frame rate mode (CFR, VFR) AS BigInteger === " + jMetaDataVideo.getFrameRateModeOriginalAsBigInteger());
        System.out.println("Original frame rate mode (CFR, VFR) AS URL === " + jMetaDataVideo.getFrameRateModeOriginalAsURL());
        System.out.println("StreamSize_Demuxed in with percentage value AS Integer === " + jMetaDataVideo.getStreamSizeDemuxedStringAsInteger());
        System.out.println("StreamSize_Demuxed in with percentage value AS Long === " + jMetaDataVideo.getStreamSizeDemuxedStringAsLong());
        System.out.println("StreamSize_Demuxed in with percentage value AS LocalDateTime === " + jMetaDataVideo.getStreamSizeDemuxedStringAsLocalDateTime());
        System.out.println("StreamSize_Demuxed in with percentage value AS LocalTime === " + jMetaDataVideo.getStreamSizeDemuxedStringAsLocalTime());
        System.out.println("StreamSize_Demuxed in with percentage value AS String === " + jMetaDataVideo.getStreamSizeDemuxedStringAsString());
        System.out.println("StreamSize_Demuxed in with percentage value AS Boolean === " + jMetaDataVideo.getStreamSizeDemuxedStringAsBoolean());
        System.out.println("StreamSize_Demuxed in with percentage value AS BigInteger === " + jMetaDataVideo.getStreamSizeDemuxedStringAsBigInteger());
        System.out.println("StreamSize_Demuxed in with percentage value AS URL === " + jMetaDataVideo.getStreamSizeDemuxedStringAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataVideo.getForcedStringAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataVideo.getForcedStringAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataVideo.getForcedStringAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataVideo.getForcedStringAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataVideo.getForcedStringAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataVideo.getForcedStringAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataVideo.getForcedStringAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataVideo.getForcedStringAsURL());
        System.out.println("16/24/32 AS Integer === " + jMetaDataVideo.getBitDepthAsInteger());
        System.out.println("16/24/32 AS Long === " + jMetaDataVideo.getBitDepthAsLong());
        System.out.println("16/24/32 AS LocalDateTime === " + jMetaDataVideo.getBitDepthAsLocalDateTime());
        System.out.println("16/24/32 AS LocalTime === " + jMetaDataVideo.getBitDepthAsLocalTime());
        System.out.println("16/24/32 AS String === " + jMetaDataVideo.getBitDepthAsString());
        System.out.println("16/24/32 AS Boolean === " + jMetaDataVideo.getBitDepthAsBoolean());
        System.out.println("16/24/32 AS BigInteger === " + jMetaDataVideo.getBitDepthAsBigInteger());
        System.out.println("16/24/32 AS URL === " + jMetaDataVideo.getBitDepthAsURL());
        System.out.println("Encoded Streamsize in bytes AS Integer === " + jMetaDataVideo.getStreamSizeEncodedAsInteger());
        System.out.println("Encoded Streamsize in bytes AS Long === " + jMetaDataVideo.getStreamSizeEncodedAsLong());
        System.out.println("Encoded Streamsize in bytes AS LocalDateTime === " + jMetaDataVideo.getStreamSizeEncodedAsLocalDateTime());
        System.out.println("Encoded Streamsize in bytes AS LocalTime === " + jMetaDataVideo.getStreamSizeEncodedAsLocalTime());
        System.out.println("Encoded Streamsize in bytes AS String === " + jMetaDataVideo.getStreamSizeEncodedAsString());
        System.out.println("Encoded Streamsize in bytes AS Boolean === " + jMetaDataVideo.getStreamSizeEncodedAsBoolean());
        System.out.println("Encoded Streamsize in bytes AS BigInteger === " + jMetaDataVideo.getStreamSizeEncodedAsBigInteger());
        System.out.println("Encoded Streamsize in bytes AS URL === " + jMetaDataVideo.getStreamSizeEncodedAsURL());
        System.out.println("Colour range for YUV colour space AS Integer === " + jMetaDataVideo.getcolourrangeAsInteger());
        System.out.println("Colour range for YUV colour space AS Long === " + jMetaDataVideo.getcolourrangeAsLong());
        System.out.println("Colour range for YUV colour space AS LocalDateTime === " + jMetaDataVideo.getcolourrangeAsLocalDateTime());
        System.out.println("Colour range for YUV colour space AS LocalTime === " + jMetaDataVideo.getcolourrangeAsLocalTime());
        System.out.println("Colour range for YUV colour space AS String === " + jMetaDataVideo.getcolourrangeAsString());
        System.out.println("Colour range for YUV colour space AS Boolean === " + jMetaDataVideo.getcolourrangeAsBoolean());
        System.out.println("Colour range for YUV colour space AS BigInteger === " + jMetaDataVideo.getcolourrangeAsBigInteger());
        System.out.println("Colour range for YUV colour space AS URL === " + jMetaDataVideo.getcolourrangeAsURL());
        System.out.println("Count of streams of that kind available AS Integer === " + jMetaDataVideo.getStreamCountAsInteger());
        System.out.println("Count of streams of that kind available AS Long === " + jMetaDataVideo.getStreamCountAsLong());
        System.out.println("Count of streams of that kind available AS LocalDateTime === " + jMetaDataVideo.getStreamCountAsLocalDateTime());
        System.out.println("Count of streams of that kind available AS LocalTime === " + jMetaDataVideo.getStreamCountAsLocalTime());
        System.out.println("Count of streams of that kind available AS String === " + jMetaDataVideo.getStreamCountAsString());
        System.out.println("Count of streams of that kind available AS Boolean === " + jMetaDataVideo.getStreamCountAsBoolean());
        System.out.println("Count of streams of that kind available AS BigInteger === " + jMetaDataVideo.getStreamCountAsBigInteger());
        System.out.println("Count of streams of that kind available AS URL === " + jMetaDataVideo.getStreamCountAsURL());
        System.out.println("Format_Settings_GMC/String AS Integer === " + jMetaDataVideo.getFormatSettingsGMCStringAsInteger());
        System.out.println("Format_Settings_GMC/String AS Long === " + jMetaDataVideo.getFormatSettingsGMCStringAsLong());
        System.out.println("Format_Settings_GMC/String AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsGMCStringAsLocalDateTime());
        System.out.println("Format_Settings_GMC/String AS LocalTime === " + jMetaDataVideo.getFormatSettingsGMCStringAsLocalTime());
        System.out.println("Format_Settings_GMC/String AS String === " + jMetaDataVideo.getFormatSettingsGMCStringAsString());
        System.out.println("Format_Settings_GMC/String AS Boolean === " + jMetaDataVideo.getFormatSettingsGMCStringAsBoolean());
        System.out.println("Format_Settings_GMC/String AS BigInteger === " + jMetaDataVideo.getFormatSettingsGMCStringAsBigInteger());
        System.out.println("Format_Settings_GMC/String AS URL === " + jMetaDataVideo.getFormatSettingsGMCStringAsURL());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS Integer === " + jMetaDataVideo.getPixelAspectRatioOriginalStringAsInteger());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS Long === " + jMetaDataVideo.getPixelAspectRatioOriginalStringAsLong());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getPixelAspectRatioOriginalStringAsLocalDateTime());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS LocalTime === " + jMetaDataVideo.getPixelAspectRatioOriginalStringAsLocalTime());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS String === " + jMetaDataVideo.getPixelAspectRatioOriginalStringAsString());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS Boolean === " + jMetaDataVideo.getPixelAspectRatioOriginalStringAsBoolean());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS BigInteger === " + jMetaDataVideo.getPixelAspectRatioOriginalStringAsBigInteger());
        System.out.println("Original (in the raw stream) Pixel Aspect ratio AS URL === " + jMetaDataVideo.getPixelAspectRatioOriginalStringAsURL());
        System.out.println("Encoded Streamsize in with percentage value AS Integer === " + jMetaDataVideo.getStreamSizeEncodedStringAsInteger());
        System.out.println("Encoded Streamsize in with percentage value AS Long === " + jMetaDataVideo.getStreamSizeEncodedStringAsLong());
        System.out.println("Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataVideo.getStreamSizeEncodedStringAsLocalDateTime());
        System.out.println("Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataVideo.getStreamSizeEncodedStringAsLocalTime());
        System.out.println("Encoded Streamsize in with percentage value AS String === " + jMetaDataVideo.getStreamSizeEncodedStringAsString());
        System.out.println("Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataVideo.getStreamSizeEncodedStringAsBoolean());
        System.out.println("Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataVideo.getStreamSizeEncodedStringAsBigInteger());
        System.out.println("Encoded Streamsize in with percentage value AS URL === " + jMetaDataVideo.getStreamSizeEncodedStringAsURL());
        System.out.println("Chromaticity coordinates of the source primaries AS Integer === " + jMetaDataVideo.getcolourprimariesOriginalAsInteger());
        System.out.println("Chromaticity coordinates of the source primaries AS Long === " + jMetaDataVideo.getcolourprimariesOriginalAsLong());
        System.out.println("Chromaticity coordinates of the source primaries AS LocalDateTime === " + jMetaDataVideo.getcolourprimariesOriginalAsLocalDateTime());
        System.out.println("Chromaticity coordinates of the source primaries AS LocalTime === " + jMetaDataVideo.getcolourprimariesOriginalAsLocalTime());
        System.out.println("Chromaticity coordinates of the source primaries AS String === " + jMetaDataVideo.getcolourprimariesOriginalAsString());
        System.out.println("Chromaticity coordinates of the source primaries AS Boolean === " + jMetaDataVideo.getcolourprimariesOriginalAsBoolean());
        System.out.println("Chromaticity coordinates of the source primaries AS BigInteger === " + jMetaDataVideo.getcolourprimariesOriginalAsBigInteger());
        System.out.println("Chromaticity coordinates of the source primaries AS URL === " + jMetaDataVideo.getcolourprimariesOriginalAsURL());
        System.out.println("Pixel Aspect ratio AS Integer === " + jMetaDataVideo.getPixelAspectRatioStringAsInteger());
        System.out.println("Pixel Aspect ratio AS Long === " + jMetaDataVideo.getPixelAspectRatioStringAsLong());
        System.out.println("Pixel Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getPixelAspectRatioStringAsLocalDateTime());
        System.out.println("Pixel Aspect ratio AS LocalTime === " + jMetaDataVideo.getPixelAspectRatioStringAsLocalTime());
        System.out.println("Pixel Aspect ratio AS String === " + jMetaDataVideo.getPixelAspectRatioStringAsString());
        System.out.println("Pixel Aspect ratio AS Boolean === " + jMetaDataVideo.getPixelAspectRatioStringAsBoolean());
        System.out.println("Pixel Aspect ratio AS BigInteger === " + jMetaDataVideo.getPixelAspectRatioStringAsBigInteger());
        System.out.println("Pixel Aspect ratio AS URL === " + jMetaDataVideo.getPixelAspectRatioStringAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getDurationString2AsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getDurationString2AsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationString2AsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getDurationString2AsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getDurationString2AsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getDurationString2AsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getDurationString2AsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getDurationString2AsURL());
        System.out.println("ScanOrder_Original/String AS Integer === " + jMetaDataVideo.getScanOrderOriginalStringAsInteger());
        System.out.println("ScanOrder_Original/String AS Long === " + jMetaDataVideo.getScanOrderOriginalStringAsLong());
        System.out.println("ScanOrder_Original/String AS LocalDateTime === " + jMetaDataVideo.getScanOrderOriginalStringAsLocalDateTime());
        System.out.println("ScanOrder_Original/String AS LocalTime === " + jMetaDataVideo.getScanOrderOriginalStringAsLocalTime());
        System.out.println("ScanOrder_Original/String AS String === " + jMetaDataVideo.getScanOrderOriginalStringAsString());
        System.out.println("ScanOrder_Original/String AS Boolean === " + jMetaDataVideo.getScanOrderOriginalStringAsBoolean());
        System.out.println("ScanOrder_Original/String AS BigInteger === " + jMetaDataVideo.getScanOrderOriginalStringAsBigInteger());
        System.out.println("ScanOrder_Original/String AS URL === " + jMetaDataVideo.getScanOrderOriginalStringAsURL());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getDurationString3AsInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getDurationString3AsLong());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getDurationString3AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getDurationString3AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS String === " + jMetaDataVideo.getDurationString3AsString());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getDurationString3AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getDurationString3AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getDurationString3AsURL());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataVideo.getDurationString1AsInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataVideo.getDurationString1AsLong());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationString1AsLocalDateTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataVideo.getDurationString1AsLocalTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataVideo.getDurationString1AsString());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataVideo.getDurationString1AsBoolean());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataVideo.getDurationString1AsBigInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataVideo.getDurationString1AsURL());
        System.out.println("Clean Aperture Pixel Aspect ratio AS Integer === " + jMetaDataVideo.getPixelAspectRatioCleanApertureAsInteger());
        System.out.println("Clean Aperture Pixel Aspect ratio AS Long === " + jMetaDataVideo.getPixelAspectRatioCleanApertureAsLong());
        System.out.println("Clean Aperture Pixel Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getPixelAspectRatioCleanApertureAsLocalDateTime());
        System.out.println("Clean Aperture Pixel Aspect ratio AS LocalTime === " + jMetaDataVideo.getPixelAspectRatioCleanApertureAsLocalTime());
        System.out.println("Clean Aperture Pixel Aspect ratio AS String === " + jMetaDataVideo.getPixelAspectRatioCleanApertureAsString());
        System.out.println("Clean Aperture Pixel Aspect ratio AS Boolean === " + jMetaDataVideo.getPixelAspectRatioCleanApertureAsBoolean());
        System.out.println("Clean Aperture Pixel Aspect ratio AS BigInteger === " + jMetaDataVideo.getPixelAspectRatioCleanApertureAsBigInteger());
        System.out.println("Clean Aperture Pixel Aspect ratio AS URL === " + jMetaDataVideo.getPixelAspectRatioCleanApertureAsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getDurationString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getDurationString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getDurationString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getDurationString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getDurationString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getDurationString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getDurationString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getDurationString4AsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsCABACStringAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsCABACStringAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsCABACStringAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsCABACStringAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsCABACStringAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsCABACStringAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsCABACStringAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsCABACStringAsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getDurationString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getDurationString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getDurationString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getDurationString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getDurationString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getDurationString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getDurationString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getDurationString5AsURL());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Integer === " + jMetaDataVideo.getBitRateEncodedAsInteger());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Long === " + jMetaDataVideo.getBitRateEncodedAsLong());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS LocalDateTime === " + jMetaDataVideo.getBitRateEncodedAsLocalDateTime());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS LocalTime === " + jMetaDataVideo.getBitRateEncodedAsLocalTime());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS String === " + jMetaDataVideo.getBitRateEncodedAsString());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Boolean === " + jMetaDataVideo.getBitRateEncodedAsBoolean());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS BigInteger === " + jMetaDataVideo.getBitRateEncodedAsBigInteger());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS URL === " + jMetaDataVideo.getBitRateEncodedAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsQPelAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsQPelAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsQPelAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsQPelAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsQPelAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsQPelAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsQPelAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsQPelAsURL());
        System.out.println("Settings needed for decoder used, detailled (Type of frame, and field/frame info) AS Integer === " + jMetaDataVideo.getFormatSettingsPictureStructureAsInteger());
        System.out.println("Settings needed for decoder used, detailled (Type of frame, and field/frame info) AS Long === " + jMetaDataVideo.getFormatSettingsPictureStructureAsLong());
        System.out.println("Settings needed for decoder used, detailled (Type of frame, and field/frame info) AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsPictureStructureAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled (Type of frame, and field/frame info) AS LocalTime === " + jMetaDataVideo.getFormatSettingsPictureStructureAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled (Type of frame, and field/frame info) AS String === " + jMetaDataVideo.getFormatSettingsPictureStructureAsString());
        System.out.println("Settings needed for decoder used, detailled (Type of frame, and field/frame info) AS Boolean === " + jMetaDataVideo.getFormatSettingsPictureStructureAsBoolean());
        System.out.println("Settings needed for decoder used, detailled (Type of frame, and field/frame info) AS BigInteger === " + jMetaDataVideo.getFormatSettingsPictureStructureAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled (Type of frame, and field/frame info) AS URL === " + jMetaDataVideo.getFormatSettingsPictureStructureAsURL());
        System.out.println("Original (in the raw stream) height with measurement (pixel) AS Integer === " + jMetaDataVideo.getHeightOriginalStringAsInteger());
        System.out.println("Original (in the raw stream) height with measurement (pixel) AS Long === " + jMetaDataVideo.getHeightOriginalStringAsLong());
        System.out.println("Original (in the raw stream) height with measurement (pixel) AS LocalDateTime === " + jMetaDataVideo.getHeightOriginalStringAsLocalDateTime());
        System.out.println("Original (in the raw stream) height with measurement (pixel) AS LocalTime === " + jMetaDataVideo.getHeightOriginalStringAsLocalTime());
        System.out.println("Original (in the raw stream) height with measurement (pixel) AS String === " + jMetaDataVideo.getHeightOriginalStringAsString());
        System.out.println("Original (in the raw stream) height with measurement (pixel) AS Boolean === " + jMetaDataVideo.getHeightOriginalStringAsBoolean());
        System.out.println("Original (in the raw stream) height with measurement (pixel) AS BigInteger === " + jMetaDataVideo.getHeightOriginalStringAsBigInteger());
        System.out.println("Original (in the raw stream) height with measurement (pixel) AS URL === " + jMetaDataVideo.getHeightOriginalStringAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataVideo.getDelaySourceAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataVideo.getDelaySourceAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataVideo.getDelaySourceAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataVideo.getDelaySourceAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataVideo.getDelaySourceAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataVideo.getDelaySourceAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataVideo.getDelaySourceAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataVideo.getDelaySourceAsURL());
        System.out.println("ScanType AS Integer === " + jMetaDataVideo.getScanTypeAsInteger());
        System.out.println("ScanType AS Long === " + jMetaDataVideo.getScanTypeAsLong());
        System.out.println("ScanType AS LocalDateTime === " + jMetaDataVideo.getScanTypeAsLocalDateTime());
        System.out.println("ScanType AS LocalTime === " + jMetaDataVideo.getScanTypeAsLocalTime());
        System.out.println("ScanType AS String === " + jMetaDataVideo.getScanTypeAsString());
        System.out.println("ScanType AS Boolean === " + jMetaDataVideo.getScanTypeAsBoolean());
        System.out.println("ScanType AS BigInteger === " + jMetaDataVideo.getScanTypeAsBigInteger());
        System.out.println("ScanType AS URL === " + jMetaDataVideo.getScanTypeAsURL());
        System.out.println("ScanType_StoreMethod_FieldsPerBlock AS Integer === " + jMetaDataVideo.getScanTypeStoreMethodFieldsPerBlockAsInteger());
        System.out.println("ScanType_StoreMethod_FieldsPerBlock AS Long === " + jMetaDataVideo.getScanTypeStoreMethodFieldsPerBlockAsLong());
        System.out.println("ScanType_StoreMethod_FieldsPerBlock AS LocalDateTime === " + jMetaDataVideo.getScanTypeStoreMethodFieldsPerBlockAsLocalDateTime());
        System.out.println("ScanType_StoreMethod_FieldsPerBlock AS LocalTime === " + jMetaDataVideo.getScanTypeStoreMethodFieldsPerBlockAsLocalTime());
        System.out.println("ScanType_StoreMethod_FieldsPerBlock AS String === " + jMetaDataVideo.getScanTypeStoreMethodFieldsPerBlockAsString());
        System.out.println("ScanType_StoreMethod_FieldsPerBlock AS Boolean === " + jMetaDataVideo.getScanTypeStoreMethodFieldsPerBlockAsBoolean());
        System.out.println("ScanType_StoreMethod_FieldsPerBlock AS BigInteger === " + jMetaDataVideo.getScanTypeStoreMethodFieldsPerBlockAsBigInteger());
        System.out.println("ScanType_StoreMethod_FieldsPerBlock AS URL === " + jMetaDataVideo.getScanTypeStoreMethodFieldsPerBlockAsURL());
        System.out.println("Delay drop frame info AS Integer === " + jMetaDataVideo.getDelayOriginalDropFrameAsInteger());
        System.out.println("Delay drop frame info AS Long === " + jMetaDataVideo.getDelayOriginalDropFrameAsLong());
        System.out.println("Delay drop frame info AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalDropFrameAsLocalDateTime());
        System.out.println("Delay drop frame info AS LocalTime === " + jMetaDataVideo.getDelayOriginalDropFrameAsLocalTime());
        System.out.println("Delay drop frame info AS String === " + jMetaDataVideo.getDelayOriginalDropFrameAsString());
        System.out.println("Delay drop frame info AS Boolean === " + jMetaDataVideo.getDelayOriginalDropFrameAsBoolean());
        System.out.println("Delay drop frame info AS BigInteger === " + jMetaDataVideo.getDelayOriginalDropFrameAsBigInteger());
        System.out.println("Delay drop frame info AS URL === " + jMetaDataVideo.getDelayOriginalDropFrameAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataVideo.getDurationLastFrameString1AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataVideo.getDurationLastFrameString1AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationLastFrameString1AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataVideo.getDurationLastFrameString1AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataVideo.getDurationLastFrameString1AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataVideo.getDurationLastFrameString1AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataVideo.getDurationLastFrameString1AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataVideo.getDurationLastFrameString1AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataVideo.getDelayOriginalStringAsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataVideo.getDelayOriginalStringAsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataVideo.getDelayOriginalStringAsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataVideo.getDelayOriginalStringAsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataVideo.getDelayOriginalStringAsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataVideo.getDelayOriginalStringAsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataVideo.getDelayOriginalStringAsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataVideo.getDelayOriginalStringAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getDurationLastFrameString3AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getDurationLastFrameString3AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getDurationLastFrameString3AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getDurationLastFrameString3AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataVideo.getDurationLastFrameString3AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getDurationLastFrameString3AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getDurationLastFrameString3AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getDurationLastFrameString3AsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getDurationLastFrameString2AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getDurationLastFrameString2AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getDurationLastFrameString2AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getDurationLastFrameString2AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getDurationLastFrameString2AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getDurationLastFrameString2AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getDurationLastFrameString2AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getDurationLastFrameString2AsURL());
        System.out.println("Clean Aperture height in pixel AS Integer === " + jMetaDataVideo.getHeightCleanApertureAsInteger());
        System.out.println("Clean Aperture height in pixel AS Long === " + jMetaDataVideo.getHeightCleanApertureAsLong());
        System.out.println("Clean Aperture height in pixel AS LocalDateTime === " + jMetaDataVideo.getHeightCleanApertureAsLocalDateTime());
        System.out.println("Clean Aperture height in pixel AS LocalTime === " + jMetaDataVideo.getHeightCleanApertureAsLocalTime());
        System.out.println("Clean Aperture height in pixel AS String === " + jMetaDataVideo.getHeightCleanApertureAsString());
        System.out.println("Clean Aperture height in pixel AS Boolean === " + jMetaDataVideo.getHeightCleanApertureAsBoolean());
        System.out.println("Clean Aperture height in pixel AS BigInteger === " + jMetaDataVideo.getHeightCleanApertureAsBigInteger());
        System.out.println("Clean Aperture height in pixel AS URL === " + jMetaDataVideo.getHeightCleanApertureAsURL());
        System.out.println("StreamSize in bytes of hte stream after demux AS Integer === " + jMetaDataVideo.getStreamSizeDemuxedAsInteger());
        System.out.println("StreamSize in bytes of hte stream after demux AS Long === " + jMetaDataVideo.getStreamSizeDemuxedAsLong());
        System.out.println("StreamSize in bytes of hte stream after demux AS LocalDateTime === " + jMetaDataVideo.getStreamSizeDemuxedAsLocalDateTime());
        System.out.println("StreamSize in bytes of hte stream after demux AS LocalTime === " + jMetaDataVideo.getStreamSizeDemuxedAsLocalTime());
        System.out.println("StreamSize in bytes of hte stream after demux AS String === " + jMetaDataVideo.getStreamSizeDemuxedAsString());
        System.out.println("StreamSize in bytes of hte stream after demux AS Boolean === " + jMetaDataVideo.getStreamSizeDemuxedAsBoolean());
        System.out.println("StreamSize in bytes of hte stream after demux AS BigInteger === " + jMetaDataVideo.getStreamSizeDemuxedAsBigInteger());
        System.out.println("StreamSize in bytes of hte stream after demux AS URL === " + jMetaDataVideo.getStreamSizeDemuxedAsURL());
        System.out.println("Settings needed for decoder used, summary AS Integer === " + jMetaDataVideo.getFormatSettingsAsInteger());
        System.out.println("Settings needed for decoder used, summary AS Long === " + jMetaDataVideo.getFormatSettingsAsLong());
        System.out.println("Settings needed for decoder used, summary AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsAsLocalDateTime());
        System.out.println("Settings needed for decoder used, summary AS LocalTime === " + jMetaDataVideo.getFormatSettingsAsLocalTime());
        System.out.println("Settings needed for decoder used, summary AS String === " + jMetaDataVideo.getFormatSettingsAsString());
        System.out.println("Settings needed for decoder used, summary AS Boolean === " + jMetaDataVideo.getFormatSettingsAsBoolean());
        System.out.println("Settings needed for decoder used, summary AS BigInteger === " + jMetaDataVideo.getFormatSettingsAsBigInteger());
        System.out.println("Settings needed for decoder used, summary AS URL === " + jMetaDataVideo.getFormatSettingsAsURL());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataVideo.getFirstPacketOrderAsInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataVideo.getFirstPacketOrderAsLong());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataVideo.getFirstPacketOrderAsLocalDateTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataVideo.getFirstPacketOrderAsLocalTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataVideo.getFirstPacketOrderAsString());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataVideo.getFirstPacketOrderAsBoolean());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataVideo.getFirstPacketOrderAsBigInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataVideo.getFirstPacketOrderAsURL());
        System.out.println("Clean Aperture height with measurement (pixel) AS Integer === " + jMetaDataVideo.getHeightCleanApertureStringAsInteger());
        System.out.println("Clean Aperture height with measurement (pixel) AS Long === " + jMetaDataVideo.getHeightCleanApertureStringAsLong());
        System.out.println("Clean Aperture height with measurement (pixel) AS LocalDateTime === " + jMetaDataVideo.getHeightCleanApertureStringAsLocalDateTime());
        System.out.println("Clean Aperture height with measurement (pixel) AS LocalTime === " + jMetaDataVideo.getHeightCleanApertureStringAsLocalTime());
        System.out.println("Clean Aperture height with measurement (pixel) AS String === " + jMetaDataVideo.getHeightCleanApertureStringAsString());
        System.out.println("Clean Aperture height with measurement (pixel) AS Boolean === " + jMetaDataVideo.getHeightCleanApertureStringAsBoolean());
        System.out.println("Clean Aperture height with measurement (pixel) AS BigInteger === " + jMetaDataVideo.getHeightCleanApertureStringAsBigInteger());
        System.out.println("Clean Aperture height with measurement (pixel) AS URL === " + jMetaDataVideo.getHeightCleanApertureStringAsURL());
        System.out.println("TimeStamp with measurement AS Integer === " + jMetaDataVideo.getTimeStampFirstFrameString1AsInteger());
        System.out.println("TimeStamp with measurement AS Long === " + jMetaDataVideo.getTimeStampFirstFrameString1AsLong());
        System.out.println("TimeStamp with measurement AS LocalDateTime === " + jMetaDataVideo.getTimeStampFirstFrameString1AsLocalDateTime());
        System.out.println("TimeStamp with measurement AS LocalTime === " + jMetaDataVideo.getTimeStampFirstFrameString1AsLocalTime());
        System.out.println("TimeStamp with measurement AS String === " + jMetaDataVideo.getTimeStampFirstFrameString1AsString());
        System.out.println("TimeStamp with measurement AS Boolean === " + jMetaDataVideo.getTimeStampFirstFrameString1AsBoolean());
        System.out.println("TimeStamp with measurement AS BigInteger === " + jMetaDataVideo.getTimeStampFirstFrameString1AsBigInteger());
        System.out.println("TimeStamp with measurement AS URL === " + jMetaDataVideo.getTimeStampFirstFrameString1AsURL());
        System.out.println("TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataVideo.getTimeStampFirstFrameString5AsInteger());
        System.out.println("TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataVideo.getTimeStampFirstFrameString5AsLong());
        System.out.println("TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataVideo.getTimeStampFirstFrameString5AsLocalDateTime());
        System.out.println("TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataVideo.getTimeStampFirstFrameString5AsLocalTime());
        System.out.println("TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataVideo.getTimeStampFirstFrameString5AsString());
        System.out.println("TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataVideo.getTimeStampFirstFrameString5AsBoolean());
        System.out.println("TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataVideo.getTimeStampFirstFrameString5AsBigInteger());
        System.out.println("TimeStamp in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataVideo.getTimeStampFirstFrameString5AsURL());
        System.out.println("Clean Aperture Pixel Aspect ratio AS Integer === " + jMetaDataVideo.getPixelAspectRatioCleanApertureStringAsInteger());
        System.out.println("Clean Aperture Pixel Aspect ratio AS Long === " + jMetaDataVideo.getPixelAspectRatioCleanApertureStringAsLong());
        System.out.println("Clean Aperture Pixel Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getPixelAspectRatioCleanApertureStringAsLocalDateTime());
        System.out.println("Clean Aperture Pixel Aspect ratio AS LocalTime === " + jMetaDataVideo.getPixelAspectRatioCleanApertureStringAsLocalTime());
        System.out.println("Clean Aperture Pixel Aspect ratio AS String === " + jMetaDataVideo.getPixelAspectRatioCleanApertureStringAsString());
        System.out.println("Clean Aperture Pixel Aspect ratio AS Boolean === " + jMetaDataVideo.getPixelAspectRatioCleanApertureStringAsBoolean());
        System.out.println("Clean Aperture Pixel Aspect ratio AS BigInteger === " + jMetaDataVideo.getPixelAspectRatioCleanApertureStringAsBigInteger());
        System.out.println("Clean Aperture Pixel Aspect ratio AS URL === " + jMetaDataVideo.getPixelAspectRatioCleanApertureStringAsURL());
        System.out.println("TimeStamp in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataVideo.getTimeStampFirstFrameString4AsInteger());
        System.out.println("TimeStamp in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataVideo.getTimeStampFirstFrameString4AsLong());
        System.out.println("TimeStamp in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataVideo.getTimeStampFirstFrameString4AsLocalDateTime());
        System.out.println("TimeStamp in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataVideo.getTimeStampFirstFrameString4AsLocalTime());
        System.out.println("TimeStamp in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataVideo.getTimeStampFirstFrameString4AsString());
        System.out.println("TimeStamp in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataVideo.getTimeStampFirstFrameString4AsBoolean());
        System.out.println("TimeStamp in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataVideo.getTimeStampFirstFrameString4AsBigInteger());
        System.out.println("TimeStamp in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataVideo.getTimeStampFirstFrameString4AsURL());
        System.out.println("TimeStamp in format : HH:MM:SS.MMM AS Integer === " + jMetaDataVideo.getTimeStampFirstFrameString3AsInteger());
        System.out.println("TimeStamp in format : HH:MM:SS.MMM AS Long === " + jMetaDataVideo.getTimeStampFirstFrameString3AsLong());
        System.out.println("TimeStamp in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataVideo.getTimeStampFirstFrameString3AsLocalDateTime());
        System.out.println("TimeStamp in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataVideo.getTimeStampFirstFrameString3AsLocalTime());
        System.out.println("TimeStamp in format : HH:MM:SS.MMM AS String === " + jMetaDataVideo.getTimeStampFirstFrameString3AsString());
        System.out.println("TimeStamp in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataVideo.getTimeStampFirstFrameString3AsBoolean());
        System.out.println("TimeStamp in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataVideo.getTimeStampFirstFrameString3AsBigInteger());
        System.out.println("TimeStamp in format : HH:MM:SS.MMM AS URL === " + jMetaDataVideo.getTimeStampFirstFrameString3AsURL());
        System.out.println("TimeStamp with measurement AS Integer === " + jMetaDataVideo.getTimeStampFirstFrameString2AsInteger());
        System.out.println("TimeStamp with measurement AS Long === " + jMetaDataVideo.getTimeStampFirstFrameString2AsLong());
        System.out.println("TimeStamp with measurement AS LocalDateTime === " + jMetaDataVideo.getTimeStampFirstFrameString2AsLocalDateTime());
        System.out.println("TimeStamp with measurement AS LocalTime === " + jMetaDataVideo.getTimeStampFirstFrameString2AsLocalTime());
        System.out.println("TimeStamp with measurement AS String === " + jMetaDataVideo.getTimeStampFirstFrameString2AsString());
        System.out.println("TimeStamp with measurement AS Boolean === " + jMetaDataVideo.getTimeStampFirstFrameString2AsBoolean());
        System.out.println("TimeStamp with measurement AS BigInteger === " + jMetaDataVideo.getTimeStampFirstFrameString2AsBigInteger());
        System.out.println("TimeStamp with measurement AS URL === " + jMetaDataVideo.getTimeStampFirstFrameString2AsURL());
        System.out.println("Nominal Bit rate (with measurement) AS Integer === " + jMetaDataVideo.getBitRateNominalStringAsInteger());
        System.out.println("Nominal Bit rate (with measurement) AS Long === " + jMetaDataVideo.getBitRateNominalStringAsLong());
        System.out.println("Nominal Bit rate (with measurement) AS LocalDateTime === " + jMetaDataVideo.getBitRateNominalStringAsLocalDateTime());
        System.out.println("Nominal Bit rate (with measurement) AS LocalTime === " + jMetaDataVideo.getBitRateNominalStringAsLocalTime());
        System.out.println("Nominal Bit rate (with measurement) AS String === " + jMetaDataVideo.getBitRateNominalStringAsString());
        System.out.println("Nominal Bit rate (with measurement) AS Boolean === " + jMetaDataVideo.getBitRateNominalStringAsBoolean());
        System.out.println("Nominal Bit rate (with measurement) AS BigInteger === " + jMetaDataVideo.getBitRateNominalStringAsBigInteger());
        System.out.println("Nominal Bit rate (with measurement) AS URL === " + jMetaDataVideo.getBitRateNominalStringAsURL());
        System.out.println("ScanOrder_Stored AS Integer === " + jMetaDataVideo.getScanOrderStoredAsInteger());
        System.out.println("ScanOrder_Stored AS Long === " + jMetaDataVideo.getScanOrderStoredAsLong());
        System.out.println("ScanOrder_Stored AS LocalDateTime === " + jMetaDataVideo.getScanOrderStoredAsLocalDateTime());
        System.out.println("ScanOrder_Stored AS LocalTime === " + jMetaDataVideo.getScanOrderStoredAsLocalTime());
        System.out.println("ScanOrder_Stored AS String === " + jMetaDataVideo.getScanOrderStoredAsString());
        System.out.println("ScanOrder_Stored AS Boolean === " + jMetaDataVideo.getScanOrderStoredAsBoolean());
        System.out.println("ScanOrder_Stored AS BigInteger === " + jMetaDataVideo.getScanOrderStoredAsBigInteger());
        System.out.println("ScanOrder_Stored AS URL === " + jMetaDataVideo.getScanOrderStoredAsURL());
        System.out.println("Format used AS Integer === " + jMetaDataVideo.getFormatAsInteger());
        System.out.println("Format used AS Long === " + jMetaDataVideo.getFormatAsLong());
        System.out.println("Format used AS LocalDateTime === " + jMetaDataVideo.getFormatAsLocalDateTime());
        System.out.println("Format used AS LocalTime === " + jMetaDataVideo.getFormatAsLocalTime());
        System.out.println("Format used AS String === " + jMetaDataVideo.getFormatAsString());
        System.out.println("Format used AS Boolean === " + jMetaDataVideo.getFormatAsBoolean());
        System.out.println("Format used AS BigInteger === " + jMetaDataVideo.getFormatAsBigInteger());
        System.out.println("Format used AS URL === " + jMetaDataVideo.getFormatAsURL());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS Integer === " + jMetaDataVideo.getDisplayAspectRatioOriginalStringAsInteger());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS Long === " + jMetaDataVideo.getDisplayAspectRatioOriginalStringAsLong());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getDisplayAspectRatioOriginalStringAsLocalDateTime());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS LocalTime === " + jMetaDataVideo.getDisplayAspectRatioOriginalStringAsLocalTime());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS String === " + jMetaDataVideo.getDisplayAspectRatioOriginalStringAsString());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS Boolean === " + jMetaDataVideo.getDisplayAspectRatioOriginalStringAsBoolean());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS BigInteger === " + jMetaDataVideo.getDisplayAspectRatioOriginalStringAsBigInteger());
        System.out.println("Original (in the raw stream) Display Aspect ratio AS URL === " + jMetaDataVideo.getDisplayAspectRatioOriginalStringAsURL());
        System.out.println("Original (in the raw stream) width with measurement (pixel) AS Integer === " + jMetaDataVideo.getWidthOriginalStringAsInteger());
        System.out.println("Original (in the raw stream) width with measurement (pixel) AS Long === " + jMetaDataVideo.getWidthOriginalStringAsLong());
        System.out.println("Original (in the raw stream) width with measurement (pixel) AS LocalDateTime === " + jMetaDataVideo.getWidthOriginalStringAsLocalDateTime());
        System.out.println("Original (in the raw stream) width with measurement (pixel) AS LocalTime === " + jMetaDataVideo.getWidthOriginalStringAsLocalTime());
        System.out.println("Original (in the raw stream) width with measurement (pixel) AS String === " + jMetaDataVideo.getWidthOriginalStringAsString());
        System.out.println("Original (in the raw stream) width with measurement (pixel) AS Boolean === " + jMetaDataVideo.getWidthOriginalStringAsBoolean());
        System.out.println("Original (in the raw stream) width with measurement (pixel) AS BigInteger === " + jMetaDataVideo.getWidthOriginalStringAsBigInteger());
        System.out.println("Original (in the raw stream) width with measurement (pixel) AS URL === " + jMetaDataVideo.getWidthOriginalStringAsURL());
        System.out.println("Frames per second, numerator AS Integer === " + jMetaDataVideo.getFrameRateOriginalNumAsInteger());
        System.out.println("Frames per second, numerator AS Long === " + jMetaDataVideo.getFrameRateOriginalNumAsLong());
        System.out.println("Frames per second, numerator AS LocalDateTime === " + jMetaDataVideo.getFrameRateOriginalNumAsLocalDateTime());
        System.out.println("Frames per second, numerator AS LocalTime === " + jMetaDataVideo.getFrameRateOriginalNumAsLocalTime());
        System.out.println("Frames per second, numerator AS String === " + jMetaDataVideo.getFrameRateOriginalNumAsString());
        System.out.println("Frames per second, numerator AS Boolean === " + jMetaDataVideo.getFrameRateOriginalNumAsBoolean());
        System.out.println("Frames per second, numerator AS BigInteger === " + jMetaDataVideo.getFrameRateOriginalNumAsBigInteger());
        System.out.println("Frames per second, numerator AS URL === " + jMetaDataVideo.getFrameRateOriginalNumAsURL());
        System.out.println("Height in pixel AS Integer === " + jMetaDataVideo.getHeightAsInteger());
        System.out.println("Height in pixel AS Long === " + jMetaDataVideo.getHeightAsLong());
        System.out.println("Height in pixel AS LocalDateTime === " + jMetaDataVideo.getHeightAsLocalDateTime());
        System.out.println("Height in pixel AS LocalTime === " + jMetaDataVideo.getHeightAsLocalTime());
        System.out.println("Height in pixel AS String === " + jMetaDataVideo.getHeightAsString());
        System.out.println("Height in pixel AS Boolean === " + jMetaDataVideo.getHeightAsBoolean());
        System.out.println("Height in pixel AS BigInteger === " + jMetaDataVideo.getHeightAsBigInteger());
        System.out.println("Height in pixel AS URL === " + jMetaDataVideo.getHeightAsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataVideo.getCodecIDStringAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataVideo.getCodecIDStringAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataVideo.getCodecIDStringAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataVideo.getCodecIDStringAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataVideo.getCodecIDStringAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataVideo.getCodecIDStringAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataVideo.getCodecIDStringAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataVideo.getCodecIDStringAsURL());
        System.out.println("Name of the company AS Integer === " + jMetaDataVideo.getEncodedLibraryCompanyNameAsInteger());
        System.out.println("Name of the company AS Long === " + jMetaDataVideo.getEncodedLibraryCompanyNameAsLong());
        System.out.println("Name of the company AS LocalDateTime === " + jMetaDataVideo.getEncodedLibraryCompanyNameAsLocalDateTime());
        System.out.println("Name of the company AS LocalTime === " + jMetaDataVideo.getEncodedLibraryCompanyNameAsLocalTime());
        System.out.println("Name of the company AS String === " + jMetaDataVideo.getEncodedLibraryCompanyNameAsString());
        System.out.println("Name of the company AS Boolean === " + jMetaDataVideo.getEncodedLibraryCompanyNameAsBoolean());
        System.out.println("Name of the company AS BigInteger === " + jMetaDataVideo.getEncodedLibraryCompanyNameAsBigInteger());
        System.out.println("Name of the company AS URL === " + jMetaDataVideo.getEncodedLibraryCompanyNameAsURL());
        System.out.println("TimeStamp fixed in the stream (relative) IN MS AS Integer === " + jMetaDataVideo.getTimeStampFirstFrameAsInteger());
        System.out.println("TimeStamp fixed in the stream (relative) IN MS AS Long === " + jMetaDataVideo.getTimeStampFirstFrameAsLong());
        System.out.println("TimeStamp fixed in the stream (relative) IN MS AS LocalDateTime === " + jMetaDataVideo.getTimeStampFirstFrameAsLocalDateTime());
        System.out.println("TimeStamp fixed in the stream (relative) IN MS AS LocalTime === " + jMetaDataVideo.getTimeStampFirstFrameAsLocalTime());
        System.out.println("TimeStamp fixed in the stream (relative) IN MS AS String === " + jMetaDataVideo.getTimeStampFirstFrameAsString());
        System.out.println("TimeStamp fixed in the stream (relative) IN MS AS Boolean === " + jMetaDataVideo.getTimeStampFirstFrameAsBoolean());
        System.out.println("TimeStamp fixed in the stream (relative) IN MS AS BigInteger === " + jMetaDataVideo.getTimeStampFirstFrameAsBigInteger());
        System.out.println("TimeStamp fixed in the stream (relative) IN MS AS URL === " + jMetaDataVideo.getTimeStampFirstFrameAsURL());
        System.out.println("Source Streamsize in bytes AS Integer === " + jMetaDataVideo.getSourceStreamSizeAsInteger());
        System.out.println("Source Streamsize in bytes AS Long === " + jMetaDataVideo.getSourceStreamSizeAsLong());
        System.out.println("Source Streamsize in bytes AS LocalDateTime === " + jMetaDataVideo.getSourceStreamSizeAsLocalDateTime());
        System.out.println("Source Streamsize in bytes AS LocalTime === " + jMetaDataVideo.getSourceStreamSizeAsLocalTime());
        System.out.println("Source Streamsize in bytes AS String === " + jMetaDataVideo.getSourceStreamSizeAsString());
        System.out.println("Source Streamsize in bytes AS Boolean === " + jMetaDataVideo.getSourceStreamSizeAsBoolean());
        System.out.println("Source Streamsize in bytes AS BigInteger === " + jMetaDataVideo.getSourceStreamSizeAsBigInteger());
        System.out.println("Source Streamsize in bytes AS URL === " + jMetaDataVideo.getSourceStreamSizeAsURL());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Integer === " + jMetaDataVideo.getFormatCommercialAsInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Long === " + jMetaDataVideo.getFormatCommercialAsLong());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalDateTime === " + jMetaDataVideo.getFormatCommercialAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalTime === " + jMetaDataVideo.getFormatCommercialAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS String === " + jMetaDataVideo.getFormatCommercialAsString());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Boolean === " + jMetaDataVideo.getFormatCommercialAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS BigInteger === " + jMetaDataVideo.getFormatCommercialAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS URL === " + jMetaDataVideo.getFormatCommercialAsURL());
        System.out.println("Active Format Description (AFD value) muxing mode (Ancillary or Raw stream) AS Integer === " + jMetaDataVideo.getActiveFormatDescriptionMuxingModeAsInteger());
        System.out.println("Active Format Description (AFD value) muxing mode (Ancillary or Raw stream) AS Long === " + jMetaDataVideo.getActiveFormatDescriptionMuxingModeAsLong());
        System.out.println("Active Format Description (AFD value) muxing mode (Ancillary or Raw stream) AS LocalDateTime === " + jMetaDataVideo.getActiveFormatDescriptionMuxingModeAsLocalDateTime());
        System.out.println("Active Format Description (AFD value) muxing mode (Ancillary or Raw stream) AS LocalTime === " + jMetaDataVideo.getActiveFormatDescriptionMuxingModeAsLocalTime());
        System.out.println("Active Format Description (AFD value) muxing mode (Ancillary or Raw stream) AS String === " + jMetaDataVideo.getActiveFormatDescriptionMuxingModeAsString());
        System.out.println("Active Format Description (AFD value) muxing mode (Ancillary or Raw stream) AS Boolean === " + jMetaDataVideo.getActiveFormatDescriptionMuxingModeAsBoolean());
        System.out.println("Active Format Description (AFD value) muxing mode (Ancillary or Raw stream) AS BigInteger === " + jMetaDataVideo.getActiveFormatDescriptionMuxingModeAsBigInteger());
        System.out.println("Active Format Description (AFD value) muxing mode (Ancillary or Raw stream) AS URL === " + jMetaDataVideo.getActiveFormatDescriptionMuxingModeAsURL());
        System.out.println("ScanType_Original AS Integer === " + jMetaDataVideo.getScanTypeOriginalAsInteger());
        System.out.println("ScanType_Original AS Long === " + jMetaDataVideo.getScanTypeOriginalAsLong());
        System.out.println("ScanType_Original AS LocalDateTime === " + jMetaDataVideo.getScanTypeOriginalAsLocalDateTime());
        System.out.println("ScanType_Original AS LocalTime === " + jMetaDataVideo.getScanTypeOriginalAsLocalTime());
        System.out.println("ScanType_Original AS String === " + jMetaDataVideo.getScanTypeOriginalAsString());
        System.out.println("ScanType_Original AS Boolean === " + jMetaDataVideo.getScanTypeOriginalAsBoolean());
        System.out.println("ScanType_Original AS BigInteger === " + jMetaDataVideo.getScanTypeOriginalAsBigInteger());
        System.out.println("ScanType_Original AS URL === " + jMetaDataVideo.getScanTypeOriginalAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataVideo.getDelaySourceStringAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataVideo.getDelaySourceStringAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataVideo.getDelaySourceStringAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataVideo.getDelaySourceStringAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataVideo.getDelaySourceStringAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataVideo.getDelaySourceStringAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataVideo.getDelaySourceStringAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataVideo.getDelaySourceStringAsURL());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS Integer === " + jMetaDataVideo.gettransfercharacteristicsOriginalAsInteger());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS Long === " + jMetaDataVideo.gettransfercharacteristicsOriginalAsLong());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS LocalDateTime === " + jMetaDataVideo.gettransfercharacteristicsOriginalAsLocalDateTime());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS LocalTime === " + jMetaDataVideo.gettransfercharacteristicsOriginalAsLocalTime());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS String === " + jMetaDataVideo.gettransfercharacteristicsOriginalAsString());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS Boolean === " + jMetaDataVideo.gettransfercharacteristicsOriginalAsBoolean());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS BigInteger === " + jMetaDataVideo.gettransfercharacteristicsOriginalAsBigInteger());
        System.out.println("Opto-electronic transfer characteristic of the source picture AS URL === " + jMetaDataVideo.gettransfercharacteristicsOriginalAsURL());
        System.out.println("Nominal Bit rate in bps AS Integer === " + jMetaDataVideo.getBitRateNominalAsInteger());
        System.out.println("Nominal Bit rate in bps AS Long === " + jMetaDataVideo.getBitRateNominalAsLong());
        System.out.println("Nominal Bit rate in bps AS LocalDateTime === " + jMetaDataVideo.getBitRateNominalAsLocalDateTime());
        System.out.println("Nominal Bit rate in bps AS LocalTime === " + jMetaDataVideo.getBitRateNominalAsLocalTime());
        System.out.println("Nominal Bit rate in bps AS String === " + jMetaDataVideo.getBitRateNominalAsString());
        System.out.println("Nominal Bit rate in bps AS Boolean === " + jMetaDataVideo.getBitRateNominalAsBoolean());
        System.out.println("Nominal Bit rate in bps AS BigInteger === " + jMetaDataVideo.getBitRateNominalAsBigInteger());
        System.out.println("Nominal Bit rate in bps AS URL === " + jMetaDataVideo.getBitRateNominalAsURL());
        System.out.println("Minimum Bit rate in bps AS Integer === " + jMetaDataVideo.getBitRateMinimumAsInteger());
        System.out.println("Minimum Bit rate in bps AS Long === " + jMetaDataVideo.getBitRateMinimumAsLong());
        System.out.println("Minimum Bit rate in bps AS LocalDateTime === " + jMetaDataVideo.getBitRateMinimumAsLocalDateTime());
        System.out.println("Minimum Bit rate in bps AS LocalTime === " + jMetaDataVideo.getBitRateMinimumAsLocalTime());
        System.out.println("Minimum Bit rate in bps AS String === " + jMetaDataVideo.getBitRateMinimumAsString());
        System.out.println("Minimum Bit rate in bps AS Boolean === " + jMetaDataVideo.getBitRateMinimumAsBoolean());
        System.out.println("Minimum Bit rate in bps AS BigInteger === " + jMetaDataVideo.getBitRateMinimumAsBigInteger());
        System.out.println("Minimum Bit rate in bps AS URL === " + jMetaDataVideo.getBitRateMinimumAsURL());
        System.out.println("Original (in the raw stream) height in pixel AS Integer === " + jMetaDataVideo.getHeightOriginalAsInteger());
        System.out.println("Original (in the raw stream) height in pixel AS Long === " + jMetaDataVideo.getHeightOriginalAsLong());
        System.out.println("Original (in the raw stream) height in pixel AS LocalDateTime === " + jMetaDataVideo.getHeightOriginalAsLocalDateTime());
        System.out.println("Original (in the raw stream) height in pixel AS LocalTime === " + jMetaDataVideo.getHeightOriginalAsLocalTime());
        System.out.println("Original (in the raw stream) height in pixel AS String === " + jMetaDataVideo.getHeightOriginalAsString());
        System.out.println("Original (in the raw stream) height in pixel AS Boolean === " + jMetaDataVideo.getHeightOriginalAsBoolean());
        System.out.println("Original (in the raw stream) height in pixel AS BigInteger === " + jMetaDataVideo.getHeightOriginalAsBigInteger());
        System.out.println("Original (in the raw stream) height in pixel AS URL === " + jMetaDataVideo.getHeightOriginalAsURL());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataVideo.getSourceDurationStringAsInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataVideo.getSourceDurationStringAsLong());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataVideo.getSourceDurationStringAsLocalDateTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataVideo.getSourceDurationStringAsLocalTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataVideo.getSourceDurationStringAsString());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataVideo.getSourceDurationStringAsBoolean());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataVideo.getSourceDurationStringAsBigInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataVideo.getSourceDurationStringAsURL());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS Integer === " + jMetaDataVideo.getmatrixcoefficientsAsInteger());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS Long === " + jMetaDataVideo.getmatrixcoefficientsAsLong());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS LocalDateTime === " + jMetaDataVideo.getmatrixcoefficientsAsLocalDateTime());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS LocalTime === " + jMetaDataVideo.getmatrixcoefficientsAsLocalTime());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS String === " + jMetaDataVideo.getmatrixcoefficientsAsString());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS Boolean === " + jMetaDataVideo.getmatrixcoefficientsAsBoolean());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS BigInteger === " + jMetaDataVideo.getmatrixcoefficientsAsBigInteger());
        System.out.println("Matrix coefficients used in deriving luma and chroma signals from the green, blue, and red primaries AS URL === " + jMetaDataVideo.getmatrixcoefficientsAsURL());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Integer === " + jMetaDataVideo.getBitRateEncodedStringAsInteger());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Long === " + jMetaDataVideo.getBitRateEncodedStringAsLong());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS LocalDateTime === " + jMetaDataVideo.getBitRateEncodedStringAsLocalDateTime());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS LocalTime === " + jMetaDataVideo.getBitRateEncodedStringAsLocalTime());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS String === " + jMetaDataVideo.getBitRateEncodedStringAsString());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Boolean === " + jMetaDataVideo.getBitRateEncodedStringAsBoolean());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS BigInteger === " + jMetaDataVideo.getBitRateEncodedStringAsBigInteger());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS URL === " + jMetaDataVideo.getBitRateEncodedStringAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataVideo.getStreamKindStringAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataVideo.getStreamKindStringAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataVideo.getStreamKindStringAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataVideo.getStreamKindStringAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataVideo.getStreamKindStringAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataVideo.getStreamKindStringAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataVideo.getStreamKindStringAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataVideo.getStreamKindStringAsURL());
        System.out.println("ChromaSubsampling AS Integer === " + jMetaDataVideo.getChromaSubsamplingAsInteger());
        System.out.println("ChromaSubsampling AS Long === " + jMetaDataVideo.getChromaSubsamplingAsLong());
        System.out.println("ChromaSubsampling AS LocalDateTime === " + jMetaDataVideo.getChromaSubsamplingAsLocalDateTime());
        System.out.println("ChromaSubsampling AS LocalTime === " + jMetaDataVideo.getChromaSubsamplingAsLocalTime());
        System.out.println("ChromaSubsampling AS String === " + jMetaDataVideo.getChromaSubsamplingAsString());
        System.out.println("ChromaSubsampling AS Boolean === " + jMetaDataVideo.getChromaSubsamplingAsBoolean());
        System.out.println("ChromaSubsampling AS BigInteger === " + jMetaDataVideo.getChromaSubsamplingAsBigInteger());
        System.out.println("ChromaSubsampling AS URL === " + jMetaDataVideo.getChromaSubsamplingAsURL());
        System.out.println("Time code information about Open/Closed AS Integer === " + jMetaDataVideo.getGopOpenClosedStringAsInteger());
        System.out.println("Time code information about Open/Closed AS Long === " + jMetaDataVideo.getGopOpenClosedStringAsLong());
        System.out.println("Time code information about Open/Closed AS LocalDateTime === " + jMetaDataVideo.getGopOpenClosedStringAsLocalDateTime());
        System.out.println("Time code information about Open/Closed AS LocalTime === " + jMetaDataVideo.getGopOpenClosedStringAsLocalTime());
        System.out.println("Time code information about Open/Closed AS String === " + jMetaDataVideo.getGopOpenClosedStringAsString());
        System.out.println("Time code information about Open/Closed AS Boolean === " + jMetaDataVideo.getGopOpenClosedStringAsBoolean());
        System.out.println("Time code information about Open/Closed AS BigInteger === " + jMetaDataVideo.getGopOpenClosedStringAsBigInteger());
        System.out.println("Time code information about Open/Closed AS URL === " + jMetaDataVideo.getGopOpenClosedStringAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsQPelStringAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsQPelStringAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsQPelStringAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsQPelStringAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsQPelStringAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsQPelStringAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsQPelStringAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsQPelStringAsURL());
        System.out.println("Version of the product AS Integer === " + jMetaDataVideo.getEncodedApplicationVersionAsInteger());
        System.out.println("Version of the product AS Long === " + jMetaDataVideo.getEncodedApplicationVersionAsLong());
        System.out.println("Version of the product AS LocalDateTime === " + jMetaDataVideo.getEncodedApplicationVersionAsLocalDateTime());
        System.out.println("Version of the product AS LocalTime === " + jMetaDataVideo.getEncodedApplicationVersionAsLocalTime());
        System.out.println("Version of the product AS String === " + jMetaDataVideo.getEncodedApplicationVersionAsString());
        System.out.println("Version of the product AS Boolean === " + jMetaDataVideo.getEncodedApplicationVersionAsBoolean());
        System.out.println("Version of the product AS BigInteger === " + jMetaDataVideo.getEncodedApplicationVersionAsBigInteger());
        System.out.println("Version of the product AS URL === " + jMetaDataVideo.getEncodedApplicationVersionAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataVideo.getMenuIDAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataVideo.getMenuIDAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataVideo.getMenuIDAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataVideo.getMenuIDAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataVideo.getMenuIDAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataVideo.getMenuIDAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataVideo.getMenuIDAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataVideo.getMenuIDAsURL());
        System.out.println("Number of a group in order to provide versions of the same track AS Integer === " + jMetaDataVideo.getAlternateGroupStringAsInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS Long === " + jMetaDataVideo.getAlternateGroupStringAsLong());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalDateTime === " + jMetaDataVideo.getAlternateGroupStringAsLocalDateTime());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalTime === " + jMetaDataVideo.getAlternateGroupStringAsLocalTime());
        System.out.println("Number of a group in order to provide versions of the same track AS String === " + jMetaDataVideo.getAlternateGroupStringAsString());
        System.out.println("Number of a group in order to provide versions of the same track AS Boolean === " + jMetaDataVideo.getAlternateGroupStringAsBoolean());
        System.out.println("Number of a group in order to provide versions of the same track AS BigInteger === " + jMetaDataVideo.getAlternateGroupStringAsBigInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS URL === " + jMetaDataVideo.getAlternateGroupStringAsURL());
        System.out.println("Settings needed for decoder used, detailled AS Integer === " + jMetaDataVideo.getFormatSettingsCABACAsInteger());
        System.out.println("Settings needed for decoder used, detailled AS Long === " + jMetaDataVideo.getFormatSettingsCABACAsLong());
        System.out.println("Settings needed for decoder used, detailled AS LocalDateTime === " + jMetaDataVideo.getFormatSettingsCABACAsLocalDateTime());
        System.out.println("Settings needed for decoder used, detailled AS LocalTime === " + jMetaDataVideo.getFormatSettingsCABACAsLocalTime());
        System.out.println("Settings needed for decoder used, detailled AS String === " + jMetaDataVideo.getFormatSettingsCABACAsString());
        System.out.println("Settings needed for decoder used, detailled AS Boolean === " + jMetaDataVideo.getFormatSettingsCABACAsBoolean());
        System.out.println("Settings needed for decoder used, detailled AS BigInteger === " + jMetaDataVideo.getFormatSettingsCABACAsBigInteger());
        System.out.println("Settings needed for decoder used, detailled AS URL === " + jMetaDataVideo.getFormatSettingsCABACAsURL());
        System.out.println("Pixel Aspect ratio AS Integer === " + jMetaDataVideo.getPixelAspectRatioAsInteger());
        System.out.println("Pixel Aspect ratio AS Long === " + jMetaDataVideo.getPixelAspectRatioAsLong());
        System.out.println("Pixel Aspect ratio AS LocalDateTime === " + jMetaDataVideo.getPixelAspectRatioAsLocalDateTime());
        System.out.println("Pixel Aspect ratio AS LocalTime === " + jMetaDataVideo.getPixelAspectRatioAsLocalTime());
        System.out.println("Pixel Aspect ratio AS String === " + jMetaDataVideo.getPixelAspectRatioAsString());
        System.out.println("Pixel Aspect ratio AS Boolean === " + jMetaDataVideo.getPixelAspectRatioAsBoolean());
        System.out.println("Pixel Aspect ratio AS BigInteger === " + jMetaDataVideo.getPixelAspectRatioAsBigInteger());
        System.out.println("Pixel Aspect ratio AS URL === " + jMetaDataVideo.getPixelAspectRatioAsURL());
    }

}
