package aka.jmetadata.test;

import org.eclipse.jdt.annotation.NonNull;

import aka.jmetadata.main.JMetaDataText;

/**
 * This class contains tests methods for Text informations of a specific Text stream.
 *
 * @author Welle Charlotte
 */
public final class JMetaDataText_JUnitTest {

   /**
    * Print Text informations.
    * 
    * @param jMetaDataText to be printed
    */
    static void printJMetadataText(@NonNull final JMetaDataText jMetaDataText) {
        System.out.println("JMetaDataText");
        System.out.println("-------------------------------------------------------");
        System.out.println("Delay source (Stream or empty) AS Integer === " + jMetaDataText.getDelayOriginalSourceAsInteger());
        System.out.println("Delay source (Stream or empty) AS Long === " + jMetaDataText.getDelayOriginalSourceAsLong());
        System.out.println("Delay source (Stream or empty) AS LocalDateTime === " + jMetaDataText.getDelayOriginalSourceAsLocalDateTime());
        System.out.println("Delay source (Stream or empty) AS LocalTime === " + jMetaDataText.getDelayOriginalSourceAsLocalTime());
        System.out.println("Delay source (Stream or empty) AS String === " + jMetaDataText.getDelayOriginalSourceAsString());
        System.out.println("Delay source (Stream or empty) AS Boolean === " + jMetaDataText.getDelayOriginalSourceAsBoolean());
        System.out.println("Delay source (Stream or empty) AS BigInteger === " + jMetaDataText.getDelayOriginalSourceAsBigInteger());
        System.out.println("Delay source (Stream or empty) AS URL === " + jMetaDataText.getDelayOriginalSourceAsURL());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataText.getStreamOrderAsInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataText.getStreamOrderAsLong());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataText.getStreamOrderAsLocalDateTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataText.getStreamOrderAsLocalTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataText.getStreamOrderAsString());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataText.getStreamOrderAsBoolean());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataText.getStreamOrderAsBigInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataText.getStreamOrderAsURL());
        System.out.println("Name of the the encoding-software AS Integer === " + jMetaDataText.getEncodedLibraryNameAsInteger());
        System.out.println("Name of the the encoding-software AS Long === " + jMetaDataText.getEncodedLibraryNameAsLong());
        System.out.println("Name of the the encoding-software AS LocalDateTime === " + jMetaDataText.getEncodedLibraryNameAsLocalDateTime());
        System.out.println("Name of the the encoding-software AS LocalTime === " + jMetaDataText.getEncodedLibraryNameAsLocalTime());
        System.out.println("Name of the the encoding-software AS String === " + jMetaDataText.getEncodedLibraryNameAsString());
        System.out.println("Name of the the encoding-software AS Boolean === " + jMetaDataText.getEncodedLibraryNameAsBoolean());
        System.out.println("Name of the the encoding-software AS BigInteger === " + jMetaDataText.getEncodedLibraryNameAsBigInteger());
        System.out.println("Name of the the encoding-software AS URL === " + jMetaDataText.getEncodedLibraryNameAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataText.getDurationFirstFrameString4AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataText.getDurationFirstFrameString4AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataText.getDurationFirstFrameString4AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataText.getDurationFirstFrameString4AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataText.getDurationFirstFrameString4AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataText.getDurationFirstFrameString4AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataText.getDurationFirstFrameString4AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataText.getDurationFirstFrameString4AsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataText.getDurationFirstFrameString5AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataText.getDurationFirstFrameString5AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataText.getDurationFirstFrameString5AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataText.getDurationFirstFrameString5AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataText.getDurationFirstFrameString5AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataText.getDurationFirstFrameString5AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataText.getDurationFirstFrameString5AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataText.getDurationFirstFrameString5AsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getDurationFirstFrameString2AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getDurationFirstFrameString2AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getDurationFirstFrameString2AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getDurationFirstFrameString2AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getDurationFirstFrameString2AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getDurationFirstFrameString2AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getDurationFirstFrameString2AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getDurationFirstFrameString2AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getSourceDurationFirstFrameStringAsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getSourceDurationFirstFrameStringAsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationFirstFrameStringAsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationFirstFrameStringAsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getSourceDurationFirstFrameStringAsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getSourceDurationFirstFrameStringAsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationFirstFrameStringAsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getSourceDurationFirstFrameStringAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataText.getDurationFirstFrameString3AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataText.getDurationFirstFrameString3AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataText.getDurationFirstFrameString3AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataText.getDurationFirstFrameString3AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataText.getDurationFirstFrameString3AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataText.getDurationFirstFrameString3AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataText.getDurationFirstFrameString3AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataText.getDurationFirstFrameString3AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Integer === " + jMetaDataText.getSourceDurationLastFrameAsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Long === " + jMetaDataText.getSourceDurationLastFrameAsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataText.getSourceDurationLastFrameAsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS LocalTime === " + jMetaDataText.getSourceDurationLastFrameAsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS String === " + jMetaDataText.getSourceDurationLastFrameAsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Boolean === " + jMetaDataText.getSourceDurationLastFrameAsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS BigInteger === " + jMetaDataText.getSourceDurationLastFrameAsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS URL === " + jMetaDataText.getSourceDurationLastFrameAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataText.getDurationFirstFrameString1AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataText.getDurationFirstFrameString1AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataText.getDurationFirstFrameString1AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataText.getDurationFirstFrameString1AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataText.getDurationFirstFrameString1AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataText.getDurationFirstFrameString1AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataText.getDurationFirstFrameString1AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataText.getDurationFirstFrameString1AsURL());
        System.out.println("Compression method used AS Integer === " + jMetaDataText.getFormatCompressionAsInteger());
        System.out.println("Compression method used AS Long === " + jMetaDataText.getFormatCompressionAsLong());
        System.out.println("Compression method used AS LocalDateTime === " + jMetaDataText.getFormatCompressionAsLocalDateTime());
        System.out.println("Compression method used AS LocalTime === " + jMetaDataText.getFormatCompressionAsLocalTime());
        System.out.println("Compression method used AS String === " + jMetaDataText.getFormatCompressionAsString());
        System.out.println("Compression method used AS Boolean === " + jMetaDataText.getFormatCompressionAsBoolean());
        System.out.println("Compression method used AS BigInteger === " + jMetaDataText.getFormatCompressionAsBigInteger());
        System.out.println("Compression method used AS URL === " + jMetaDataText.getFormatCompressionAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataText.getDelayStringAsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataText.getDelayStringAsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataText.getDelayStringAsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataText.getDelayStringAsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataText.getDelayStringAsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataText.getDelayStringAsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataText.getDelayStringAsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataText.getDelayStringAsURL());
        System.out.println("More info (text) about the muxing mode AS Integer === " + jMetaDataText.getMuxingModeMoreInfoAsInteger());
        System.out.println("More info (text) about the muxing mode AS Long === " + jMetaDataText.getMuxingModeMoreInfoAsLong());
        System.out.println("More info (text) about the muxing mode AS LocalDateTime === " + jMetaDataText.getMuxingModeMoreInfoAsLocalDateTime());
        System.out.println("More info (text) about the muxing mode AS LocalTime === " + jMetaDataText.getMuxingModeMoreInfoAsLocalTime());
        System.out.println("More info (text) about the muxing mode AS String === " + jMetaDataText.getMuxingModeMoreInfoAsString());
        System.out.println("More info (text) about the muxing mode AS Boolean === " + jMetaDataText.getMuxingModeMoreInfoAsBoolean());
        System.out.println("More info (text) about the muxing mode AS BigInteger === " + jMetaDataText.getMuxingModeMoreInfoAsBigInteger());
        System.out.println("More info (text) about the muxing mode AS URL === " + jMetaDataText.getMuxingModeMoreInfoAsURL());
        System.out.println("Source Encoded Streamsize in with percentage value AS Integer === " + jMetaDataText.getSourceStreamSizeEncodedStringAsInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS Long === " + jMetaDataText.getSourceStreamSizeEncodedStringAsLong());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeEncodedStringAsLocalDateTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataText.getSourceStreamSizeEncodedStringAsLocalTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS String === " + jMetaDataText.getSourceStreamSizeEncodedStringAsString());
        System.out.println("Source Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataText.getSourceStreamSizeEncodedStringAsBoolean());
        System.out.println("Source Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataText.getSourceStreamSizeEncodedStringAsBigInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS URL === " + jMetaDataText.getSourceStreamSizeEncodedStringAsURL());
        System.out.println("Manual description given by the container AS Integer === " + jMetaDataText.getCodecIDDescriptionAsInteger());
        System.out.println("Manual description given by the container AS Long === " + jMetaDataText.getCodecIDDescriptionAsLong());
        System.out.println("Manual description given by the container AS LocalDateTime === " + jMetaDataText.getCodecIDDescriptionAsLocalDateTime());
        System.out.println("Manual description given by the container AS LocalTime === " + jMetaDataText.getCodecIDDescriptionAsLocalTime());
        System.out.println("Manual description given by the container AS String === " + jMetaDataText.getCodecIDDescriptionAsString());
        System.out.println("Manual description given by the container AS Boolean === " + jMetaDataText.getCodecIDDescriptionAsBoolean());
        System.out.println("Manual description given by the container AS BigInteger === " + jMetaDataText.getCodecIDDescriptionAsBigInteger());
        System.out.println("Manual description given by the container AS URL === " + jMetaDataText.getCodecIDDescriptionAsURL());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Integer === " + jMetaDataText.getStatusAsInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Long === " + jMetaDataText.getStatusAsLong());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalDateTime === " + jMetaDataText.getStatusAsLocalDateTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalTime === " + jMetaDataText.getStatusAsLocalTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS String === " + jMetaDataText.getStatusAsString());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Boolean === " + jMetaDataText.getStatusAsBoolean());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS BigInteger === " + jMetaDataText.getStatusAsBigInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS URL === " + jMetaDataText.getStatusAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getDurationFirstFrameStringAsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getDurationFirstFrameStringAsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getDurationFirstFrameStringAsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getDurationFirstFrameStringAsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getDurationFirstFrameStringAsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getDurationFirstFrameStringAsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getDurationFirstFrameStringAsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getDurationFirstFrameStringAsURL());
        System.out.println("Frames per second AS Integer === " + jMetaDataText.getFrameRateAsInteger());
        System.out.println("Frames per second AS Long === " + jMetaDataText.getFrameRateAsLong());
        System.out.println("Frames per second AS LocalDateTime === " + jMetaDataText.getFrameRateAsLocalDateTime());
        System.out.println("Frames per second AS LocalTime === " + jMetaDataText.getFrameRateAsLocalTime());
        System.out.println("Frames per second AS String === " + jMetaDataText.getFrameRateAsString());
        System.out.println("Frames per second AS Boolean === " + jMetaDataText.getFrameRateAsBoolean());
        System.out.println("Frames per second AS BigInteger === " + jMetaDataText.getFrameRateAsBigInteger());
        System.out.println("Frames per second AS URL === " + jMetaDataText.getFrameRateAsURL());
        System.out.println("How this stream is muxed in the container AS Integer === " + jMetaDataText.getMuxingModeAsInteger());
        System.out.println("How this stream is muxed in the container AS Long === " + jMetaDataText.getMuxingModeAsLong());
        System.out.println("How this stream is muxed in the container AS LocalDateTime === " + jMetaDataText.getMuxingModeAsLocalDateTime());
        System.out.println("How this stream is muxed in the container AS LocalTime === " + jMetaDataText.getMuxingModeAsLocalTime());
        System.out.println("How this stream is muxed in the container AS String === " + jMetaDataText.getMuxingModeAsString());
        System.out.println("How this stream is muxed in the container AS Boolean === " + jMetaDataText.getMuxingModeAsBoolean());
        System.out.println("How this stream is muxed in the container AS BigInteger === " + jMetaDataText.getMuxingModeAsBigInteger());
        System.out.println("How this stream is muxed in the container AS URL === " + jMetaDataText.getMuxingModeAsURL());
        System.out.println("Delay settings (in case of timecode for example) AS Integer === " + jMetaDataText.getDelaySettingsAsInteger());
        System.out.println("Delay settings (in case of timecode for example) AS Long === " + jMetaDataText.getDelaySettingsAsLong());
        System.out.println("Delay settings (in case of timecode for example) AS LocalDateTime === " + jMetaDataText.getDelaySettingsAsLocalDateTime());
        System.out.println("Delay settings (in case of timecode for example) AS LocalTime === " + jMetaDataText.getDelaySettingsAsLocalTime());
        System.out.println("Delay settings (in case of timecode for example) AS String === " + jMetaDataText.getDelaySettingsAsString());
        System.out.println("Delay settings (in case of timecode for example) AS Boolean === " + jMetaDataText.getDelaySettingsAsBoolean());
        System.out.println("Delay settings (in case of timecode for example) AS BigInteger === " + jMetaDataText.getDelaySettingsAsBigInteger());
        System.out.println("Delay settings (in case of timecode for example) AS URL === " + jMetaDataText.getDelaySettingsAsURL());
        System.out.println("Source Encoded Streamsize in bytes AS Integer === " + jMetaDataText.getSourceStreamSizeEncodedAsInteger());
        System.out.println("Source Encoded Streamsize in bytes AS Long === " + jMetaDataText.getSourceStreamSizeEncodedAsLong());
        System.out.println("Source Encoded Streamsize in bytes AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeEncodedAsLocalDateTime());
        System.out.println("Source Encoded Streamsize in bytes AS LocalTime === " + jMetaDataText.getSourceStreamSizeEncodedAsLocalTime());
        System.out.println("Source Encoded Streamsize in bytes AS String === " + jMetaDataText.getSourceStreamSizeEncodedAsString());
        System.out.println("Source Encoded Streamsize in bytes AS Boolean === " + jMetaDataText.getSourceStreamSizeEncodedAsBoolean());
        System.out.println("Source Encoded Streamsize in bytes AS BigInteger === " + jMetaDataText.getSourceStreamSizeEncodedAsBigInteger());
        System.out.println("Source Encoded Streamsize in bytes AS URL === " + jMetaDataText.getSourceStreamSizeEncodedAsURL());
        System.out.println("Bit rate mode (Constant, Variable) AS Integer === " + jMetaDataText.getBitRateModeStringAsInteger());
        System.out.println("Bit rate mode (Constant, Variable) AS Long === " + jMetaDataText.getBitRateModeStringAsLong());
        System.out.println("Bit rate mode (Constant, Variable) AS LocalDateTime === " + jMetaDataText.getBitRateModeStringAsLocalDateTime());
        System.out.println("Bit rate mode (Constant, Variable) AS LocalTime === " + jMetaDataText.getBitRateModeStringAsLocalTime());
        System.out.println("Bit rate mode (Constant, Variable) AS String === " + jMetaDataText.getBitRateModeStringAsString());
        System.out.println("Bit rate mode (Constant, Variable) AS Boolean === " + jMetaDataText.getBitRateModeStringAsBoolean());
        System.out.println("Bit rate mode (Constant, Variable) AS BigInteger === " + jMetaDataText.getBitRateModeStringAsBigInteger());
        System.out.println("Bit rate mode (Constant, Variable) AS URL === " + jMetaDataText.getBitRateModeStringAsURL());
        System.out.println("Minimum Frames per second (with measurement) AS Integer === " + jMetaDataText.getFrameRateMinimumStringAsInteger());
        System.out.println("Minimum Frames per second (with measurement) AS Long === " + jMetaDataText.getFrameRateMinimumStringAsLong());
        System.out.println("Minimum Frames per second (with measurement) AS LocalDateTime === " + jMetaDataText.getFrameRateMinimumStringAsLocalDateTime());
        System.out.println("Minimum Frames per second (with measurement) AS LocalTime === " + jMetaDataText.getFrameRateMinimumStringAsLocalTime());
        System.out.println("Minimum Frames per second (with measurement) AS String === " + jMetaDataText.getFrameRateMinimumStringAsString());
        System.out.println("Minimum Frames per second (with measurement) AS Boolean === " + jMetaDataText.getFrameRateMinimumStringAsBoolean());
        System.out.println("Minimum Frames per second (with measurement) AS BigInteger === " + jMetaDataText.getFrameRateMinimumStringAsBigInteger());
        System.out.println("Minimum Frames per second (with measurement) AS URL === " + jMetaDataText.getFrameRateMinimumStringAsURL());
        System.out.println("Version of encoding-software AS Integer === " + jMetaDataText.getEncodedLibraryVersionAsInteger());
        System.out.println("Version of encoding-software AS Long === " + jMetaDataText.getEncodedLibraryVersionAsLong());
        System.out.println("Version of encoding-software AS LocalDateTime === " + jMetaDataText.getEncodedLibraryVersionAsLocalDateTime());
        System.out.println("Version of encoding-software AS LocalTime === " + jMetaDataText.getEncodedLibraryVersionAsLocalTime());
        System.out.println("Version of encoding-software AS String === " + jMetaDataText.getEncodedLibraryVersionAsString());
        System.out.println("Version of encoding-software AS Boolean === " + jMetaDataText.getEncodedLibraryVersionAsBoolean());
        System.out.println("Version of encoding-software AS BigInteger === " + jMetaDataText.getEncodedLibraryVersionAsBigInteger());
        System.out.println("Version of encoding-software AS URL === " + jMetaDataText.getEncodedLibraryVersionAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getSourceDurationLastFrameStringAsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getSourceDurationLastFrameStringAsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationLastFrameStringAsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationLastFrameStringAsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getSourceDurationLastFrameStringAsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getSourceDurationLastFrameStringAsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationLastFrameStringAsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getSourceDurationLastFrameStringAsURL());
        System.out.println("Info about codec ID AS Integer === " + jMetaDataText.getCodecIDInfoAsInteger());
        System.out.println("Info about codec ID AS Long === " + jMetaDataText.getCodecIDInfoAsLong());
        System.out.println("Info about codec ID AS LocalDateTime === " + jMetaDataText.getCodecIDInfoAsLocalDateTime());
        System.out.println("Info about codec ID AS LocalTime === " + jMetaDataText.getCodecIDInfoAsLocalTime());
        System.out.println("Info about codec ID AS String === " + jMetaDataText.getCodecIDInfoAsString());
        System.out.println("Info about codec ID AS Boolean === " + jMetaDataText.getCodecIDInfoAsBoolean());
        System.out.println("Info about codec ID AS BigInteger === " + jMetaDataText.getCodecIDInfoAsBigInteger());
        System.out.println("Info about codec ID AS URL === " + jMetaDataText.getCodecIDInfoAsURL());
        System.out.println("Streamsize in bytes AS Integer === " + jMetaDataText.getStreamSizeAsInteger());
        System.out.println("Streamsize in bytes AS Long === " + jMetaDataText.getStreamSizeAsLong());
        System.out.println("Streamsize in bytes AS LocalDateTime === " + jMetaDataText.getStreamSizeAsLocalDateTime());
        System.out.println("Streamsize in bytes AS LocalTime === " + jMetaDataText.getStreamSizeAsLocalTime());
        System.out.println("Streamsize in bytes AS String === " + jMetaDataText.getStreamSizeAsString());
        System.out.println("Streamsize in bytes AS Boolean === " + jMetaDataText.getStreamSizeAsBoolean());
        System.out.println("Streamsize in bytes AS BigInteger === " + jMetaDataText.getStreamSizeAsBigInteger());
        System.out.println("Streamsize in bytes AS URL === " + jMetaDataText.getStreamSizeAsURL());
        System.out.println("Width/String AS Integer === " + jMetaDataText.getWidthStringAsInteger());
        System.out.println("Width/String AS Long === " + jMetaDataText.getWidthStringAsLong());
        System.out.println("Width/String AS LocalDateTime === " + jMetaDataText.getWidthStringAsLocalDateTime());
        System.out.println("Width/String AS LocalTime === " + jMetaDataText.getWidthStringAsLocalTime());
        System.out.println("Width/String AS String === " + jMetaDataText.getWidthStringAsString());
        System.out.println("Width/String AS Boolean === " + jMetaDataText.getWidthStringAsBoolean());
        System.out.println("Width/String AS BigInteger === " + jMetaDataText.getWidthStringAsBigInteger());
        System.out.println("Width/String AS URL === " + jMetaDataText.getWidthStringAsURL());
        System.out.println("Info about Format AS Integer === " + jMetaDataText.getFormatInfoAsInteger());
        System.out.println("Info about Format AS Long === " + jMetaDataText.getFormatInfoAsLong());
        System.out.println("Info about Format AS LocalDateTime === " + jMetaDataText.getFormatInfoAsLocalDateTime());
        System.out.println("Info about Format AS LocalTime === " + jMetaDataText.getFormatInfoAsLocalTime());
        System.out.println("Info about Format AS String === " + jMetaDataText.getFormatInfoAsString());
        System.out.println("Info about Format AS Boolean === " + jMetaDataText.getFormatInfoAsBoolean());
        System.out.println("Info about Format AS BigInteger === " + jMetaDataText.getFormatInfoAsBigInteger());
        System.out.println("Info about Format AS URL === " + jMetaDataText.getFormatInfoAsURL());
        System.out.println("Source_StreamSize/String1 AS Integer === " + jMetaDataText.getSourceStreamSizeString1AsInteger());
        System.out.println("Source_StreamSize/String1 AS Long === " + jMetaDataText.getSourceStreamSizeString1AsLong());
        System.out.println("Source_StreamSize/String1 AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeString1AsLocalDateTime());
        System.out.println("Source_StreamSize/String1 AS LocalTime === " + jMetaDataText.getSourceStreamSizeString1AsLocalTime());
        System.out.println("Source_StreamSize/String1 AS String === " + jMetaDataText.getSourceStreamSizeString1AsString());
        System.out.println("Source_StreamSize/String1 AS Boolean === " + jMetaDataText.getSourceStreamSizeString1AsBoolean());
        System.out.println("Source_StreamSize/String1 AS BigInteger === " + jMetaDataText.getSourceStreamSizeString1AsBigInteger());
        System.out.println("Source_StreamSize/String1 AS URL === " + jMetaDataText.getSourceStreamSizeString1AsURL());
        System.out.println("Source Stream size divided by file size AS Integer === " + jMetaDataText.getSourceStreamSizeProportionAsInteger());
        System.out.println("Source Stream size divided by file size AS Long === " + jMetaDataText.getSourceStreamSizeProportionAsLong());
        System.out.println("Source Stream size divided by file size AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeProportionAsLocalDateTime());
        System.out.println("Source Stream size divided by file size AS LocalTime === " + jMetaDataText.getSourceStreamSizeProportionAsLocalTime());
        System.out.println("Source Stream size divided by file size AS String === " + jMetaDataText.getSourceStreamSizeProportionAsString());
        System.out.println("Source Stream size divided by file size AS Boolean === " + jMetaDataText.getSourceStreamSizeProportionAsBoolean());
        System.out.println("Source Stream size divided by file size AS BigInteger === " + jMetaDataText.getSourceStreamSizeProportionAsBigInteger());
        System.out.println("Source Stream size divided by file size AS URL === " + jMetaDataText.getSourceStreamSizeProportionAsURL());
        System.out.println("A link for more details about this codec ID AS Integer === " + jMetaDataText.getCodecIDUrlAsInteger());
        System.out.println("A link for more details about this codec ID AS Long === " + jMetaDataText.getCodecIDUrlAsLong());
        System.out.println("A link for more details about this codec ID AS LocalDateTime === " + jMetaDataText.getCodecIDUrlAsLocalDateTime());
        System.out.println("A link for more details about this codec ID AS LocalTime === " + jMetaDataText.getCodecIDUrlAsLocalTime());
        System.out.println("A link for more details about this codec ID AS String === " + jMetaDataText.getCodecIDUrlAsString());
        System.out.println("A link for more details about this codec ID AS Boolean === " + jMetaDataText.getCodecIDUrlAsBoolean());
        System.out.println("A link for more details about this codec ID AS BigInteger === " + jMetaDataText.getCodecIDUrlAsBigInteger());
        System.out.println("A link for more details about this codec ID AS URL === " + jMetaDataText.getCodecIDUrlAsURL());
        System.out.println("Source_StreamSize/String2 AS Integer === " + jMetaDataText.getSourceStreamSizeString2AsInteger());
        System.out.println("Source_StreamSize/String2 AS Long === " + jMetaDataText.getSourceStreamSizeString2AsLong());
        System.out.println("Source_StreamSize/String2 AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeString2AsLocalDateTime());
        System.out.println("Source_StreamSize/String2 AS LocalTime === " + jMetaDataText.getSourceStreamSizeString2AsLocalTime());
        System.out.println("Source_StreamSize/String2 AS String === " + jMetaDataText.getSourceStreamSizeString2AsString());
        System.out.println("Source_StreamSize/String2 AS Boolean === " + jMetaDataText.getSourceStreamSizeString2AsBoolean());
        System.out.println("Source_StreamSize/String2 AS BigInteger === " + jMetaDataText.getSourceStreamSizeString2AsBigInteger());
        System.out.println("Source_StreamSize/String2 AS URL === " + jMetaDataText.getSourceStreamSizeString2AsURL());
        System.out.println("Height/String AS Integer === " + jMetaDataText.getHeightStringAsInteger());
        System.out.println("Height/String AS Long === " + jMetaDataText.getHeightStringAsLong());
        System.out.println("Height/String AS LocalDateTime === " + jMetaDataText.getHeightStringAsLocalDateTime());
        System.out.println("Height/String AS LocalTime === " + jMetaDataText.getHeightStringAsLocalTime());
        System.out.println("Height/String AS String === " + jMetaDataText.getHeightStringAsString());
        System.out.println("Height/String AS Boolean === " + jMetaDataText.getHeightStringAsBoolean());
        System.out.println("Height/String AS BigInteger === " + jMetaDataText.getHeightStringAsBigInteger());
        System.out.println("Height/String AS URL === " + jMetaDataText.getHeightStringAsURL());
        System.out.println("Source Streamsize in with percentage value AS Integer === " + jMetaDataText.getSourceStreamSizeString5AsInteger());
        System.out.println("Source Streamsize in with percentage value AS Long === " + jMetaDataText.getSourceStreamSizeString5AsLong());
        System.out.println("Source Streamsize in with percentage value AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeString5AsLocalDateTime());
        System.out.println("Source Streamsize in with percentage value AS LocalTime === " + jMetaDataText.getSourceStreamSizeString5AsLocalTime());
        System.out.println("Source Streamsize in with percentage value AS String === " + jMetaDataText.getSourceStreamSizeString5AsString());
        System.out.println("Source Streamsize in with percentage value AS Boolean === " + jMetaDataText.getSourceStreamSizeString5AsBoolean());
        System.out.println("Source Streamsize in with percentage value AS BigInteger === " + jMetaDataText.getSourceStreamSizeString5AsBigInteger());
        System.out.println("Source Streamsize in with percentage value AS URL === " + jMetaDataText.getSourceStreamSizeString5AsURL());
        System.out.println("Source_StreamSize/String3 AS Integer === " + jMetaDataText.getSourceStreamSizeString3AsInteger());
        System.out.println("Source_StreamSize/String3 AS Long === " + jMetaDataText.getSourceStreamSizeString3AsLong());
        System.out.println("Source_StreamSize/String3 AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeString3AsLocalDateTime());
        System.out.println("Source_StreamSize/String3 AS LocalTime === " + jMetaDataText.getSourceStreamSizeString3AsLocalTime());
        System.out.println("Source_StreamSize/String3 AS String === " + jMetaDataText.getSourceStreamSizeString3AsString());
        System.out.println("Source_StreamSize/String3 AS Boolean === " + jMetaDataText.getSourceStreamSizeString3AsBoolean());
        System.out.println("Source_StreamSize/String3 AS BigInteger === " + jMetaDataText.getSourceStreamSizeString3AsBigInteger());
        System.out.println("Source_StreamSize/String3 AS URL === " + jMetaDataText.getSourceStreamSizeString3AsURL());
        System.out.println("Source_StreamSize/String4 AS Integer === " + jMetaDataText.getSourceStreamSizeString4AsInteger());
        System.out.println("Source_StreamSize/String4 AS Long === " + jMetaDataText.getSourceStreamSizeString4AsLong());
        System.out.println("Source_StreamSize/String4 AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeString4AsLocalDateTime());
        System.out.println("Source_StreamSize/String4 AS LocalTime === " + jMetaDataText.getSourceStreamSizeString4AsLocalTime());
        System.out.println("Source_StreamSize/String4 AS String === " + jMetaDataText.getSourceStreamSizeString4AsString());
        System.out.println("Source_StreamSize/String4 AS Boolean === " + jMetaDataText.getSourceStreamSizeString4AsBoolean());
        System.out.println("Source_StreamSize/String4 AS BigInteger === " + jMetaDataText.getSourceStreamSizeString4AsBigInteger());
        System.out.println("Source_StreamSize/String4 AS URL === " + jMetaDataText.getSourceStreamSizeString4AsURL());
        System.out.println("Set if that track should not be used AS Integer === " + jMetaDataText.getDisabledStringAsInteger());
        System.out.println("Set if that track should not be used AS Long === " + jMetaDataText.getDisabledStringAsLong());
        System.out.println("Set if that track should not be used AS LocalDateTime === " + jMetaDataText.getDisabledStringAsLocalDateTime());
        System.out.println("Set if that track should not be used AS LocalTime === " + jMetaDataText.getDisabledStringAsLocalTime());
        System.out.println("Set if that track should not be used AS String === " + jMetaDataText.getDisabledStringAsString());
        System.out.println("Set if that track should not be used AS Boolean === " + jMetaDataText.getDisabledStringAsBoolean());
        System.out.println("Set if that track should not be used AS BigInteger === " + jMetaDataText.getDisabledStringAsBigInteger());
        System.out.println("Set if that track should not be used AS URL === " + jMetaDataText.getDisabledStringAsURL());
        System.out.println("Operating System of encoding-software AS Integer === " + jMetaDataText.getEncodedOperatingSystemAsInteger());
        System.out.println("Operating System of encoding-software AS Long === " + jMetaDataText.getEncodedOperatingSystemAsLong());
        System.out.println("Operating System of encoding-software AS LocalDateTime === " + jMetaDataText.getEncodedOperatingSystemAsLocalDateTime());
        System.out.println("Operating System of encoding-software AS LocalTime === " + jMetaDataText.getEncodedOperatingSystemAsLocalTime());
        System.out.println("Operating System of encoding-software AS String === " + jMetaDataText.getEncodedOperatingSystemAsString());
        System.out.println("Operating System of encoding-software AS Boolean === " + jMetaDataText.getEncodedOperatingSystemAsBoolean());
        System.out.println("Operating System of encoding-software AS BigInteger === " + jMetaDataText.getEncodedOperatingSystemAsBigInteger());
        System.out.println("Operating System of encoding-software AS URL === " + jMetaDataText.getEncodedOperatingSystemAsURL());
        System.out.println("Name of the company AS Integer === " + jMetaDataText.getEncodedApplicationCompanyNameAsInteger());
        System.out.println("Name of the company AS Long === " + jMetaDataText.getEncodedApplicationCompanyNameAsLong());
        System.out.println("Name of the company AS LocalDateTime === " + jMetaDataText.getEncodedApplicationCompanyNameAsLocalDateTime());
        System.out.println("Name of the company AS LocalTime === " + jMetaDataText.getEncodedApplicationCompanyNameAsLocalTime());
        System.out.println("Name of the company AS String === " + jMetaDataText.getEncodedApplicationCompanyNameAsString());
        System.out.println("Name of the company AS Boolean === " + jMetaDataText.getEncodedApplicationCompanyNameAsBoolean());
        System.out.println("Name of the company AS BigInteger === " + jMetaDataText.getEncodedApplicationCompanyNameAsBigInteger());
        System.out.println("Name of the company AS URL === " + jMetaDataText.getEncodedApplicationCompanyNameAsURL());
        System.out.println("Current stream size divided by uncompressed stream size AS Integer === " + jMetaDataText.getCompressionRatioAsInteger());
        System.out.println("Current stream size divided by uncompressed stream size AS Long === " + jMetaDataText.getCompressionRatioAsLong());
        System.out.println("Current stream size divided by uncompressed stream size AS LocalDateTime === " + jMetaDataText.getCompressionRatioAsLocalDateTime());
        System.out.println("Current stream size divided by uncompressed stream size AS LocalTime === " + jMetaDataText.getCompressionRatioAsLocalTime());
        System.out.println("Current stream size divided by uncompressed stream size AS String === " + jMetaDataText.getCompressionRatioAsString());
        System.out.println("Current stream size divided by uncompressed stream size AS Boolean === " + jMetaDataText.getCompressionRatioAsBoolean());
        System.out.println("Current stream size divided by uncompressed stream size AS BigInteger === " + jMetaDataText.getCompressionRatioAsBigInteger());
        System.out.println("Current stream size divided by uncompressed stream size AS URL === " + jMetaDataText.getCompressionRatioAsURL());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Integer === " + jMetaDataText.getFormatCommercialIfAnyAsInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Long === " + jMetaDataText.getFormatCommercialIfAnyAsLong());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalDateTime === " + jMetaDataText.getFormatCommercialIfAnyAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalTime === " + jMetaDataText.getFormatCommercialIfAnyAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS String === " + jMetaDataText.getFormatCommercialIfAnyAsString());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Boolean === " + jMetaDataText.getFormatCommercialIfAnyAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS BigInteger === " + jMetaDataText.getFormatCommercialIfAnyAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS URL === " + jMetaDataText.getFormatCommercialIfAnyAsURL());
        System.out.println("The time that the tags were done for this item. AS Integer === " + jMetaDataText.getTaggedDateAsInteger());
        System.out.println("The time that the tags were done for this item. AS Long === " + jMetaDataText.getTaggedDateAsLong());
        System.out.println("The time that the tags were done for this item. AS LocalDateTime === " + jMetaDataText.getTaggedDateAsLocalDateTime());
        System.out.println("The time that the tags were done for this item. AS LocalTime === " + jMetaDataText.getTaggedDateAsLocalTime());
        System.out.println("The time that the tags were done for this item. AS String === " + jMetaDataText.getTaggedDateAsString());
        System.out.println("The time that the tags were done for this item. AS Boolean === " + jMetaDataText.getTaggedDateAsBoolean());
        System.out.println("The time that the tags were done for this item. AS BigInteger === " + jMetaDataText.getTaggedDateAsBigInteger());
        System.out.println("The time that the tags were done for this item. AS URL === " + jMetaDataText.getTaggedDateAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataText.getIDStringAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataText.getIDStringAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataText.getIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataText.getIDStringAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataText.getIDStringAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataText.getIDStringAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataText.getIDStringAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataText.getIDStringAsURL());
        System.out.println("Compression mode (Lossy or Lossless) AS Integer === " + jMetaDataText.getCompressionModeAsInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS Long === " + jMetaDataText.getCompressionModeAsLong());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalDateTime === " + jMetaDataText.getCompressionModeAsLocalDateTime());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalTime === " + jMetaDataText.getCompressionModeAsLocalTime());
        System.out.println("Compression mode (Lossy or Lossless) AS String === " + jMetaDataText.getCompressionModeAsString());
        System.out.println("Compression mode (Lossy or Lossless) AS Boolean === " + jMetaDataText.getCompressionModeAsBoolean());
        System.out.println("Compression mode (Lossy or Lossless) AS BigInteger === " + jMetaDataText.getCompressionModeAsBigInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS URL === " + jMetaDataText.getCompressionModeAsURL());
        System.out.println("Bit rate in bps AS Integer === " + jMetaDataText.getBitRateAsInteger());
        System.out.println("Bit rate in bps AS Long === " + jMetaDataText.getBitRateAsLong());
        System.out.println("Bit rate in bps AS LocalDateTime === " + jMetaDataText.getBitRateAsLocalDateTime());
        System.out.println("Bit rate in bps AS LocalTime === " + jMetaDataText.getBitRateAsLocalTime());
        System.out.println("Bit rate in bps AS String === " + jMetaDataText.getBitRateAsString());
        System.out.println("Bit rate in bps AS Boolean === " + jMetaDataText.getBitRateAsBoolean());
        System.out.println("Bit rate in bps AS BigInteger === " + jMetaDataText.getBitRateAsBigInteger());
        System.out.println("Bit rate in bps AS URL === " + jMetaDataText.getBitRateAsURL());
        System.out.println("The time that the encoding of this item was completed began. AS Integer === " + jMetaDataText.getEncodedDateAsInteger());
        System.out.println("The time that the encoding of this item was completed began. AS Long === " + jMetaDataText.getEncodedDateAsLong());
        System.out.println("The time that the encoding of this item was completed began. AS LocalDateTime === " + jMetaDataText.getEncodedDateAsLocalDateTime());
        System.out.println("The time that the encoding of this item was completed began. AS LocalTime === " + jMetaDataText.getEncodedDateAsLocalTime());
        System.out.println("The time that the encoding of this item was completed began. AS String === " + jMetaDataText.getEncodedDateAsString());
        System.out.println("The time that the encoding of this item was completed began. AS Boolean === " + jMetaDataText.getEncodedDateAsBoolean());
        System.out.println("The time that the encoding of this item was completed began. AS BigInteger === " + jMetaDataText.getEncodedDateAsBigInteger());
        System.out.println("The time that the encoding of this item was completed began. AS URL === " + jMetaDataText.getEncodedDateAsURL());
        System.out.println("Bit rate mode (VBR, CBR) AS Integer === " + jMetaDataText.getBitRateModeAsInteger());
        System.out.println("Bit rate mode (VBR, CBR) AS Long === " + jMetaDataText.getBitRateModeAsLong());
        System.out.println("Bit rate mode (VBR, CBR) AS LocalDateTime === " + jMetaDataText.getBitRateModeAsLocalDateTime());
        System.out.println("Bit rate mode (VBR, CBR) AS LocalTime === " + jMetaDataText.getBitRateModeAsLocalTime());
        System.out.println("Bit rate mode (VBR, CBR) AS String === " + jMetaDataText.getBitRateModeAsString());
        System.out.println("Bit rate mode (VBR, CBR) AS Boolean === " + jMetaDataText.getBitRateModeAsBoolean());
        System.out.println("Bit rate mode (VBR, CBR) AS BigInteger === " + jMetaDataText.getBitRateModeAsBigInteger());
        System.out.println("Bit rate mode (VBR, CBR) AS URL === " + jMetaDataText.getBitRateModeAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataText.getUniqueIDAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataText.getUniqueIDAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataText.getUniqueIDAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataText.getUniqueIDAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataText.getUniqueIDAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataText.getUniqueIDAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataText.getUniqueIDAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataText.getUniqueIDAsURL());
        System.out.println("Maximum Bit rate (with measurement) AS Integer === " + jMetaDataText.getBitRateMaximumStringAsInteger());
        System.out.println("Maximum Bit rate (with measurement) AS Long === " + jMetaDataText.getBitRateMaximumStringAsLong());
        System.out.println("Maximum Bit rate (with measurement) AS LocalDateTime === " + jMetaDataText.getBitRateMaximumStringAsLocalDateTime());
        System.out.println("Maximum Bit rate (with measurement) AS LocalTime === " + jMetaDataText.getBitRateMaximumStringAsLocalTime());
        System.out.println("Maximum Bit rate (with measurement) AS String === " + jMetaDataText.getBitRateMaximumStringAsString());
        System.out.println("Maximum Bit rate (with measurement) AS Boolean === " + jMetaDataText.getBitRateMaximumStringAsBoolean());
        System.out.println("Maximum Bit rate (with measurement) AS BigInteger === " + jMetaDataText.getBitRateMaximumStringAsBigInteger());
        System.out.println("Maximum Bit rate (with measurement) AS URL === " + jMetaDataText.getBitRateMaximumStringAsURL());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Integer === " + jMetaDataText.getDelayString3AsInteger());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Long === " + jMetaDataText.getDelayString3AsLong());
        System.out.println("Delay in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataText.getDelayString3AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataText.getDelayString3AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.MMM AS String === " + jMetaDataText.getDelayString3AsString());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataText.getDelayString3AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataText.getDelayString3AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.MMM AS URL === " + jMetaDataText.getDelayString3AsURL());
        System.out.println("Video_Delay/String AS Integer === " + jMetaDataText.getVideoDelayStringAsInteger());
        System.out.println("Video_Delay/String AS Long === " + jMetaDataText.getVideoDelayStringAsLong());
        System.out.println("Video_Delay/String AS LocalDateTime === " + jMetaDataText.getVideoDelayStringAsLocalDateTime());
        System.out.println("Video_Delay/String AS LocalTime === " + jMetaDataText.getVideoDelayStringAsLocalTime());
        System.out.println("Video_Delay/String AS String === " + jMetaDataText.getVideoDelayStringAsString());
        System.out.println("Video_Delay/String AS Boolean === " + jMetaDataText.getVideoDelayStringAsBoolean());
        System.out.println("Video_Delay/String AS BigInteger === " + jMetaDataText.getVideoDelayStringAsBigInteger());
        System.out.println("Video_Delay/String AS URL === " + jMetaDataText.getVideoDelayStringAsURL());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataText.getDelayString4AsInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataText.getDelayString4AsLong());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataText.getDelayString4AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataText.getDelayString4AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataText.getDelayString4AsString());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataText.getDelayString4AsBoolean());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataText.getDelayString4AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataText.getDelayString4AsURL());
        System.out.println("ColorSpace AS Integer === " + jMetaDataText.getColorSpaceAsInteger());
        System.out.println("ColorSpace AS Long === " + jMetaDataText.getColorSpaceAsLong());
        System.out.println("ColorSpace AS LocalDateTime === " + jMetaDataText.getColorSpaceAsLocalDateTime());
        System.out.println("ColorSpace AS LocalTime === " + jMetaDataText.getColorSpaceAsLocalTime());
        System.out.println("ColorSpace AS String === " + jMetaDataText.getColorSpaceAsString());
        System.out.println("ColorSpace AS Boolean === " + jMetaDataText.getColorSpaceAsBoolean());
        System.out.println("ColorSpace AS BigInteger === " + jMetaDataText.getColorSpaceAsBigInteger());
        System.out.println("ColorSpace AS URL === " + jMetaDataText.getColorSpaceAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataText.getDelayString1AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataText.getDelayString1AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataText.getDelayString1AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataText.getDelayString1AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataText.getDelayString1AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataText.getDelayString1AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataText.getDelayString1AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataText.getDelayString1AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataText.getDelayString2AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataText.getDelayString2AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataText.getDelayString2AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataText.getDelayString2AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataText.getDelayString2AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataText.getDelayString2AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataText.getDelayString2AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataText.getDelayString2AsURL());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataText.getDelayString5AsInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataText.getDelayString5AsLong());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataText.getDelayString5AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataText.getDelayString5AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataText.getDelayString5AsString());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataText.getDelayString5AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataText.getDelayString5AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataText.getDelayString5AsURL());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Integer === " + jMetaDataText.getDelayAsInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Long === " + jMetaDataText.getDelayAsLong());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalDateTime === " + jMetaDataText.getDelayAsLocalDateTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalTime === " + jMetaDataText.getDelayAsLocalTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS String === " + jMetaDataText.getDelayAsString());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Boolean === " + jMetaDataText.getDelayAsBoolean());
        System.out.println("Delay fixed in the stream (relative) IN MS AS BigInteger === " + jMetaDataText.getDelayAsBigInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS URL === " + jMetaDataText.getDelayAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Integer === " + jMetaDataText.getEncodedApplicationUrlAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Long === " + jMetaDataText.getEncodedApplicationUrlAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS LocalDateTime === " + jMetaDataText.getEncodedApplicationUrlAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS LocalTime === " + jMetaDataText.getEncodedApplicationUrlAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS String === " + jMetaDataText.getEncodedApplicationUrlAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Boolean === " + jMetaDataText.getEncodedApplicationUrlAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS BigInteger === " + jMetaDataText.getEncodedApplicationUrlAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS URL === " + jMetaDataText.getEncodedApplicationUrlAsURL());
        System.out.println("Source_StreamSize_Encoded/String4 AS Integer === " + jMetaDataText.getSourceStreamSizeEncodedString4AsInteger());
        System.out.println("Source_StreamSize_Encoded/String4 AS Long === " + jMetaDataText.getSourceStreamSizeEncodedString4AsLong());
        System.out.println("Source_StreamSize_Encoded/String4 AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeEncodedString4AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String4 AS LocalTime === " + jMetaDataText.getSourceStreamSizeEncodedString4AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String4 AS String === " + jMetaDataText.getSourceStreamSizeEncodedString4AsString());
        System.out.println("Source_StreamSize_Encoded/String4 AS Boolean === " + jMetaDataText.getSourceStreamSizeEncodedString4AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String4 AS BigInteger === " + jMetaDataText.getSourceStreamSizeEncodedString4AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String4 AS URL === " + jMetaDataText.getSourceStreamSizeEncodedString4AsURL());
        System.out.println("Source Encoded Streamsize in with percentage value AS Integer === " + jMetaDataText.getSourceStreamSizeEncodedString5AsInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS Long === " + jMetaDataText.getSourceStreamSizeEncodedString5AsLong());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeEncodedString5AsLocalDateTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataText.getSourceStreamSizeEncodedString5AsLocalTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS String === " + jMetaDataText.getSourceStreamSizeEncodedString5AsString());
        System.out.println("Source Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataText.getSourceStreamSizeEncodedString5AsBoolean());
        System.out.println("Source Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataText.getSourceStreamSizeEncodedString5AsBigInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS URL === " + jMetaDataText.getSourceStreamSizeEncodedString5AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataText.getSourceDurationFirstFrameString1AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataText.getSourceDurationFirstFrameString1AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationFirstFrameString1AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationFirstFrameString1AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataText.getSourceDurationFirstFrameString1AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataText.getSourceDurationFirstFrameString1AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationFirstFrameString1AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataText.getSourceDurationFirstFrameString1AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getSourceDurationFirstFrameString2AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getSourceDurationFirstFrameString2AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationFirstFrameString2AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationFirstFrameString2AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getSourceDurationFirstFrameString2AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getSourceDurationFirstFrameString2AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationFirstFrameString2AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getSourceDurationFirstFrameString2AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataText.getSourceDurationFirstFrameString3AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataText.getSourceDurationFirstFrameString3AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataText.getSourceDurationFirstFrameString3AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataText.getSourceDurationFirstFrameString3AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataText.getSourceDurationFirstFrameString3AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataText.getSourceDurationFirstFrameString3AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataText.getSourceDurationFirstFrameString3AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataText.getSourceDurationFirstFrameString3AsURL());
        System.out.println("Software used to create the file AS Integer === " + jMetaDataText.getEncodedLibraryAsInteger());
        System.out.println("Software used to create the file AS Long === " + jMetaDataText.getEncodedLibraryAsLong());
        System.out.println("Software used to create the file AS LocalDateTime === " + jMetaDataText.getEncodedLibraryAsLocalDateTime());
        System.out.println("Software used to create the file AS LocalTime === " + jMetaDataText.getEncodedLibraryAsLocalTime());
        System.out.println("Software used to create the file AS String === " + jMetaDataText.getEncodedLibraryAsString());
        System.out.println("Software used to create the file AS Boolean === " + jMetaDataText.getEncodedLibraryAsBoolean());
        System.out.println("Software used to create the file AS BigInteger === " + jMetaDataText.getEncodedLibraryAsBigInteger());
        System.out.println("Software used to create the file AS URL === " + jMetaDataText.getEncodedLibraryAsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataText.getSourceDurationFirstFrameString4AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataText.getSourceDurationFirstFrameString4AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataText.getSourceDurationFirstFrameString4AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataText.getSourceDurationFirstFrameString4AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataText.getSourceDurationFirstFrameString4AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataText.getSourceDurationFirstFrameString4AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataText.getSourceDurationFirstFrameString4AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataText.getSourceDurationFirstFrameString4AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataText.getSourceDurationFirstFrameString5AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataText.getSourceDurationFirstFrameString5AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataText.getSourceDurationFirstFrameString5AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataText.getSourceDurationFirstFrameString5AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataText.getSourceDurationFirstFrameString5AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataText.getSourceDurationFirstFrameString5AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataText.getSourceDurationFirstFrameString5AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataText.getSourceDurationFirstFrameString5AsURL());
        System.out.println("Nominal Frames per second AS Integer === " + jMetaDataText.getFrameRateNominalAsInteger());
        System.out.println("Nominal Frames per second AS Long === " + jMetaDataText.getFrameRateNominalAsLong());
        System.out.println("Nominal Frames per second AS LocalDateTime === " + jMetaDataText.getFrameRateNominalAsLocalDateTime());
        System.out.println("Nominal Frames per second AS LocalTime === " + jMetaDataText.getFrameRateNominalAsLocalTime());
        System.out.println("Nominal Frames per second AS String === " + jMetaDataText.getFrameRateNominalAsString());
        System.out.println("Nominal Frames per second AS Boolean === " + jMetaDataText.getFrameRateNominalAsBoolean());
        System.out.println("Nominal Frames per second AS BigInteger === " + jMetaDataText.getFrameRateNominalAsBigInteger());
        System.out.println("Nominal Frames per second AS URL === " + jMetaDataText.getFrameRateNominalAsURL());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Integer === " + jMetaDataText.getInternetMediaTypeAsInteger());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Long === " + jMetaDataText.getInternetMediaTypeAsLong());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS LocalDateTime === " + jMetaDataText.getInternetMediaTypeAsLocalDateTime());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS LocalTime === " + jMetaDataText.getInternetMediaTypeAsLocalTime());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS String === " + jMetaDataText.getInternetMediaTypeAsString());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Boolean === " + jMetaDataText.getInternetMediaTypeAsBoolean());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS BigInteger === " + jMetaDataText.getInternetMediaTypeAsBigInteger());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS URL === " + jMetaDataText.getInternetMediaTypeAsURL());
        System.out.println("Source_StreamSize_Encoded/String2 AS Integer === " + jMetaDataText.getSourceStreamSizeEncodedString2AsInteger());
        System.out.println("Source_StreamSize_Encoded/String2 AS Long === " + jMetaDataText.getSourceStreamSizeEncodedString2AsLong());
        System.out.println("Source_StreamSize_Encoded/String2 AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeEncodedString2AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String2 AS LocalTime === " + jMetaDataText.getSourceStreamSizeEncodedString2AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String2 AS String === " + jMetaDataText.getSourceStreamSizeEncodedString2AsString());
        System.out.println("Source_StreamSize_Encoded/String2 AS Boolean === " + jMetaDataText.getSourceStreamSizeEncodedString2AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String2 AS BigInteger === " + jMetaDataText.getSourceStreamSizeEncodedString2AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String2 AS URL === " + jMetaDataText.getSourceStreamSizeEncodedString2AsURL());
        System.out.println("Set if that track should not be used AS Integer === " + jMetaDataText.getDisabledAsInteger());
        System.out.println("Set if that track should not be used AS Long === " + jMetaDataText.getDisabledAsLong());
        System.out.println("Set if that track should not be used AS LocalDateTime === " + jMetaDataText.getDisabledAsLocalDateTime());
        System.out.println("Set if that track should not be used AS LocalTime === " + jMetaDataText.getDisabledAsLocalTime());
        System.out.println("Set if that track should not be used AS String === " + jMetaDataText.getDisabledAsString());
        System.out.println("Set if that track should not be used AS Boolean === " + jMetaDataText.getDisabledAsBoolean());
        System.out.println("Set if that track should not be used AS BigInteger === " + jMetaDataText.getDisabledAsBigInteger());
        System.out.println("Set if that track should not be used AS URL === " + jMetaDataText.getDisabledAsURL());
        System.out.println("Frames per second, denominator AS Integer === " + jMetaDataText.getFrameRateDenAsInteger());
        System.out.println("Frames per second, denominator AS Long === " + jMetaDataText.getFrameRateDenAsLong());
        System.out.println("Frames per second, denominator AS LocalDateTime === " + jMetaDataText.getFrameRateDenAsLocalDateTime());
        System.out.println("Frames per second, denominator AS LocalTime === " + jMetaDataText.getFrameRateDenAsLocalTime());
        System.out.println("Frames per second, denominator AS String === " + jMetaDataText.getFrameRateDenAsString());
        System.out.println("Frames per second, denominator AS Boolean === " + jMetaDataText.getFrameRateDenAsBoolean());
        System.out.println("Frames per second, denominator AS BigInteger === " + jMetaDataText.getFrameRateDenAsBigInteger());
        System.out.println("Frames per second, denominator AS URL === " + jMetaDataText.getFrameRateDenAsURL());
        System.out.println("Source_StreamSize_Encoded/String3 AS Integer === " + jMetaDataText.getSourceStreamSizeEncodedString3AsInteger());
        System.out.println("Source_StreamSize_Encoded/String3 AS Long === " + jMetaDataText.getSourceStreamSizeEncodedString3AsLong());
        System.out.println("Source_StreamSize_Encoded/String3 AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeEncodedString3AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String3 AS LocalTime === " + jMetaDataText.getSourceStreamSizeEncodedString3AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String3 AS String === " + jMetaDataText.getSourceStreamSizeEncodedString3AsString());
        System.out.println("Source_StreamSize_Encoded/String3 AS Boolean === " + jMetaDataText.getSourceStreamSizeEncodedString3AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String3 AS BigInteger === " + jMetaDataText.getSourceStreamSizeEncodedString3AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String3 AS URL === " + jMetaDataText.getSourceStreamSizeEncodedString3AsURL());
        System.out.println("Maximum Frames per second (with measurement) AS Integer === " + jMetaDataText.getFrameRateMaximumStringAsInteger());
        System.out.println("Maximum Frames per second (with measurement) AS Long === " + jMetaDataText.getFrameRateMaximumStringAsLong());
        System.out.println("Maximum Frames per second (with measurement) AS LocalDateTime === " + jMetaDataText.getFrameRateMaximumStringAsLocalDateTime());
        System.out.println("Maximum Frames per second (with measurement) AS LocalTime === " + jMetaDataText.getFrameRateMaximumStringAsLocalTime());
        System.out.println("Maximum Frames per second (with measurement) AS String === " + jMetaDataText.getFrameRateMaximumStringAsString());
        System.out.println("Maximum Frames per second (with measurement) AS Boolean === " + jMetaDataText.getFrameRateMaximumStringAsBoolean());
        System.out.println("Maximum Frames per second (with measurement) AS BigInteger === " + jMetaDataText.getFrameRateMaximumStringAsBigInteger());
        System.out.println("Maximum Frames per second (with measurement) AS URL === " + jMetaDataText.getFrameRateMaximumStringAsURL());
        System.out.println("Encoded Stream size divided by file size AS Integer === " + jMetaDataText.getStreamSizeEncodedProportionAsInteger());
        System.out.println("Encoded Stream size divided by file size AS Long === " + jMetaDataText.getStreamSizeEncodedProportionAsLong());
        System.out.println("Encoded Stream size divided by file size AS LocalDateTime === " + jMetaDataText.getStreamSizeEncodedProportionAsLocalDateTime());
        System.out.println("Encoded Stream size divided by file size AS LocalTime === " + jMetaDataText.getStreamSizeEncodedProportionAsLocalTime());
        System.out.println("Encoded Stream size divided by file size AS String === " + jMetaDataText.getStreamSizeEncodedProportionAsString());
        System.out.println("Encoded Stream size divided by file size AS Boolean === " + jMetaDataText.getStreamSizeEncodedProportionAsBoolean());
        System.out.println("Encoded Stream size divided by file size AS BigInteger === " + jMetaDataText.getStreamSizeEncodedProportionAsBigInteger());
        System.out.println("Encoded Stream size divided by file size AS URL === " + jMetaDataText.getStreamSizeEncodedProportionAsURL());
        System.out.println("Source_StreamSize_Encoded/String1 AS Integer === " + jMetaDataText.getSourceStreamSizeEncodedString1AsInteger());
        System.out.println("Source_StreamSize_Encoded/String1 AS Long === " + jMetaDataText.getSourceStreamSizeEncodedString1AsLong());
        System.out.println("Source_StreamSize_Encoded/String1 AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeEncodedString1AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String1 AS LocalTime === " + jMetaDataText.getSourceStreamSizeEncodedString1AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String1 AS String === " + jMetaDataText.getSourceStreamSizeEncodedString1AsString());
        System.out.println("Source_StreamSize_Encoded/String1 AS Boolean === " + jMetaDataText.getSourceStreamSizeEncodedString1AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String1 AS BigInteger === " + jMetaDataText.getSourceStreamSizeEncodedString1AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String1 AS URL === " + jMetaDataText.getSourceStreamSizeEncodedString1AsURL());
        System.out.println("Play time of the stream, in ms AS Integer === " + jMetaDataText.getDurationAsInteger());
        System.out.println("Play time of the stream, in ms AS Long === " + jMetaDataText.getDurationAsLong());
        System.out.println("Play time of the stream, in ms AS LocalDateTime === " + jMetaDataText.getDurationAsLocalDateTime());
        System.out.println("Play time of the stream, in ms AS LocalTime === " + jMetaDataText.getDurationAsLocalTime());
        System.out.println("Play time of the stream, in ms AS String === " + jMetaDataText.getDurationAsString());
        System.out.println("Play time of the stream, in ms AS Boolean === " + jMetaDataText.getDurationAsBoolean());
        System.out.println("Play time of the stream, in ms AS BigInteger === " + jMetaDataText.getDurationAsBigInteger());
        System.out.println("Play time of the stream, in ms AS URL === " + jMetaDataText.getDurationAsURL());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataText.getSourceDurationString5AsInteger());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataText.getSourceDurationString5AsLong());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataText.getSourceDurationString5AsLocalDateTime());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataText.getSourceDurationString5AsLocalTime());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataText.getSourceDurationString5AsString());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataText.getSourceDurationString5AsBoolean());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataText.getSourceDurationString5AsBigInteger());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataText.getSourceDurationString5AsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getDurationLastFrameStringAsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getDurationLastFrameStringAsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getDurationLastFrameStringAsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getDurationLastFrameStringAsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getDurationLastFrameStringAsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getDurationLastFrameStringAsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getDurationLastFrameStringAsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getDurationLastFrameStringAsURL());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataText.getSourceDurationString4AsInteger());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataText.getSourceDurationString4AsLong());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataText.getSourceDurationString4AsLocalDateTime());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataText.getSourceDurationString4AsLocalTime());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataText.getSourceDurationString4AsString());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataText.getSourceDurationString4AsBoolean());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataText.getSourceDurationString4AsBigInteger());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataText.getSourceDurationString4AsURL());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Integer === " + jMetaDataText.getSourceDurationString3AsInteger());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Long === " + jMetaDataText.getSourceDurationString3AsLong());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataText.getSourceDurationString3AsLocalDateTime());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataText.getSourceDurationString3AsLocalTime());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS String === " + jMetaDataText.getSourceDurationString3AsString());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataText.getSourceDurationString3AsBoolean());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataText.getSourceDurationString3AsBigInteger());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS URL === " + jMetaDataText.getSourceDurationString3AsURL());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getSourceDurationString2AsInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getSourceDurationString2AsLong());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationString2AsLocalDateTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationString2AsLocalTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getSourceDurationString2AsString());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getSourceDurationString2AsBoolean());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationString2AsBigInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getSourceDurationString2AsURL());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataText.getSourceDurationString1AsInteger());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataText.getSourceDurationString1AsLong());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationString1AsLocalDateTime());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationString1AsLocalTime());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataText.getSourceDurationString1AsString());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataText.getSourceDurationString1AsBoolean());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationString1AsBigInteger());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataText.getSourceDurationString1AsURL());
        System.out.println("A hint for this codec ID AS Integer === " + jMetaDataText.getCodecIDHintAsInteger());
        System.out.println("A hint for this codec ID AS Long === " + jMetaDataText.getCodecIDHintAsLong());
        System.out.println("A hint for this codec ID AS LocalDateTime === " + jMetaDataText.getCodecIDHintAsLocalDateTime());
        System.out.println("A hint for this codec ID AS LocalTime === " + jMetaDataText.getCodecIDHintAsLocalTime());
        System.out.println("A hint for this codec ID AS String === " + jMetaDataText.getCodecIDHintAsString());
        System.out.println("A hint for this codec ID AS Boolean === " + jMetaDataText.getCodecIDHintAsBoolean());
        System.out.println("A hint for this codec ID AS BigInteger === " + jMetaDataText.getCodecIDHintAsBigInteger());
        System.out.println("A hint for this codec ID AS URL === " + jMetaDataText.getCodecIDHintAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Integer === " + jMetaDataText.getEncodedApplicationAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Long === " + jMetaDataText.getEncodedApplicationAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS LocalDateTime === " + jMetaDataText.getEncodedApplicationAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS LocalTime === " + jMetaDataText.getEncodedApplicationAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS String === " + jMetaDataText.getEncodedApplicationAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Boolean === " + jMetaDataText.getEncodedApplicationAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS BigInteger === " + jMetaDataText.getEncodedApplicationAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS URL === " + jMetaDataText.getEncodedApplicationAsURL());
        System.out.println("Compression mode (Lossy or Lossless) AS Integer === " + jMetaDataText.getCompressionModeStringAsInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS Long === " + jMetaDataText.getCompressionModeStringAsLong());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalDateTime === " + jMetaDataText.getCompressionModeStringAsLocalDateTime());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalTime === " + jMetaDataText.getCompressionModeStringAsLocalTime());
        System.out.println("Compression mode (Lossy or Lossless) AS String === " + jMetaDataText.getCompressionModeStringAsString());
        System.out.println("Compression mode (Lossy or Lossless) AS Boolean === " + jMetaDataText.getCompressionModeStringAsBoolean());
        System.out.println("Compression mode (Lossy or Lossless) AS BigInteger === " + jMetaDataText.getCompressionModeStringAsBigInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS URL === " + jMetaDataText.getCompressionModeStringAsURL());
        System.out.println("StreamSize/String2 AS Integer === " + jMetaDataText.getStreamSizeString2AsInteger());
        System.out.println("StreamSize/String2 AS Long === " + jMetaDataText.getStreamSizeString2AsLong());
        System.out.println("StreamSize/String2 AS LocalDateTime === " + jMetaDataText.getStreamSizeString2AsLocalDateTime());
        System.out.println("StreamSize/String2 AS LocalTime === " + jMetaDataText.getStreamSizeString2AsLocalTime());
        System.out.println("StreamSize/String2 AS String === " + jMetaDataText.getStreamSizeString2AsString());
        System.out.println("StreamSize/String2 AS Boolean === " + jMetaDataText.getStreamSizeString2AsBoolean());
        System.out.println("StreamSize/String2 AS BigInteger === " + jMetaDataText.getStreamSizeString2AsBigInteger());
        System.out.println("StreamSize/String2 AS URL === " + jMetaDataText.getStreamSizeString2AsURL());
        System.out.println("StreamSize/String1 AS Integer === " + jMetaDataText.getStreamSizeString1AsInteger());
        System.out.println("StreamSize/String1 AS Long === " + jMetaDataText.getStreamSizeString1AsLong());
        System.out.println("StreamSize/String1 AS LocalDateTime === " + jMetaDataText.getStreamSizeString1AsLocalDateTime());
        System.out.println("StreamSize/String1 AS LocalTime === " + jMetaDataText.getStreamSizeString1AsLocalTime());
        System.out.println("StreamSize/String1 AS String === " + jMetaDataText.getStreamSizeString1AsString());
        System.out.println("StreamSize/String1 AS Boolean === " + jMetaDataText.getStreamSizeString1AsBoolean());
        System.out.println("StreamSize/String1 AS BigInteger === " + jMetaDataText.getStreamSizeString1AsBigInteger());
        System.out.println("StreamSize/String1 AS URL === " + jMetaDataText.getStreamSizeString1AsURL());
        System.out.println("StreamSize/String4 AS Integer === " + jMetaDataText.getStreamSizeString4AsInteger());
        System.out.println("StreamSize/String4 AS Long === " + jMetaDataText.getStreamSizeString4AsLong());
        System.out.println("StreamSize/String4 AS LocalDateTime === " + jMetaDataText.getStreamSizeString4AsLocalDateTime());
        System.out.println("StreamSize/String4 AS LocalTime === " + jMetaDataText.getStreamSizeString4AsLocalTime());
        System.out.println("StreamSize/String4 AS String === " + jMetaDataText.getStreamSizeString4AsString());
        System.out.println("StreamSize/String4 AS Boolean === " + jMetaDataText.getStreamSizeString4AsBoolean());
        System.out.println("StreamSize/String4 AS BigInteger === " + jMetaDataText.getStreamSizeString4AsBigInteger());
        System.out.println("StreamSize/String4 AS URL === " + jMetaDataText.getStreamSizeString4AsURL());
        System.out.println("StreamSize/String3 AS Integer === " + jMetaDataText.getStreamSizeString3AsInteger());
        System.out.println("StreamSize/String3 AS Long === " + jMetaDataText.getStreamSizeString3AsLong());
        System.out.println("StreamSize/String3 AS LocalDateTime === " + jMetaDataText.getStreamSizeString3AsLocalDateTime());
        System.out.println("StreamSize/String3 AS LocalTime === " + jMetaDataText.getStreamSizeString3AsLocalTime());
        System.out.println("StreamSize/String3 AS String === " + jMetaDataText.getStreamSizeString3AsString());
        System.out.println("StreamSize/String3 AS Boolean === " + jMetaDataText.getStreamSizeString3AsBoolean());
        System.out.println("StreamSize/String3 AS BigInteger === " + jMetaDataText.getStreamSizeString3AsBigInteger());
        System.out.println("StreamSize/String3 AS URL === " + jMetaDataText.getStreamSizeString3AsURL());
        System.out.println("Streamsize in with percentage value AS Integer === " + jMetaDataText.getStreamSizeString5AsInteger());
        System.out.println("Streamsize in with percentage value AS Long === " + jMetaDataText.getStreamSizeString5AsLong());
        System.out.println("Streamsize in with percentage value AS LocalDateTime === " + jMetaDataText.getStreamSizeString5AsLocalDateTime());
        System.out.println("Streamsize in with percentage value AS LocalTime === " + jMetaDataText.getStreamSizeString5AsLocalTime());
        System.out.println("Streamsize in with percentage value AS String === " + jMetaDataText.getStreamSizeString5AsString());
        System.out.println("Streamsize in with percentage value AS Boolean === " + jMetaDataText.getStreamSizeString5AsBoolean());
        System.out.println("Streamsize in with percentage value AS BigInteger === " + jMetaDataText.getStreamSizeString5AsBigInteger());
        System.out.println("Streamsize in with percentage value AS URL === " + jMetaDataText.getStreamSizeString5AsURL());
        System.out.println("Minimum Frames per second AS Integer === " + jMetaDataText.getFrameRateMinimumAsInteger());
        System.out.println("Minimum Frames per second AS Long === " + jMetaDataText.getFrameRateMinimumAsLong());
        System.out.println("Minimum Frames per second AS LocalDateTime === " + jMetaDataText.getFrameRateMinimumAsLocalDateTime());
        System.out.println("Minimum Frames per second AS LocalTime === " + jMetaDataText.getFrameRateMinimumAsLocalTime());
        System.out.println("Minimum Frames per second AS String === " + jMetaDataText.getFrameRateMinimumAsString());
        System.out.println("Minimum Frames per second AS Boolean === " + jMetaDataText.getFrameRateMinimumAsBoolean());
        System.out.println("Minimum Frames per second AS BigInteger === " + jMetaDataText.getFrameRateMinimumAsBigInteger());
        System.out.println("Minimum Frames per second AS URL === " + jMetaDataText.getFrameRateMinimumAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataText.getStreamKindAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataText.getStreamKindAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataText.getStreamKindAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataText.getStreamKindAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataText.getStreamKindAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataText.getStreamKindAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataText.getStreamKindAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataText.getStreamKindAsURL());
        System.out.println("Bit rate (with measurement) AS Integer === " + jMetaDataText.getBitRateStringAsInteger());
        System.out.println("Bit rate (with measurement) AS Long === " + jMetaDataText.getBitRateStringAsLong());
        System.out.println("Bit rate (with measurement) AS LocalDateTime === " + jMetaDataText.getBitRateStringAsLocalDateTime());
        System.out.println("Bit rate (with measurement) AS LocalTime === " + jMetaDataText.getBitRateStringAsLocalTime());
        System.out.println("Bit rate (with measurement) AS String === " + jMetaDataText.getBitRateStringAsString());
        System.out.println("Bit rate (with measurement) AS Boolean === " + jMetaDataText.getBitRateStringAsBoolean());
        System.out.println("Bit rate (with measurement) AS BigInteger === " + jMetaDataText.getBitRateStringAsBigInteger());
        System.out.println("Bit rate (with measurement) AS URL === " + jMetaDataText.getBitRateStringAsURL());
        System.out.println("Frame rate mode (Constant, Variable) AS Integer === " + jMetaDataText.getFrameRateModeStringAsInteger());
        System.out.println("Frame rate mode (Constant, Variable) AS Long === " + jMetaDataText.getFrameRateModeStringAsLong());
        System.out.println("Frame rate mode (Constant, Variable) AS LocalDateTime === " + jMetaDataText.getFrameRateModeStringAsLocalDateTime());
        System.out.println("Frame rate mode (Constant, Variable) AS LocalTime === " + jMetaDataText.getFrameRateModeStringAsLocalTime());
        System.out.println("Frame rate mode (Constant, Variable) AS String === " + jMetaDataText.getFrameRateModeStringAsString());
        System.out.println("Frame rate mode (Constant, Variable) AS Boolean === " + jMetaDataText.getFrameRateModeStringAsBoolean());
        System.out.println("Frame rate mode (Constant, Variable) AS BigInteger === " + jMetaDataText.getFrameRateModeStringAsBigInteger());
        System.out.println("Frame rate mode (Constant, Variable) AS URL === " + jMetaDataText.getFrameRateModeStringAsURL());
        System.out.println("Language (full) AS Integer === " + jMetaDataText.getLanguageString1AsInteger());
        System.out.println("Language (full) AS Long === " + jMetaDataText.getLanguageString1AsLong());
        System.out.println("Language (full) AS LocalDateTime === " + jMetaDataText.getLanguageString1AsLocalDateTime());
        System.out.println("Language (full) AS LocalTime === " + jMetaDataText.getLanguageString1AsLocalTime());
        System.out.println("Language (full) AS String === " + jMetaDataText.getLanguageString1AsString());
        System.out.println("Language (full) AS Boolean === " + jMetaDataText.getLanguageString1AsBoolean());
        System.out.println("Language (full) AS BigInteger === " + jMetaDataText.getLanguageString1AsBigInteger());
        System.out.println("Language (full) AS URL === " + jMetaDataText.getLanguageString1AsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Integer === " + jMetaDataText.getLanguageString2AsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Long === " + jMetaDataText.getLanguageString2AsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS LocalDateTime === " + jMetaDataText.getLanguageString2AsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS LocalTime === " + jMetaDataText.getLanguageString2AsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS String === " + jMetaDataText.getLanguageString2AsString());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Boolean === " + jMetaDataText.getLanguageString2AsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS BigInteger === " + jMetaDataText.getLanguageString2AsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS URL === " + jMetaDataText.getLanguageString2AsURL());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Integer === " + jMetaDataText.getLanguageString3AsInteger());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Long === " + jMetaDataText.getLanguageString3AsLong());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS LocalDateTime === " + jMetaDataText.getLanguageString3AsLocalDateTime());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS LocalTime === " + jMetaDataText.getLanguageString3AsLocalTime());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS String === " + jMetaDataText.getLanguageString3AsString());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Boolean === " + jMetaDataText.getLanguageString3AsBoolean());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS BigInteger === " + jMetaDataText.getLanguageString3AsBigInteger());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS URL === " + jMetaDataText.getLanguageString3AsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Integer === " + jMetaDataText.getLanguageString4AsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Long === " + jMetaDataText.getLanguageString4AsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS LocalDateTime === " + jMetaDataText.getLanguageString4AsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS LocalTime === " + jMetaDataText.getLanguageString4AsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS String === " + jMetaDataText.getLanguageString4AsString());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Boolean === " + jMetaDataText.getLanguageString4AsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS BigInteger === " + jMetaDataText.getLanguageString4AsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS URL === " + jMetaDataText.getLanguageString4AsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataText.getCodecIDAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataText.getCodecIDAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataText.getCodecIDAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataText.getCodecIDAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataText.getCodecIDAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataText.getCodecIDAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataText.getCodecIDAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataText.getCodecIDAsURL());
        System.out.println("Number of a group in order to provide versions of the same track AS Integer === " + jMetaDataText.getAlternateGroupAsInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS Long === " + jMetaDataText.getAlternateGroupAsLong());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalDateTime === " + jMetaDataText.getAlternateGroupAsLocalDateTime());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalTime === " + jMetaDataText.getAlternateGroupAsLocalTime());
        System.out.println("Number of a group in order to provide versions of the same track AS String === " + jMetaDataText.getAlternateGroupAsString());
        System.out.println("Number of a group in order to provide versions of the same track AS Boolean === " + jMetaDataText.getAlternateGroupAsBoolean());
        System.out.println("Number of a group in order to provide versions of the same track AS BigInteger === " + jMetaDataText.getAlternateGroupAsBigInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS URL === " + jMetaDataText.getAlternateGroupAsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Integer === " + jMetaDataText.getLanguageAsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Long === " + jMetaDataText.getLanguageAsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS LocalDateTime === " + jMetaDataText.getLanguageAsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS LocalTime === " + jMetaDataText.getLanguageAsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS String === " + jMetaDataText.getLanguageAsString());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Boolean === " + jMetaDataText.getLanguageAsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS BigInteger === " + jMetaDataText.getLanguageAsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS URL === " + jMetaDataText.getLanguageAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Integer === " + jMetaDataText.getDurationLastFrameAsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Long === " + jMetaDataText.getDurationLastFrameAsLong());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataText.getDurationLastFrameAsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS LocalTime === " + jMetaDataText.getDurationLastFrameAsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS String === " + jMetaDataText.getDurationLastFrameAsString());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Boolean === " + jMetaDataText.getDurationLastFrameAsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS BigInteger === " + jMetaDataText.getDurationLastFrameAsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS URL === " + jMetaDataText.getDurationLastFrameAsURL());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Integer === " + jMetaDataText.getEncodedLibraryStringAsInteger());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Long === " + jMetaDataText.getEncodedLibraryStringAsLong());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalDateTime === " + jMetaDataText.getEncodedLibraryStringAsLocalDateTime());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalTime === " + jMetaDataText.getEncodedLibraryStringAsLocalTime());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS String === " + jMetaDataText.getEncodedLibraryStringAsString());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Boolean === " + jMetaDataText.getEncodedLibraryStringAsBoolean());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS BigInteger === " + jMetaDataText.getEncodedLibraryStringAsBigInteger());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS URL === " + jMetaDataText.getEncodedLibraryStringAsURL());
        System.out.println("Streamsize in with percentage value AS Integer === " + jMetaDataText.getStreamSizeStringAsInteger());
        System.out.println("Streamsize in with percentage value AS Long === " + jMetaDataText.getStreamSizeStringAsLong());
        System.out.println("Streamsize in with percentage value AS LocalDateTime === " + jMetaDataText.getStreamSizeStringAsLocalDateTime());
        System.out.println("Streamsize in with percentage value AS LocalTime === " + jMetaDataText.getStreamSizeStringAsLocalTime());
        System.out.println("Streamsize in with percentage value AS String === " + jMetaDataText.getStreamSizeStringAsString());
        System.out.println("Streamsize in with percentage value AS Boolean === " + jMetaDataText.getStreamSizeStringAsBoolean());
        System.out.println("Streamsize in with percentage value AS BigInteger === " + jMetaDataText.getStreamSizeStringAsBigInteger());
        System.out.println("Streamsize in with percentage value AS URL === " + jMetaDataText.getStreamSizeStringAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataText.getDefaultStringAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataText.getDefaultStringAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataText.getDefaultStringAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataText.getDefaultStringAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataText.getDefaultStringAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataText.getDefaultStringAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataText.getDefaultStringAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataText.getDefaultStringAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataText.getOriginalSourceMediumIDStringAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataText.getOriginalSourceMediumIDStringAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataText.getOriginalSourceMediumIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataText.getOriginalSourceMediumIDStringAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataText.getOriginalSourceMediumIDStringAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataText.getOriginalSourceMediumIDStringAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataText.getOriginalSourceMediumIDStringAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataText.getOriginalSourceMediumIDStringAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataText.getSourceDurationLastFrameString1AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataText.getSourceDurationLastFrameString1AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationLastFrameString1AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationLastFrameString1AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataText.getSourceDurationLastFrameString1AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataText.getSourceDurationLastFrameString1AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationLastFrameString1AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataText.getSourceDurationLastFrameString1AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataText.getSourceDurationLastFrameString3AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataText.getSourceDurationLastFrameString3AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataText.getSourceDurationLastFrameString3AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataText.getSourceDurationLastFrameString3AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataText.getSourceDurationLastFrameString3AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataText.getSourceDurationLastFrameString3AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataText.getSourceDurationLastFrameString3AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataText.getSourceDurationLastFrameString3AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getSourceDurationLastFrameString2AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getSourceDurationLastFrameString2AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationLastFrameString2AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationLastFrameString2AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getSourceDurationLastFrameString2AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getSourceDurationLastFrameString2AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationLastFrameString2AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getSourceDurationLastFrameString2AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataText.getSourceDurationLastFrameString5AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataText.getSourceDurationLastFrameString5AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataText.getSourceDurationLastFrameString5AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataText.getSourceDurationLastFrameString5AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataText.getSourceDurationLastFrameString5AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataText.getSourceDurationLastFrameString5AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataText.getSourceDurationLastFrameString5AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataText.getSourceDurationLastFrameString5AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataText.getSourceDurationLastFrameString4AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataText.getSourceDurationLastFrameString4AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataText.getSourceDurationLastFrameString4AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataText.getSourceDurationLastFrameString4AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataText.getSourceDurationLastFrameString4AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataText.getSourceDurationLastFrameString4AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataText.getSourceDurationLastFrameString4AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataText.getSourceDurationLastFrameString4AsURL());
        System.out.println("BitDepth/String AS Integer === " + jMetaDataText.getBitDepthStringAsInteger());
        System.out.println("BitDepth/String AS Long === " + jMetaDataText.getBitDepthStringAsLong());
        System.out.println("BitDepth/String AS LocalDateTime === " + jMetaDataText.getBitDepthStringAsLocalDateTime());
        System.out.println("BitDepth/String AS LocalTime === " + jMetaDataText.getBitDepthStringAsLocalTime());
        System.out.println("BitDepth/String AS String === " + jMetaDataText.getBitDepthStringAsString());
        System.out.println("BitDepth/String AS Boolean === " + jMetaDataText.getBitDepthStringAsBoolean());
        System.out.println("BitDepth/String AS BigInteger === " + jMetaDataText.getBitDepthStringAsBigInteger());
        System.out.println("BitDepth/String AS URL === " + jMetaDataText.getBitDepthStringAsURL());
        System.out.println("Number of frames AS Integer === " + jMetaDataText.getFrameCountAsInteger());
        System.out.println("Number of frames AS Long === " + jMetaDataText.getFrameCountAsLong());
        System.out.println("Number of frames AS LocalDateTime === " + jMetaDataText.getFrameCountAsLocalDateTime());
        System.out.println("Number of frames AS LocalTime === " + jMetaDataText.getFrameCountAsLocalTime());
        System.out.println("Number of frames AS String === " + jMetaDataText.getFrameCountAsString());
        System.out.println("Number of frames AS Boolean === " + jMetaDataText.getFrameCountAsBoolean());
        System.out.println("Number of frames AS BigInteger === " + jMetaDataText.getFrameCountAsBigInteger());
        System.out.println("Number of frames AS URL === " + jMetaDataText.getFrameCountAsURL());
        System.out.println("Name of the track AS Integer === " + jMetaDataText.getTitleAsInteger());
        System.out.println("Name of the track AS Long === " + jMetaDataText.getTitleAsLong());
        System.out.println("Name of the track AS LocalDateTime === " + jMetaDataText.getTitleAsLocalDateTime());
        System.out.println("Name of the track AS LocalTime === " + jMetaDataText.getTitleAsLocalTime());
        System.out.println("Name of the track AS String === " + jMetaDataText.getTitleAsString());
        System.out.println("Name of the track AS Boolean === " + jMetaDataText.getTitleAsBoolean());
        System.out.println("Name of the track AS BigInteger === " + jMetaDataText.getTitleAsBigInteger());
        System.out.println("Name of the track AS URL === " + jMetaDataText.getTitleAsURL());
        System.out.println("Delay drop frame AS Integer === " + jMetaDataText.getDelayDropFrameAsInteger());
        System.out.println("Delay drop frame AS Long === " + jMetaDataText.getDelayDropFrameAsLong());
        System.out.println("Delay drop frame AS LocalDateTime === " + jMetaDataText.getDelayDropFrameAsLocalDateTime());
        System.out.println("Delay drop frame AS LocalTime === " + jMetaDataText.getDelayDropFrameAsLocalTime());
        System.out.println("Delay drop frame AS String === " + jMetaDataText.getDelayDropFrameAsString());
        System.out.println("Delay drop frame AS Boolean === " + jMetaDataText.getDelayDropFrameAsBoolean());
        System.out.println("Delay drop frame AS BigInteger === " + jMetaDataText.getDelayDropFrameAsBigInteger());
        System.out.println("Delay drop frame AS URL === " + jMetaDataText.getDelayDropFrameAsURL());
        System.out.println("Maximum Bit rate in bps AS Integer === " + jMetaDataText.getBitRateMaximumAsInteger());
        System.out.println("Maximum Bit rate in bps AS Long === " + jMetaDataText.getBitRateMaximumAsLong());
        System.out.println("Maximum Bit rate in bps AS LocalDateTime === " + jMetaDataText.getBitRateMaximumAsLocalDateTime());
        System.out.println("Maximum Bit rate in bps AS LocalTime === " + jMetaDataText.getBitRateMaximumAsLocalTime());
        System.out.println("Maximum Bit rate in bps AS String === " + jMetaDataText.getBitRateMaximumAsString());
        System.out.println("Maximum Bit rate in bps AS Boolean === " + jMetaDataText.getBitRateMaximumAsBoolean());
        System.out.println("Maximum Bit rate in bps AS BigInteger === " + jMetaDataText.getBitRateMaximumAsBigInteger());
        System.out.println("Maximum Bit rate in bps AS URL === " + jMetaDataText.getBitRateMaximumAsURL());
        System.out.println("Stream size divided by file size AS Integer === " + jMetaDataText.getStreamSizeProportionAsInteger());
        System.out.println("Stream size divided by file size AS Long === " + jMetaDataText.getStreamSizeProportionAsLong());
        System.out.println("Stream size divided by file size AS LocalDateTime === " + jMetaDataText.getStreamSizeProportionAsLocalDateTime());
        System.out.println("Stream size divided by file size AS LocalTime === " + jMetaDataText.getStreamSizeProportionAsLocalTime());
        System.out.println("Stream size divided by file size AS String === " + jMetaDataText.getStreamSizeProportionAsString());
        System.out.println("Stream size divided by file size AS Boolean === " + jMetaDataText.getStreamSizeProportionAsBoolean());
        System.out.println("Stream size divided by file size AS BigInteger === " + jMetaDataText.getStreamSizeProportionAsBigInteger());
        System.out.println("Stream size divided by file size AS URL === " + jMetaDataText.getStreamSizeProportionAsURL());
        System.out.println("Source Encoded Stream size divided by file size AS Integer === " + jMetaDataText.getSourceStreamSizeEncodedProportionAsInteger());
        System.out.println("Source Encoded Stream size divided by file size AS Long === " + jMetaDataText.getSourceStreamSizeEncodedProportionAsLong());
        System.out.println("Source Encoded Stream size divided by file size AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeEncodedProportionAsLocalDateTime());
        System.out.println("Source Encoded Stream size divided by file size AS LocalTime === " + jMetaDataText.getSourceStreamSizeEncodedProportionAsLocalTime());
        System.out.println("Source Encoded Stream size divided by file size AS String === " + jMetaDataText.getSourceStreamSizeEncodedProportionAsString());
        System.out.println("Source Encoded Stream size divided by file size AS Boolean === " + jMetaDataText.getSourceStreamSizeEncodedProportionAsBoolean());
        System.out.println("Source Encoded Stream size divided by file size AS BigInteger === " + jMetaDataText.getSourceStreamSizeEncodedProportionAsBigInteger());
        System.out.println("Source Encoded Stream size divided by file size AS URL === " + jMetaDataText.getSourceStreamSizeEncodedProportionAsURL());
        System.out.println("Parameters used by the software AS Integer === " + jMetaDataText.getEncodedLibrarySettingsAsInteger());
        System.out.println("Parameters used by the software AS Long === " + jMetaDataText.getEncodedLibrarySettingsAsLong());
        System.out.println("Parameters used by the software AS LocalDateTime === " + jMetaDataText.getEncodedLibrarySettingsAsLocalDateTime());
        System.out.println("Parameters used by the software AS LocalTime === " + jMetaDataText.getEncodedLibrarySettingsAsLocalTime());
        System.out.println("Parameters used by the software AS String === " + jMetaDataText.getEncodedLibrarySettingsAsString());
        System.out.println("Parameters used by the software AS Boolean === " + jMetaDataText.getEncodedLibrarySettingsAsBoolean());
        System.out.println("Parameters used by the software AS BigInteger === " + jMetaDataText.getEncodedLibrarySettingsAsBigInteger());
        System.out.println("Parameters used by the software AS URL === " + jMetaDataText.getEncodedLibrarySettingsAsURL());
        System.out.println("Source Play time of the stream, in ms AS Integer === " + jMetaDataText.getSourceDurationAsInteger());
        System.out.println("Source Play time of the stream, in ms AS Long === " + jMetaDataText.getSourceDurationAsLong());
        System.out.println("Source Play time of the stream, in ms AS LocalDateTime === " + jMetaDataText.getSourceDurationAsLocalDateTime());
        System.out.println("Source Play time of the stream, in ms AS LocalTime === " + jMetaDataText.getSourceDurationAsLocalTime());
        System.out.println("Source Play time of the stream, in ms AS String === " + jMetaDataText.getSourceDurationAsString());
        System.out.println("Source Play time of the stream, in ms AS Boolean === " + jMetaDataText.getSourceDurationAsBoolean());
        System.out.println("Source Play time of the stream, in ms AS BigInteger === " + jMetaDataText.getSourceDurationAsBigInteger());
        System.out.println("Source Play time of the stream, in ms AS URL === " + jMetaDataText.getSourceDurationAsURL());
        System.out.println("Frame rate mode (CFR, VFR) AS Integer === " + jMetaDataText.getFrameRateModeAsInteger());
        System.out.println("Frame rate mode (CFR, VFR) AS Long === " + jMetaDataText.getFrameRateModeAsLong());
        System.out.println("Frame rate mode (CFR, VFR) AS LocalDateTime === " + jMetaDataText.getFrameRateModeAsLocalDateTime());
        System.out.println("Frame rate mode (CFR, VFR) AS LocalTime === " + jMetaDataText.getFrameRateModeAsLocalTime());
        System.out.println("Frame rate mode (CFR, VFR) AS String === " + jMetaDataText.getFrameRateModeAsString());
        System.out.println("Frame rate mode (CFR, VFR) AS Boolean === " + jMetaDataText.getFrameRateModeAsBoolean());
        System.out.println("Frame rate mode (CFR, VFR) AS BigInteger === " + jMetaDataText.getFrameRateModeAsBigInteger());
        System.out.println("Frame rate mode (CFR, VFR) AS URL === " + jMetaDataText.getFrameRateModeAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataText.getDelayOriginalString1AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataText.getDelayOriginalString1AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataText.getDelayOriginalString1AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataText.getDelayOriginalString1AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataText.getDelayOriginalString1AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataText.getDelayOriginalString1AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataText.getDelayOriginalString1AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataText.getDelayOriginalString1AsURL());
        System.out.println("Count of objects available in this stream AS Integer === " + jMetaDataText.getCountAsInteger());
        System.out.println("Count of objects available in this stream AS Long === " + jMetaDataText.getCountAsLong());
        System.out.println("Count of objects available in this stream AS LocalDateTime === " + jMetaDataText.getCountAsLocalDateTime());
        System.out.println("Count of objects available in this stream AS LocalTime === " + jMetaDataText.getCountAsLocalTime());
        System.out.println("Count of objects available in this stream AS String === " + jMetaDataText.getCountAsString());
        System.out.println("Count of objects available in this stream AS Boolean === " + jMetaDataText.getCountAsBoolean());
        System.out.println("Count of objects available in this stream AS BigInteger === " + jMetaDataText.getCountAsBigInteger());
        System.out.println("Count of objects available in this stream AS URL === " + jMetaDataText.getCountAsURL());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Integer === " + jMetaDataText.getFormatSettingsWrappingAsInteger());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Long === " + jMetaDataText.getFormatSettingsWrappingAsLong());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS LocalDateTime === " + jMetaDataText.getFormatSettingsWrappingAsLocalDateTime());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS LocalTime === " + jMetaDataText.getFormatSettingsWrappingAsLocalTime());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS String === " + jMetaDataText.getFormatSettingsWrappingAsString());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Boolean === " + jMetaDataText.getFormatSettingsWrappingAsBoolean());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS BigInteger === " + jMetaDataText.getFormatSettingsWrappingAsBigInteger());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS URL === " + jMetaDataText.getFormatSettingsWrappingAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataText.getDelayOriginalString2AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataText.getDelayOriginalString2AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataText.getDelayOriginalString2AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataText.getDelayOriginalString2AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataText.getDelayOriginalString2AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataText.getDelayOriginalString2AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataText.getDelayOriginalString2AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataText.getDelayOriginalString2AsURL());
        System.out.println("Encryption AS Integer === " + jMetaDataText.getEncryptionAsInteger());
        System.out.println("Encryption AS Long === " + jMetaDataText.getEncryptionAsLong());
        System.out.println("Encryption AS LocalDateTime === " + jMetaDataText.getEncryptionAsLocalDateTime());
        System.out.println("Encryption AS LocalTime === " + jMetaDataText.getEncryptionAsLocalTime());
        System.out.println("Encryption AS String === " + jMetaDataText.getEncryptionAsString());
        System.out.println("Encryption AS Boolean === " + jMetaDataText.getEncryptionAsBoolean());
        System.out.println("Encryption AS BigInteger === " + jMetaDataText.getEncryptionAsBigInteger());
        System.out.println("Encryption AS URL === " + jMetaDataText.getEncryptionAsURL());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Integer === " + jMetaDataText.getDelayOriginalAsInteger());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Long === " + jMetaDataText.getDelayOriginalAsLong());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS LocalDateTime === " + jMetaDataText.getDelayOriginalAsLocalDateTime());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS LocalTime === " + jMetaDataText.getDelayOriginalAsLocalTime());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS String === " + jMetaDataText.getDelayOriginalAsString());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Boolean === " + jMetaDataText.getDelayOriginalAsBoolean());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS BigInteger === " + jMetaDataText.getDelayOriginalAsBigInteger());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS URL === " + jMetaDataText.getDelayOriginalAsURL());
        System.out.println("Frames per second, numerator AS Integer === " + jMetaDataText.getFrameRateNumAsInteger());
        System.out.println("Frames per second, numerator AS Long === " + jMetaDataText.getFrameRateNumAsLong());
        System.out.println("Frames per second, numerator AS LocalDateTime === " + jMetaDataText.getFrameRateNumAsLocalDateTime());
        System.out.println("Frames per second, numerator AS LocalTime === " + jMetaDataText.getFrameRateNumAsLocalTime());
        System.out.println("Frames per second, numerator AS String === " + jMetaDataText.getFrameRateNumAsString());
        System.out.println("Frames per second, numerator AS Boolean === " + jMetaDataText.getFrameRateNumAsBoolean());
        System.out.println("Frames per second, numerator AS BigInteger === " + jMetaDataText.getFrameRateNumAsBigInteger());
        System.out.println("Frames per second, numerator AS URL === " + jMetaDataText.getFrameRateNumAsURL());
        System.out.println("Version of this format AS Integer === " + jMetaDataText.getFormatVersionAsInteger());
        System.out.println("Version of this format AS Long === " + jMetaDataText.getFormatVersionAsLong());
        System.out.println("Version of this format AS LocalDateTime === " + jMetaDataText.getFormatVersionAsLocalDateTime());
        System.out.println("Version of this format AS LocalTime === " + jMetaDataText.getFormatVersionAsLocalTime());
        System.out.println("Version of this format AS String === " + jMetaDataText.getFormatVersionAsString());
        System.out.println("Version of this format AS Boolean === " + jMetaDataText.getFormatVersionAsBoolean());
        System.out.println("Version of this format AS BigInteger === " + jMetaDataText.getFormatVersionAsBigInteger());
        System.out.println("Version of this format AS URL === " + jMetaDataText.getFormatVersionAsURL());
        System.out.println("When multiple streams, number of the stream (base=1) AS Integer === " + jMetaDataText.getStreamKindPosAsInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS Long === " + jMetaDataText.getStreamKindPosAsLong());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalDateTime === " + jMetaDataText.getStreamKindPosAsLocalDateTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalTime === " + jMetaDataText.getStreamKindPosAsLocalTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS String === " + jMetaDataText.getStreamKindPosAsString());
        System.out.println("When multiple streams, number of the stream (base=1) AS Boolean === " + jMetaDataText.getStreamKindPosAsBoolean());
        System.out.println("When multiple streams, number of the stream (base=1) AS BigInteger === " + jMetaDataText.getStreamKindPosAsBigInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS URL === " + jMetaDataText.getStreamKindPosAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataText.getOriginalSourceMediumIDAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataText.getOriginalSourceMediumIDAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataText.getOriginalSourceMediumIDAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataText.getOriginalSourceMediumIDAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataText.getOriginalSourceMediumIDAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataText.getOriginalSourceMediumIDAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataText.getOriginalSourceMediumIDAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataText.getOriginalSourceMediumIDAsURL());
        System.out.println("Play time (formated) AS Integer === " + jMetaDataText.getDurationStringAsInteger());
        System.out.println("Play time (formated) AS Long === " + jMetaDataText.getDurationStringAsLong());
        System.out.println("Play time (formated) AS LocalDateTime === " + jMetaDataText.getDurationStringAsLocalDateTime());
        System.out.println("Play time (formated) AS LocalTime === " + jMetaDataText.getDurationStringAsLocalTime());
        System.out.println("Play time (formated) AS String === " + jMetaDataText.getDurationStringAsString());
        System.out.println("Play time (formated) AS Boolean === " + jMetaDataText.getDurationStringAsBoolean());
        System.out.println("Play time (formated) AS BigInteger === " + jMetaDataText.getDurationStringAsBigInteger());
        System.out.println("Play time (formated) AS URL === " + jMetaDataText.getDurationStringAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataText.getIDAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataText.getIDAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataText.getIDAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataText.getIDAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataText.getIDAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataText.getIDAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataText.getIDAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataText.getIDAsURL());
        System.out.println("Delay fixed in the stream (absolute / video) AS Integer === " + jMetaDataText.getVideoDelayAsInteger());
        System.out.println("Delay fixed in the stream (absolute / video) AS Long === " + jMetaDataText.getVideoDelayAsLong());
        System.out.println("Delay fixed in the stream (absolute / video) AS LocalDateTime === " + jMetaDataText.getVideoDelayAsLocalDateTime());
        System.out.println("Delay fixed in the stream (absolute / video) AS LocalTime === " + jMetaDataText.getVideoDelayAsLocalTime());
        System.out.println("Delay fixed in the stream (absolute / video) AS String === " + jMetaDataText.getVideoDelayAsString());
        System.out.println("Delay fixed in the stream (absolute / video) AS Boolean === " + jMetaDataText.getVideoDelayAsBoolean());
        System.out.println("Delay fixed in the stream (absolute / video) AS BigInteger === " + jMetaDataText.getVideoDelayAsBigInteger());
        System.out.println("Delay fixed in the stream (absolute / video) AS URL === " + jMetaDataText.getVideoDelayAsURL());
        System.out.println("Release date of software AS Integer === " + jMetaDataText.getEncodedLibraryDateAsInteger());
        System.out.println("Release date of software AS Long === " + jMetaDataText.getEncodedLibraryDateAsLong());
        System.out.println("Release date of software AS LocalDateTime === " + jMetaDataText.getEncodedLibraryDateAsLocalDateTime());
        System.out.println("Release date of software AS LocalTime === " + jMetaDataText.getEncodedLibraryDateAsLocalTime());
        System.out.println("Release date of software AS String === " + jMetaDataText.getEncodedLibraryDateAsString());
        System.out.println("Release date of software AS Boolean === " + jMetaDataText.getEncodedLibraryDateAsBoolean());
        System.out.println("Release date of software AS BigInteger === " + jMetaDataText.getEncodedLibraryDateAsBigInteger());
        System.out.println("Release date of software AS URL === " + jMetaDataText.getEncodedLibraryDateAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataText.getMenuIDStringAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataText.getMenuIDStringAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataText.getMenuIDStringAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataText.getMenuIDStringAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataText.getMenuIDStringAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataText.getMenuIDStringAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataText.getMenuIDStringAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataText.getMenuIDStringAsURL());
        System.out.println("More info about Language (e.g. Director's Comment) AS Integer === " + jMetaDataText.getLanguageMoreAsInteger());
        System.out.println("More info about Language (e.g. Director's Comment) AS Long === " + jMetaDataText.getLanguageMoreAsLong());
        System.out.println("More info about Language (e.g. Director's Comment) AS LocalDateTime === " + jMetaDataText.getLanguageMoreAsLocalDateTime());
        System.out.println("More info about Language (e.g. Director's Comment) AS LocalTime === " + jMetaDataText.getLanguageMoreAsLocalTime());
        System.out.println("More info about Language (e.g. Director's Comment) AS String === " + jMetaDataText.getLanguageMoreAsString());
        System.out.println("More info about Language (e.g. Director's Comment) AS Boolean === " + jMetaDataText.getLanguageMoreAsBoolean());
        System.out.println("More info about Language (e.g. Director's Comment) AS BigInteger === " + jMetaDataText.getLanguageMoreAsBigInteger());
        System.out.println("More info about Language (e.g. Director's Comment) AS URL === " + jMetaDataText.getLanguageMoreAsURL());
        System.out.println("Source Streamsize in with percentage value AS Integer === " + jMetaDataText.getSourceStreamSizeStringAsInteger());
        System.out.println("Source Streamsize in with percentage value AS Long === " + jMetaDataText.getSourceStreamSizeStringAsLong());
        System.out.println("Source Streamsize in with percentage value AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeStringAsLocalDateTime());
        System.out.println("Source Streamsize in with percentage value AS LocalTime === " + jMetaDataText.getSourceStreamSizeStringAsLocalTime());
        System.out.println("Source Streamsize in with percentage value AS String === " + jMetaDataText.getSourceStreamSizeStringAsString());
        System.out.println("Source Streamsize in with percentage value AS Boolean === " + jMetaDataText.getSourceStreamSizeStringAsBoolean());
        System.out.println("Source Streamsize in with percentage value AS BigInteger === " + jMetaDataText.getSourceStreamSizeStringAsBigInteger());
        System.out.println("Source Streamsize in with percentage value AS URL === " + jMetaDataText.getSourceStreamSizeStringAsURL());
        System.out.println("Maximum Frames per second AS Integer === " + jMetaDataText.getFrameRateMaximumAsInteger());
        System.out.println("Maximum Frames per second AS Long === " + jMetaDataText.getFrameRateMaximumAsLong());
        System.out.println("Maximum Frames per second AS LocalDateTime === " + jMetaDataText.getFrameRateMaximumAsLocalDateTime());
        System.out.println("Maximum Frames per second AS LocalTime === " + jMetaDataText.getFrameRateMaximumAsLocalTime());
        System.out.println("Maximum Frames per second AS String === " + jMetaDataText.getFrameRateMaximumAsString());
        System.out.println("Maximum Frames per second AS Boolean === " + jMetaDataText.getFrameRateMaximumAsBoolean());
        System.out.println("Maximum Frames per second AS BigInteger === " + jMetaDataText.getFrameRateMaximumAsBigInteger());
        System.out.println("Maximum Frames per second AS URL === " + jMetaDataText.getFrameRateMaximumAsURL());
        System.out.println("Original (in the raw stream) Frames per second AS Integer === " + jMetaDataText.getFrameRateOriginalAsInteger());
        System.out.println("Original (in the raw stream) Frames per second AS Long === " + jMetaDataText.getFrameRateOriginalAsLong());
        System.out.println("Original (in the raw stream) Frames per second AS LocalDateTime === " + jMetaDataText.getFrameRateOriginalAsLocalDateTime());
        System.out.println("Original (in the raw stream) Frames per second AS LocalTime === " + jMetaDataText.getFrameRateOriginalAsLocalTime());
        System.out.println("Original (in the raw stream) Frames per second AS String === " + jMetaDataText.getFrameRateOriginalAsString());
        System.out.println("Original (in the raw stream) Frames per second AS Boolean === " + jMetaDataText.getFrameRateOriginalAsBoolean());
        System.out.println("Original (in the raw stream) Frames per second AS BigInteger === " + jMetaDataText.getFrameRateOriginalAsBigInteger());
        System.out.println("Original (in the raw stream) Frames per second AS URL === " + jMetaDataText.getFrameRateOriginalAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Integer === " + jMetaDataText.getDurationFirstFrameAsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Long === " + jMetaDataText.getDurationFirstFrameAsLong());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataText.getDurationFirstFrameAsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS LocalTime === " + jMetaDataText.getDurationFirstFrameAsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS String === " + jMetaDataText.getDurationFirstFrameAsString());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Boolean === " + jMetaDataText.getDurationFirstFrameAsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS BigInteger === " + jMetaDataText.getDurationFirstFrameAsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS URL === " + jMetaDataText.getDurationFirstFrameAsURL());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Integer === " + jMetaDataText.getDelayOriginalString3AsInteger());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Long === " + jMetaDataText.getDelayOriginalString3AsLong());
        System.out.println("Delay in format: HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataText.getDelayOriginalString3AsLocalDateTime());
        System.out.println("Delay in format: HH:MM:SS.MMM AS LocalTime === " + jMetaDataText.getDelayOriginalString3AsLocalTime());
        System.out.println("Delay in format: HH:MM:SS.MMM AS String === " + jMetaDataText.getDelayOriginalString3AsString());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Boolean === " + jMetaDataText.getDelayOriginalString3AsBoolean());
        System.out.println("Delay in format: HH:MM:SS.MMM AS BigInteger === " + jMetaDataText.getDelayOriginalString3AsBigInteger());
        System.out.println("Delay in format: HH:MM:SS.MMM AS URL === " + jMetaDataText.getDelayOriginalString3AsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Integer === " + jMetaDataText.getEncodedApplicationStringAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Long === " + jMetaDataText.getEncodedApplicationStringAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalDateTime === " + jMetaDataText.getEncodedApplicationStringAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalTime === " + jMetaDataText.getEncodedApplicationStringAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS String === " + jMetaDataText.getEncodedApplicationStringAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Boolean === " + jMetaDataText.getEncodedApplicationStringAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS BigInteger === " + jMetaDataText.getEncodedApplicationStringAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS URL === " + jMetaDataText.getEncodedApplicationStringAsURL());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataText.getDelayOriginalString4AsInteger());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataText.getDelayOriginalString4AsLong());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataText.getDelayOriginalString4AsLocalDateTime());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataText.getDelayOriginalString4AsLocalTime());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataText.getDelayOriginalString4AsString());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataText.getDelayOriginalString4AsBoolean());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataText.getDelayOriginalString4AsBigInteger());
        System.out.println("Delay in format: HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataText.getDelayOriginalString4AsURL());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataText.getDelayOriginalString5AsInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataText.getDelayOriginalString5AsLong());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataText.getDelayOriginalString5AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataText.getDelayOriginalString5AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataText.getDelayOriginalString5AsString());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataText.getDelayOriginalString5AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataText.getDelayOriginalString5AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataText.getDelayOriginalString5AsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataText.getForcedAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataText.getForcedAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataText.getForcedAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataText.getForcedAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataText.getForcedAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataText.getForcedAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataText.getForcedAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataText.getForcedAsURL());
        System.out.println("Last **Inform** call AS Integer === " + jMetaDataText.getInformAsInteger());
        System.out.println("Last **Inform** call AS Long === " + jMetaDataText.getInformAsLong());
        System.out.println("Last **Inform** call AS LocalDateTime === " + jMetaDataText.getInformAsLocalDateTime());
        System.out.println("Last **Inform** call AS LocalTime === " + jMetaDataText.getInformAsLocalTime());
        System.out.println("Last **Inform** call AS String === " + jMetaDataText.getInformAsString());
        System.out.println("Last **Inform** call AS Boolean === " + jMetaDataText.getInformAsBoolean());
        System.out.println("Last **Inform** call AS BigInteger === " + jMetaDataText.getInformAsBigInteger());
        System.out.println("Last **Inform** call AS URL === " + jMetaDataText.getInformAsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Integer === " + jMetaDataText.getSourceDurationFirstFrameAsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Long === " + jMetaDataText.getSourceDurationFirstFrameAsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataText.getSourceDurationFirstFrameAsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS LocalTime === " + jMetaDataText.getSourceDurationFirstFrameAsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS String === " + jMetaDataText.getSourceDurationFirstFrameAsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Boolean === " + jMetaDataText.getSourceDurationFirstFrameAsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS BigInteger === " + jMetaDataText.getSourceDurationFirstFrameAsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS URL === " + jMetaDataText.getSourceDurationFirstFrameAsURL());
        System.out.println("Number of the stream (base=0) AS Integer === " + jMetaDataText.getStreamKindIDAsInteger());
        System.out.println("Number of the stream (base=0) AS Long === " + jMetaDataText.getStreamKindIDAsLong());
        System.out.println("Number of the stream (base=0) AS LocalDateTime === " + jMetaDataText.getStreamKindIDAsLocalDateTime());
        System.out.println("Number of the stream (base=0) AS LocalTime === " + jMetaDataText.getStreamKindIDAsLocalTime());
        System.out.println("Number of the stream (base=0) AS String === " + jMetaDataText.getStreamKindIDAsString());
        System.out.println("Number of the stream (base=0) AS Boolean === " + jMetaDataText.getStreamKindIDAsBoolean());
        System.out.println("Number of the stream (base=0) AS BigInteger === " + jMetaDataText.getStreamKindIDAsBigInteger());
        System.out.println("Number of the stream (base=0) AS URL === " + jMetaDataText.getStreamKindIDAsURL());
        System.out.println("Nominal Frames per second (with measurement) AS Integer === " + jMetaDataText.getFrameRateNominalStringAsInteger());
        System.out.println("Nominal Frames per second (with measurement) AS Long === " + jMetaDataText.getFrameRateNominalStringAsLong());
        System.out.println("Nominal Frames per second (with measurement) AS LocalDateTime === " + jMetaDataText.getFrameRateNominalStringAsLocalDateTime());
        System.out.println("Nominal Frames per second (with measurement) AS LocalTime === " + jMetaDataText.getFrameRateNominalStringAsLocalTime());
        System.out.println("Nominal Frames per second (with measurement) AS String === " + jMetaDataText.getFrameRateNominalStringAsString());
        System.out.println("Nominal Frames per second (with measurement) AS Boolean === " + jMetaDataText.getFrameRateNominalStringAsBoolean());
        System.out.println("Nominal Frames per second (with measurement) AS BigInteger === " + jMetaDataText.getFrameRateNominalStringAsBigInteger());
        System.out.println("Nominal Frames per second (with measurement) AS URL === " + jMetaDataText.getFrameRateNominalStringAsURL());
        System.out.println("Link AS Integer === " + jMetaDataText.getFormatUrlAsInteger());
        System.out.println("Link AS Long === " + jMetaDataText.getFormatUrlAsLong());
        System.out.println("Link AS LocalDateTime === " + jMetaDataText.getFormatUrlAsLocalDateTime());
        System.out.println("Link AS LocalTime === " + jMetaDataText.getFormatUrlAsLocalTime());
        System.out.println("Link AS String === " + jMetaDataText.getFormatUrlAsString());
        System.out.println("Link AS Boolean === " + jMetaDataText.getFormatUrlAsBoolean());
        System.out.println("Link AS BigInteger === " + jMetaDataText.getFormatUrlAsBigInteger());
        System.out.println("Link AS URL === " + jMetaDataText.getFormatUrlAsURL());
        System.out.println("Minimum Bit rate (with measurement) AS Integer === " + jMetaDataText.getBitRateMinimumStringAsInteger());
        System.out.println("Minimum Bit rate (with measurement) AS Long === " + jMetaDataText.getBitRateMinimumStringAsLong());
        System.out.println("Minimum Bit rate (with measurement) AS LocalDateTime === " + jMetaDataText.getBitRateMinimumStringAsLocalDateTime());
        System.out.println("Minimum Bit rate (with measurement) AS LocalTime === " + jMetaDataText.getBitRateMinimumStringAsLocalTime());
        System.out.println("Minimum Bit rate (with measurement) AS String === " + jMetaDataText.getBitRateMinimumStringAsString());
        System.out.println("Minimum Bit rate (with measurement) AS Boolean === " + jMetaDataText.getBitRateMinimumStringAsBoolean());
        System.out.println("Minimum Bit rate (with measurement) AS BigInteger === " + jMetaDataText.getBitRateMinimumStringAsBigInteger());
        System.out.println("Minimum Bit rate (with measurement) AS URL === " + jMetaDataText.getBitRateMinimumStringAsURL());
        System.out.println("Width AS Integer === " + jMetaDataText.getWidthAsInteger());
        System.out.println("Width AS Long === " + jMetaDataText.getWidthAsLong());
        System.out.println("Width AS LocalDateTime === " + jMetaDataText.getWidthAsLocalDateTime());
        System.out.println("Width AS LocalTime === " + jMetaDataText.getWidthAsLocalTime());
        System.out.println("Width AS String === " + jMetaDataText.getWidthAsString());
        System.out.println("Width AS Boolean === " + jMetaDataText.getWidthAsBoolean());
        System.out.println("Width AS BigInteger === " + jMetaDataText.getWidthAsBigInteger());
        System.out.println("Width AS URL === " + jMetaDataText.getWidthAsURL());
        System.out.println("Frames per second (with measurement) AS Integer === " + jMetaDataText.getFrameRateStringAsInteger());
        System.out.println("Frames per second (with measurement) AS Long === " + jMetaDataText.getFrameRateStringAsLong());
        System.out.println("Frames per second (with measurement) AS LocalDateTime === " + jMetaDataText.getFrameRateStringAsLocalDateTime());
        System.out.println("Frames per second (with measurement) AS LocalTime === " + jMetaDataText.getFrameRateStringAsLocalTime());
        System.out.println("Frames per second (with measurement) AS String === " + jMetaDataText.getFrameRateStringAsString());
        System.out.println("Frames per second (with measurement) AS Boolean === " + jMetaDataText.getFrameRateStringAsBoolean());
        System.out.println("Frames per second (with measurement) AS BigInteger === " + jMetaDataText.getFrameRateStringAsBigInteger());
        System.out.println("Frames per second (with measurement) AS URL === " + jMetaDataText.getFrameRateStringAsURL());
        System.out.println("Source Number of frames AS Integer === " + jMetaDataText.getSourceFrameCountAsInteger());
        System.out.println("Source Number of frames AS Long === " + jMetaDataText.getSourceFrameCountAsLong());
        System.out.println("Source Number of frames AS LocalDateTime === " + jMetaDataText.getSourceFrameCountAsLocalDateTime());
        System.out.println("Source Number of frames AS LocalTime === " + jMetaDataText.getSourceFrameCountAsLocalTime());
        System.out.println("Source Number of frames AS String === " + jMetaDataText.getSourceFrameCountAsString());
        System.out.println("Source Number of frames AS Boolean === " + jMetaDataText.getSourceFrameCountAsBoolean());
        System.out.println("Source Number of frames AS BigInteger === " + jMetaDataText.getSourceFrameCountAsBigInteger());
        System.out.println("Source Number of frames AS URL === " + jMetaDataText.getSourceFrameCountAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataText.getDefaultAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataText.getDefaultAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataText.getDefaultAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataText.getDefaultAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataText.getDefaultAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataText.getDefaultAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataText.getDefaultAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataText.getDefaultAsURL());
        System.out.println("Delay settings (in case of timecode for example) AS Integer === " + jMetaDataText.getDelayOriginalSettingsAsInteger());
        System.out.println("Delay settings (in case of timecode for example) AS Long === " + jMetaDataText.getDelayOriginalSettingsAsLong());
        System.out.println("Delay settings (in case of timecode for example) AS LocalDateTime === " + jMetaDataText.getDelayOriginalSettingsAsLocalDateTime());
        System.out.println("Delay settings (in case of timecode for example) AS LocalTime === " + jMetaDataText.getDelayOriginalSettingsAsLocalTime());
        System.out.println("Delay settings (in case of timecode for example) AS String === " + jMetaDataText.getDelayOriginalSettingsAsString());
        System.out.println("Delay settings (in case of timecode for example) AS Boolean === " + jMetaDataText.getDelayOriginalSettingsAsBoolean());
        System.out.println("Delay settings (in case of timecode for example) AS BigInteger === " + jMetaDataText.getDelayOriginalSettingsAsBigInteger());
        System.out.println("Delay settings (in case of timecode for example) AS URL === " + jMetaDataText.getDelayOriginalSettingsAsURL());
        System.out.println("Name of the product AS Integer === " + jMetaDataText.getEncodedApplicationNameAsInteger());
        System.out.println("Name of the product AS Long === " + jMetaDataText.getEncodedApplicationNameAsLong());
        System.out.println("Name of the product AS LocalDateTime === " + jMetaDataText.getEncodedApplicationNameAsLocalDateTime());
        System.out.println("Name of the product AS LocalTime === " + jMetaDataText.getEncodedApplicationNameAsLocalTime());
        System.out.println("Name of the product AS String === " + jMetaDataText.getEncodedApplicationNameAsString());
        System.out.println("Name of the product AS Boolean === " + jMetaDataText.getEncodedApplicationNameAsBoolean());
        System.out.println("Name of the product AS BigInteger === " + jMetaDataText.getEncodedApplicationNameAsBigInteger());
        System.out.println("Name of the product AS URL === " + jMetaDataText.getEncodedApplicationNameAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataText.getUniqueIDStringAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataText.getUniqueIDStringAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataText.getUniqueIDStringAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataText.getUniqueIDStringAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataText.getUniqueIDStringAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataText.getUniqueIDStringAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataText.getUniqueIDStringAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataText.getUniqueIDStringAsURL());
        System.out.println("Profile of the Format AS Integer === " + jMetaDataText.getFormatProfileAsInteger());
        System.out.println("Profile of the Format AS Long === " + jMetaDataText.getFormatProfileAsLong());
        System.out.println("Profile of the Format AS LocalDateTime === " + jMetaDataText.getFormatProfileAsLocalDateTime());
        System.out.println("Profile of the Format AS LocalTime === " + jMetaDataText.getFormatProfileAsLocalTime());
        System.out.println("Profile of the Format AS String === " + jMetaDataText.getFormatProfileAsString());
        System.out.println("Profile of the Format AS Boolean === " + jMetaDataText.getFormatProfileAsBoolean());
        System.out.println("Profile of the Format AS BigInteger === " + jMetaDataText.getFormatProfileAsBigInteger());
        System.out.println("Profile of the Format AS URL === " + jMetaDataText.getFormatProfileAsURL());
        System.out.println("StreamSize_Encoded/String2 AS Integer === " + jMetaDataText.getStreamSizeEncodedString2AsInteger());
        System.out.println("StreamSize_Encoded/String2 AS Long === " + jMetaDataText.getStreamSizeEncodedString2AsLong());
        System.out.println("StreamSize_Encoded/String2 AS LocalDateTime === " + jMetaDataText.getStreamSizeEncodedString2AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String2 AS LocalTime === " + jMetaDataText.getStreamSizeEncodedString2AsLocalTime());
        System.out.println("StreamSize_Encoded/String2 AS String === " + jMetaDataText.getStreamSizeEncodedString2AsString());
        System.out.println("StreamSize_Encoded/String2 AS Boolean === " + jMetaDataText.getStreamSizeEncodedString2AsBoolean());
        System.out.println("StreamSize_Encoded/String2 AS BigInteger === " + jMetaDataText.getStreamSizeEncodedString2AsBigInteger());
        System.out.println("StreamSize_Encoded/String2 AS URL === " + jMetaDataText.getStreamSizeEncodedString2AsURL());
        System.out.println("StreamSize_Demuxed/String1 AS Integer === " + jMetaDataText.getStreamSizeDemuxedString1AsInteger());
        System.out.println("StreamSize_Demuxed/String1 AS Long === " + jMetaDataText.getStreamSizeDemuxedString1AsLong());
        System.out.println("StreamSize_Demuxed/String1 AS LocalDateTime === " + jMetaDataText.getStreamSizeDemuxedString1AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String1 AS LocalTime === " + jMetaDataText.getStreamSizeDemuxedString1AsLocalTime());
        System.out.println("StreamSize_Demuxed/String1 AS String === " + jMetaDataText.getStreamSizeDemuxedString1AsString());
        System.out.println("StreamSize_Demuxed/String1 AS Boolean === " + jMetaDataText.getStreamSizeDemuxedString1AsBoolean());
        System.out.println("StreamSize_Demuxed/String1 AS BigInteger === " + jMetaDataText.getStreamSizeDemuxedString1AsBigInteger());
        System.out.println("StreamSize_Demuxed/String1 AS URL === " + jMetaDataText.getStreamSizeDemuxedString1AsURL());
        System.out.println("StreamSize_Encoded/String3 AS Integer === " + jMetaDataText.getStreamSizeEncodedString3AsInteger());
        System.out.println("StreamSize_Encoded/String3 AS Long === " + jMetaDataText.getStreamSizeEncodedString3AsLong());
        System.out.println("StreamSize_Encoded/String3 AS LocalDateTime === " + jMetaDataText.getStreamSizeEncodedString3AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String3 AS LocalTime === " + jMetaDataText.getStreamSizeEncodedString3AsLocalTime());
        System.out.println("StreamSize_Encoded/String3 AS String === " + jMetaDataText.getStreamSizeEncodedString3AsString());
        System.out.println("StreamSize_Encoded/String3 AS Boolean === " + jMetaDataText.getStreamSizeEncodedString3AsBoolean());
        System.out.println("StreamSize_Encoded/String3 AS BigInteger === " + jMetaDataText.getStreamSizeEncodedString3AsBigInteger());
        System.out.println("StreamSize_Encoded/String3 AS URL === " + jMetaDataText.getStreamSizeEncodedString3AsURL());
        System.out.println("StreamSize_Demuxed/String2 AS Integer === " + jMetaDataText.getStreamSizeDemuxedString2AsInteger());
        System.out.println("StreamSize_Demuxed/String2 AS Long === " + jMetaDataText.getStreamSizeDemuxedString2AsLong());
        System.out.println("StreamSize_Demuxed/String2 AS LocalDateTime === " + jMetaDataText.getStreamSizeDemuxedString2AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String2 AS LocalTime === " + jMetaDataText.getStreamSizeDemuxedString2AsLocalTime());
        System.out.println("StreamSize_Demuxed/String2 AS String === " + jMetaDataText.getStreamSizeDemuxedString2AsString());
        System.out.println("StreamSize_Demuxed/String2 AS Boolean === " + jMetaDataText.getStreamSizeDemuxedString2AsBoolean());
        System.out.println("StreamSize_Demuxed/String2 AS BigInteger === " + jMetaDataText.getStreamSizeDemuxedString2AsBigInteger());
        System.out.println("StreamSize_Demuxed/String2 AS URL === " + jMetaDataText.getStreamSizeDemuxedString2AsURL());
        System.out.println("StreamSize_Demuxed/String3 AS Integer === " + jMetaDataText.getStreamSizeDemuxedString3AsInteger());
        System.out.println("StreamSize_Demuxed/String3 AS Long === " + jMetaDataText.getStreamSizeDemuxedString3AsLong());
        System.out.println("StreamSize_Demuxed/String3 AS LocalDateTime === " + jMetaDataText.getStreamSizeDemuxedString3AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String3 AS LocalTime === " + jMetaDataText.getStreamSizeDemuxedString3AsLocalTime());
        System.out.println("StreamSize_Demuxed/String3 AS String === " + jMetaDataText.getStreamSizeDemuxedString3AsString());
        System.out.println("StreamSize_Demuxed/String3 AS Boolean === " + jMetaDataText.getStreamSizeDemuxedString3AsBoolean());
        System.out.println("StreamSize_Demuxed/String3 AS BigInteger === " + jMetaDataText.getStreamSizeDemuxedString3AsBigInteger());
        System.out.println("StreamSize_Demuxed/String3 AS URL === " + jMetaDataText.getStreamSizeDemuxedString3AsURL());
        System.out.println("StreamSize_Encoded/String1 AS Integer === " + jMetaDataText.getStreamSizeEncodedString1AsInteger());
        System.out.println("StreamSize_Encoded/String1 AS Long === " + jMetaDataText.getStreamSizeEncodedString1AsLong());
        System.out.println("StreamSize_Encoded/String1 AS LocalDateTime === " + jMetaDataText.getStreamSizeEncodedString1AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String1 AS LocalTime === " + jMetaDataText.getStreamSizeEncodedString1AsLocalTime());
        System.out.println("StreamSize_Encoded/String1 AS String === " + jMetaDataText.getStreamSizeEncodedString1AsString());
        System.out.println("StreamSize_Encoded/String1 AS Boolean === " + jMetaDataText.getStreamSizeEncodedString1AsBoolean());
        System.out.println("StreamSize_Encoded/String1 AS BigInteger === " + jMetaDataText.getStreamSizeEncodedString1AsBigInteger());
        System.out.println("StreamSize_Encoded/String1 AS URL === " + jMetaDataText.getStreamSizeEncodedString1AsURL());
        System.out.println("Language (full) AS Integer === " + jMetaDataText.getLanguageStringAsInteger());
        System.out.println("Language (full) AS Long === " + jMetaDataText.getLanguageStringAsLong());
        System.out.println("Language (full) AS LocalDateTime === " + jMetaDataText.getLanguageStringAsLocalDateTime());
        System.out.println("Language (full) AS LocalTime === " + jMetaDataText.getLanguageStringAsLocalTime());
        System.out.println("Language (full) AS String === " + jMetaDataText.getLanguageStringAsString());
        System.out.println("Language (full) AS Boolean === " + jMetaDataText.getLanguageStringAsBoolean());
        System.out.println("Language (full) AS BigInteger === " + jMetaDataText.getLanguageStringAsBigInteger());
        System.out.println("Language (full) AS URL === " + jMetaDataText.getLanguageStringAsURL());
        System.out.println("StreamSize_Demuxed/String4 AS Integer === " + jMetaDataText.getStreamSizeDemuxedString4AsInteger());
        System.out.println("StreamSize_Demuxed/String4 AS Long === " + jMetaDataText.getStreamSizeDemuxedString4AsLong());
        System.out.println("StreamSize_Demuxed/String4 AS LocalDateTime === " + jMetaDataText.getStreamSizeDemuxedString4AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String4 AS LocalTime === " + jMetaDataText.getStreamSizeDemuxedString4AsLocalTime());
        System.out.println("StreamSize_Demuxed/String4 AS String === " + jMetaDataText.getStreamSizeDemuxedString4AsString());
        System.out.println("StreamSize_Demuxed/String4 AS Boolean === " + jMetaDataText.getStreamSizeDemuxedString4AsBoolean());
        System.out.println("StreamSize_Demuxed/String4 AS BigInteger === " + jMetaDataText.getStreamSizeDemuxedString4AsBigInteger());
        System.out.println("StreamSize_Demuxed/String4 AS URL === " + jMetaDataText.getStreamSizeDemuxedString4AsURL());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Integer === " + jMetaDataText.getStreamSizeDemuxedString5AsInteger());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Long === " + jMetaDataText.getStreamSizeDemuxedString5AsLong());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS LocalDateTime === " + jMetaDataText.getStreamSizeDemuxedString5AsLocalDateTime());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS LocalTime === " + jMetaDataText.getStreamSizeDemuxedString5AsLocalTime());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS String === " + jMetaDataText.getStreamSizeDemuxedString5AsString());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Boolean === " + jMetaDataText.getStreamSizeDemuxedString5AsBoolean());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS BigInteger === " + jMetaDataText.getStreamSizeDemuxedString5AsBigInteger());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS URL === " + jMetaDataText.getStreamSizeDemuxedString5AsURL());
        System.out.println("StreamSize_Encoded/String4 AS Integer === " + jMetaDataText.getStreamSizeEncodedString4AsInteger());
        System.out.println("StreamSize_Encoded/String4 AS Long === " + jMetaDataText.getStreamSizeEncodedString4AsLong());
        System.out.println("StreamSize_Encoded/String4 AS LocalDateTime === " + jMetaDataText.getStreamSizeEncodedString4AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String4 AS LocalTime === " + jMetaDataText.getStreamSizeEncodedString4AsLocalTime());
        System.out.println("StreamSize_Encoded/String4 AS String === " + jMetaDataText.getStreamSizeEncodedString4AsString());
        System.out.println("StreamSize_Encoded/String4 AS Boolean === " + jMetaDataText.getStreamSizeEncodedString4AsBoolean());
        System.out.println("StreamSize_Encoded/String4 AS BigInteger === " + jMetaDataText.getStreamSizeEncodedString4AsBigInteger());
        System.out.println("StreamSize_Encoded/String4 AS URL === " + jMetaDataText.getStreamSizeEncodedString4AsURL());
        System.out.println("Original (in the raw stream) Frames per second (with measurement) AS Integer === " + jMetaDataText.getFrameRateOriginalStringAsInteger());
        System.out.println("Original (in the raw stream) Frames per second (with measurement) AS Long === " + jMetaDataText.getFrameRateOriginalStringAsLong());
        System.out.println("Original (in the raw stream) Frames per second (with measurement) AS LocalDateTime === " + jMetaDataText.getFrameRateOriginalStringAsLocalDateTime());
        System.out.println("Original (in the raw stream) Frames per second (with measurement) AS LocalTime === " + jMetaDataText.getFrameRateOriginalStringAsLocalTime());
        System.out.println("Original (in the raw stream) Frames per second (with measurement) AS String === " + jMetaDataText.getFrameRateOriginalStringAsString());
        System.out.println("Original (in the raw stream) Frames per second (with measurement) AS Boolean === " + jMetaDataText.getFrameRateOriginalStringAsBoolean());
        System.out.println("Original (in the raw stream) Frames per second (with measurement) AS BigInteger === " + jMetaDataText.getFrameRateOriginalStringAsBigInteger());
        System.out.println("Original (in the raw stream) Frames per second (with measurement) AS URL === " + jMetaDataText.getFrameRateOriginalStringAsURL());
        System.out.println("Number of displayed elements AS Integer === " + jMetaDataText.getElementCountAsInteger());
        System.out.println("Number of displayed elements AS Long === " + jMetaDataText.getElementCountAsLong());
        System.out.println("Number of displayed elements AS LocalDateTime === " + jMetaDataText.getElementCountAsLocalDateTime());
        System.out.println("Number of displayed elements AS LocalTime === " + jMetaDataText.getElementCountAsLocalTime());
        System.out.println("Number of displayed elements AS String === " + jMetaDataText.getElementCountAsString());
        System.out.println("Number of displayed elements AS Boolean === " + jMetaDataText.getElementCountAsBoolean());
        System.out.println("Number of displayed elements AS BigInteger === " + jMetaDataText.getElementCountAsBigInteger());
        System.out.println("Number of displayed elements AS URL === " + jMetaDataText.getElementCountAsURL());
        System.out.println("Encoded Streamsize in with percentage value AS Integer === " + jMetaDataText.getStreamSizeEncodedString5AsInteger());
        System.out.println("Encoded Streamsize in with percentage value AS Long === " + jMetaDataText.getStreamSizeEncodedString5AsLong());
        System.out.println("Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataText.getStreamSizeEncodedString5AsLocalDateTime());
        System.out.println("Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataText.getStreamSizeEncodedString5AsLocalTime());
        System.out.println("Encoded Streamsize in with percentage value AS String === " + jMetaDataText.getStreamSizeEncodedString5AsString());
        System.out.println("Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataText.getStreamSizeEncodedString5AsBoolean());
        System.out.println("Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataText.getStreamSizeEncodedString5AsBigInteger());
        System.out.println("Encoded Streamsize in with percentage value AS URL === " + jMetaDataText.getStreamSizeEncodedString5AsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataText.getDurationLastFrameString5AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataText.getDurationLastFrameString5AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataText.getDurationLastFrameString5AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataText.getDurationLastFrameString5AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataText.getDurationLastFrameString5AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataText.getDurationLastFrameString5AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataText.getDurationLastFrameString5AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataText.getDurationLastFrameString5AsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataText.getDurationLastFrameString4AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataText.getDurationLastFrameString4AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataText.getDurationLastFrameString4AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataText.getDurationLastFrameString4AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataText.getDurationLastFrameString4AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataText.getDurationLastFrameString4AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataText.getDurationLastFrameString4AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataText.getDurationLastFrameString4AsURL());
        System.out.println("StreamSize_Demuxed in with percentage value AS Integer === " + jMetaDataText.getStreamSizeDemuxedStringAsInteger());
        System.out.println("StreamSize_Demuxed in with percentage value AS Long === " + jMetaDataText.getStreamSizeDemuxedStringAsLong());
        System.out.println("StreamSize_Demuxed in with percentage value AS LocalDateTime === " + jMetaDataText.getStreamSizeDemuxedStringAsLocalDateTime());
        System.out.println("StreamSize_Demuxed in with percentage value AS LocalTime === " + jMetaDataText.getStreamSizeDemuxedStringAsLocalTime());
        System.out.println("StreamSize_Demuxed in with percentage value AS String === " + jMetaDataText.getStreamSizeDemuxedStringAsString());
        System.out.println("StreamSize_Demuxed in with percentage value AS Boolean === " + jMetaDataText.getStreamSizeDemuxedStringAsBoolean());
        System.out.println("StreamSize_Demuxed in with percentage value AS BigInteger === " + jMetaDataText.getStreamSizeDemuxedStringAsBigInteger());
        System.out.println("StreamSize_Demuxed in with percentage value AS URL === " + jMetaDataText.getStreamSizeDemuxedStringAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataText.getForcedStringAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataText.getForcedStringAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataText.getForcedStringAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataText.getForcedStringAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataText.getForcedStringAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataText.getForcedStringAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataText.getForcedStringAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataText.getForcedStringAsURL());
        System.out.println("BitDepth AS Integer === " + jMetaDataText.getBitDepthAsInteger());
        System.out.println("BitDepth AS Long === " + jMetaDataText.getBitDepthAsLong());
        System.out.println("BitDepth AS LocalDateTime === " + jMetaDataText.getBitDepthAsLocalDateTime());
        System.out.println("BitDepth AS LocalTime === " + jMetaDataText.getBitDepthAsLocalTime());
        System.out.println("BitDepth AS String === " + jMetaDataText.getBitDepthAsString());
        System.out.println("BitDepth AS Boolean === " + jMetaDataText.getBitDepthAsBoolean());
        System.out.println("BitDepth AS BigInteger === " + jMetaDataText.getBitDepthAsBigInteger());
        System.out.println("BitDepth AS URL === " + jMetaDataText.getBitDepthAsURL());
        System.out.println("Encoded Streamsize in bytes AS Integer === " + jMetaDataText.getStreamSizeEncodedAsInteger());
        System.out.println("Encoded Streamsize in bytes AS Long === " + jMetaDataText.getStreamSizeEncodedAsLong());
        System.out.println("Encoded Streamsize in bytes AS LocalDateTime === " + jMetaDataText.getStreamSizeEncodedAsLocalDateTime());
        System.out.println("Encoded Streamsize in bytes AS LocalTime === " + jMetaDataText.getStreamSizeEncodedAsLocalTime());
        System.out.println("Encoded Streamsize in bytes AS String === " + jMetaDataText.getStreamSizeEncodedAsString());
        System.out.println("Encoded Streamsize in bytes AS Boolean === " + jMetaDataText.getStreamSizeEncodedAsBoolean());
        System.out.println("Encoded Streamsize in bytes AS BigInteger === " + jMetaDataText.getStreamSizeEncodedAsBigInteger());
        System.out.println("Encoded Streamsize in bytes AS URL === " + jMetaDataText.getStreamSizeEncodedAsURL());
        System.out.println("Count of streams of that kind available AS Integer === " + jMetaDataText.getStreamCountAsInteger());
        System.out.println("Count of streams of that kind available AS Long === " + jMetaDataText.getStreamCountAsLong());
        System.out.println("Count of streams of that kind available AS LocalDateTime === " + jMetaDataText.getStreamCountAsLocalDateTime());
        System.out.println("Count of streams of that kind available AS LocalTime === " + jMetaDataText.getStreamCountAsLocalTime());
        System.out.println("Count of streams of that kind available AS String === " + jMetaDataText.getStreamCountAsString());
        System.out.println("Count of streams of that kind available AS Boolean === " + jMetaDataText.getStreamCountAsBoolean());
        System.out.println("Count of streams of that kind available AS BigInteger === " + jMetaDataText.getStreamCountAsBigInteger());
        System.out.println("Count of streams of that kind available AS URL === " + jMetaDataText.getStreamCountAsURL());
        System.out.println("Encoded Streamsize in with percentage value AS Integer === " + jMetaDataText.getStreamSizeEncodedStringAsInteger());
        System.out.println("Encoded Streamsize in with percentage value AS Long === " + jMetaDataText.getStreamSizeEncodedStringAsLong());
        System.out.println("Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataText.getStreamSizeEncodedStringAsLocalDateTime());
        System.out.println("Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataText.getStreamSizeEncodedStringAsLocalTime());
        System.out.println("Encoded Streamsize in with percentage value AS String === " + jMetaDataText.getStreamSizeEncodedStringAsString());
        System.out.println("Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataText.getStreamSizeEncodedStringAsBoolean());
        System.out.println("Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataText.getStreamSizeEncodedStringAsBigInteger());
        System.out.println("Encoded Streamsize in with percentage value AS URL === " + jMetaDataText.getStreamSizeEncodedStringAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getDurationString2AsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getDurationString2AsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getDurationString2AsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getDurationString2AsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getDurationString2AsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getDurationString2AsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getDurationString2AsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getDurationString2AsURL());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Integer === " + jMetaDataText.getDurationString3AsInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Long === " + jMetaDataText.getDurationString3AsLong());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataText.getDurationString3AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataText.getDurationString3AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS String === " + jMetaDataText.getDurationString3AsString());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataText.getDurationString3AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataText.getDurationString3AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS URL === " + jMetaDataText.getDurationString3AsURL());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataText.getDurationString1AsInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataText.getDurationString1AsLong());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataText.getDurationString1AsLocalDateTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataText.getDurationString1AsLocalTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataText.getDurationString1AsString());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataText.getDurationString1AsBoolean());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataText.getDurationString1AsBigInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataText.getDurationString1AsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataText.getDurationString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataText.getDurationString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataText.getDurationString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataText.getDurationString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataText.getDurationString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataText.getDurationString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataText.getDurationString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataText.getDurationString4AsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataText.getDurationString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataText.getDurationString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataText.getDurationString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataText.getDurationString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataText.getDurationString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataText.getDurationString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataText.getDurationString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataText.getDurationString5AsURL());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Integer === " + jMetaDataText.getBitRateEncodedAsInteger());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Long === " + jMetaDataText.getBitRateEncodedAsLong());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS LocalDateTime === " + jMetaDataText.getBitRateEncodedAsLocalDateTime());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS LocalTime === " + jMetaDataText.getBitRateEncodedAsLocalTime());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS String === " + jMetaDataText.getBitRateEncodedAsString());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Boolean === " + jMetaDataText.getBitRateEncodedAsBoolean());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS BigInteger === " + jMetaDataText.getBitRateEncodedAsBigInteger());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS URL === " + jMetaDataText.getBitRateEncodedAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataText.getDelaySourceAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataText.getDelaySourceAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataText.getDelaySourceAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataText.getDelaySourceAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataText.getDelaySourceAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataText.getDelaySourceAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataText.getDelaySourceAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataText.getDelaySourceAsURL());
        System.out.println("Delay drop frame info AS Integer === " + jMetaDataText.getDelayOriginalDropFrameAsInteger());
        System.out.println("Delay drop frame info AS Long === " + jMetaDataText.getDelayOriginalDropFrameAsLong());
        System.out.println("Delay drop frame info AS LocalDateTime === " + jMetaDataText.getDelayOriginalDropFrameAsLocalDateTime());
        System.out.println("Delay drop frame info AS LocalTime === " + jMetaDataText.getDelayOriginalDropFrameAsLocalTime());
        System.out.println("Delay drop frame info AS String === " + jMetaDataText.getDelayOriginalDropFrameAsString());
        System.out.println("Delay drop frame info AS Boolean === " + jMetaDataText.getDelayOriginalDropFrameAsBoolean());
        System.out.println("Delay drop frame info AS BigInteger === " + jMetaDataText.getDelayOriginalDropFrameAsBigInteger());
        System.out.println("Delay drop frame info AS URL === " + jMetaDataText.getDelayOriginalDropFrameAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataText.getDurationLastFrameString1AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataText.getDurationLastFrameString1AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataText.getDurationLastFrameString1AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataText.getDurationLastFrameString1AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataText.getDurationLastFrameString1AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataText.getDurationLastFrameString1AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataText.getDurationLastFrameString1AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataText.getDurationLastFrameString1AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataText.getDelayOriginalStringAsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataText.getDelayOriginalStringAsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataText.getDelayOriginalStringAsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataText.getDelayOriginalStringAsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataText.getDelayOriginalStringAsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataText.getDelayOriginalStringAsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataText.getDelayOriginalStringAsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataText.getDelayOriginalStringAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataText.getDurationLastFrameString3AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataText.getDurationLastFrameString3AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataText.getDurationLastFrameString3AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataText.getDurationLastFrameString3AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataText.getDurationLastFrameString3AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataText.getDurationLastFrameString3AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataText.getDurationLastFrameString3AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataText.getDurationLastFrameString3AsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getDurationLastFrameString2AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getDurationLastFrameString2AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getDurationLastFrameString2AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getDurationLastFrameString2AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getDurationLastFrameString2AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getDurationLastFrameString2AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getDurationLastFrameString2AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getDurationLastFrameString2AsURL());
        System.out.println("StreamSize in bytes of hte stream after demux AS Integer === " + jMetaDataText.getStreamSizeDemuxedAsInteger());
        System.out.println("StreamSize in bytes of hte stream after demux AS Long === " + jMetaDataText.getStreamSizeDemuxedAsLong());
        System.out.println("StreamSize in bytes of hte stream after demux AS LocalDateTime === " + jMetaDataText.getStreamSizeDemuxedAsLocalDateTime());
        System.out.println("StreamSize in bytes of hte stream after demux AS LocalTime === " + jMetaDataText.getStreamSizeDemuxedAsLocalTime());
        System.out.println("StreamSize in bytes of hte stream after demux AS String === " + jMetaDataText.getStreamSizeDemuxedAsString());
        System.out.println("StreamSize in bytes of hte stream after demux AS Boolean === " + jMetaDataText.getStreamSizeDemuxedAsBoolean());
        System.out.println("StreamSize in bytes of hte stream after demux AS BigInteger === " + jMetaDataText.getStreamSizeDemuxedAsBigInteger());
        System.out.println("StreamSize in bytes of hte stream after demux AS URL === " + jMetaDataText.getStreamSizeDemuxedAsURL());
        System.out.println("Settings needed for decoder used AS Integer === " + jMetaDataText.getFormatSettingsAsInteger());
        System.out.println("Settings needed for decoder used AS Long === " + jMetaDataText.getFormatSettingsAsLong());
        System.out.println("Settings needed for decoder used AS LocalDateTime === " + jMetaDataText.getFormatSettingsAsLocalDateTime());
        System.out.println("Settings needed for decoder used AS LocalTime === " + jMetaDataText.getFormatSettingsAsLocalTime());
        System.out.println("Settings needed for decoder used AS String === " + jMetaDataText.getFormatSettingsAsString());
        System.out.println("Settings needed for decoder used AS Boolean === " + jMetaDataText.getFormatSettingsAsBoolean());
        System.out.println("Settings needed for decoder used AS BigInteger === " + jMetaDataText.getFormatSettingsAsBigInteger());
        System.out.println("Settings needed for decoder used AS URL === " + jMetaDataText.getFormatSettingsAsURL());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataText.getFirstPacketOrderAsInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataText.getFirstPacketOrderAsLong());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataText.getFirstPacketOrderAsLocalDateTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataText.getFirstPacketOrderAsLocalTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataText.getFirstPacketOrderAsString());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataText.getFirstPacketOrderAsBoolean());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataText.getFirstPacketOrderAsBigInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataText.getFirstPacketOrderAsURL());
        System.out.println("Video_Delay/String5 AS Integer === " + jMetaDataText.getVideoDelayString5AsInteger());
        System.out.println("Video_Delay/String5 AS Long === " + jMetaDataText.getVideoDelayString5AsLong());
        System.out.println("Video_Delay/String5 AS LocalDateTime === " + jMetaDataText.getVideoDelayString5AsLocalDateTime());
        System.out.println("Video_Delay/String5 AS LocalTime === " + jMetaDataText.getVideoDelayString5AsLocalTime());
        System.out.println("Video_Delay/String5 AS String === " + jMetaDataText.getVideoDelayString5AsString());
        System.out.println("Video_Delay/String5 AS Boolean === " + jMetaDataText.getVideoDelayString5AsBoolean());
        System.out.println("Video_Delay/String5 AS BigInteger === " + jMetaDataText.getVideoDelayString5AsBigInteger());
        System.out.println("Video_Delay/String5 AS URL === " + jMetaDataText.getVideoDelayString5AsURL());
        System.out.println("Video_Delay/String1 AS Integer === " + jMetaDataText.getVideoDelayString1AsInteger());
        System.out.println("Video_Delay/String1 AS Long === " + jMetaDataText.getVideoDelayString1AsLong());
        System.out.println("Video_Delay/String1 AS LocalDateTime === " + jMetaDataText.getVideoDelayString1AsLocalDateTime());
        System.out.println("Video_Delay/String1 AS LocalTime === " + jMetaDataText.getVideoDelayString1AsLocalTime());
        System.out.println("Video_Delay/String1 AS String === " + jMetaDataText.getVideoDelayString1AsString());
        System.out.println("Video_Delay/String1 AS Boolean === " + jMetaDataText.getVideoDelayString1AsBoolean());
        System.out.println("Video_Delay/String1 AS BigInteger === " + jMetaDataText.getVideoDelayString1AsBigInteger());
        System.out.println("Video_Delay/String1 AS URL === " + jMetaDataText.getVideoDelayString1AsURL());
        System.out.println("Video_Delay/String2 AS Integer === " + jMetaDataText.getVideoDelayString2AsInteger());
        System.out.println("Video_Delay/String2 AS Long === " + jMetaDataText.getVideoDelayString2AsLong());
        System.out.println("Video_Delay/String2 AS LocalDateTime === " + jMetaDataText.getVideoDelayString2AsLocalDateTime());
        System.out.println("Video_Delay/String2 AS LocalTime === " + jMetaDataText.getVideoDelayString2AsLocalTime());
        System.out.println("Video_Delay/String2 AS String === " + jMetaDataText.getVideoDelayString2AsString());
        System.out.println("Video_Delay/String2 AS Boolean === " + jMetaDataText.getVideoDelayString2AsBoolean());
        System.out.println("Video_Delay/String2 AS BigInteger === " + jMetaDataText.getVideoDelayString2AsBigInteger());
        System.out.println("Video_Delay/String2 AS URL === " + jMetaDataText.getVideoDelayString2AsURL());
        System.out.println("Video_Delay/String3 AS Integer === " + jMetaDataText.getVideoDelayString3AsInteger());
        System.out.println("Video_Delay/String3 AS Long === " + jMetaDataText.getVideoDelayString3AsLong());
        System.out.println("Video_Delay/String3 AS LocalDateTime === " + jMetaDataText.getVideoDelayString3AsLocalDateTime());
        System.out.println("Video_Delay/String3 AS LocalTime === " + jMetaDataText.getVideoDelayString3AsLocalTime());
        System.out.println("Video_Delay/String3 AS String === " + jMetaDataText.getVideoDelayString3AsString());
        System.out.println("Video_Delay/String3 AS Boolean === " + jMetaDataText.getVideoDelayString3AsBoolean());
        System.out.println("Video_Delay/String3 AS BigInteger === " + jMetaDataText.getVideoDelayString3AsBigInteger());
        System.out.println("Video_Delay/String3 AS URL === " + jMetaDataText.getVideoDelayString3AsURL());
        System.out.println("Video_Delay/String4 AS Integer === " + jMetaDataText.getVideoDelayString4AsInteger());
        System.out.println("Video_Delay/String4 AS Long === " + jMetaDataText.getVideoDelayString4AsLong());
        System.out.println("Video_Delay/String4 AS LocalDateTime === " + jMetaDataText.getVideoDelayString4AsLocalDateTime());
        System.out.println("Video_Delay/String4 AS LocalTime === " + jMetaDataText.getVideoDelayString4AsLocalTime());
        System.out.println("Video_Delay/String4 AS String === " + jMetaDataText.getVideoDelayString4AsString());
        System.out.println("Video_Delay/String4 AS Boolean === " + jMetaDataText.getVideoDelayString4AsBoolean());
        System.out.println("Video_Delay/String4 AS BigInteger === " + jMetaDataText.getVideoDelayString4AsBigInteger());
        System.out.println("Video_Delay/String4 AS URL === " + jMetaDataText.getVideoDelayString4AsURL());
        System.out.println("Nominal Bit rate (with measurement) AS Integer === " + jMetaDataText.getBitRateNominalStringAsInteger());
        System.out.println("Nominal Bit rate (with measurement) AS Long === " + jMetaDataText.getBitRateNominalStringAsLong());
        System.out.println("Nominal Bit rate (with measurement) AS LocalDateTime === " + jMetaDataText.getBitRateNominalStringAsLocalDateTime());
        System.out.println("Nominal Bit rate (with measurement) AS LocalTime === " + jMetaDataText.getBitRateNominalStringAsLocalTime());
        System.out.println("Nominal Bit rate (with measurement) AS String === " + jMetaDataText.getBitRateNominalStringAsString());
        System.out.println("Nominal Bit rate (with measurement) AS Boolean === " + jMetaDataText.getBitRateNominalStringAsBoolean());
        System.out.println("Nominal Bit rate (with measurement) AS BigInteger === " + jMetaDataText.getBitRateNominalStringAsBigInteger());
        System.out.println("Nominal Bit rate (with measurement) AS URL === " + jMetaDataText.getBitRateNominalStringAsURL());
        System.out.println("Format used AS Integer === " + jMetaDataText.getFormatAsInteger());
        System.out.println("Format used AS Long === " + jMetaDataText.getFormatAsLong());
        System.out.println("Format used AS LocalDateTime === " + jMetaDataText.getFormatAsLocalDateTime());
        System.out.println("Format used AS LocalTime === " + jMetaDataText.getFormatAsLocalTime());
        System.out.println("Format used AS String === " + jMetaDataText.getFormatAsString());
        System.out.println("Format used AS Boolean === " + jMetaDataText.getFormatAsBoolean());
        System.out.println("Format used AS BigInteger === " + jMetaDataText.getFormatAsBigInteger());
        System.out.println("Format used AS URL === " + jMetaDataText.getFormatAsURL());
        System.out.println("Height AS Integer === " + jMetaDataText.getHeightAsInteger());
        System.out.println("Height AS Long === " + jMetaDataText.getHeightAsLong());
        System.out.println("Height AS LocalDateTime === " + jMetaDataText.getHeightAsLocalDateTime());
        System.out.println("Height AS LocalTime === " + jMetaDataText.getHeightAsLocalTime());
        System.out.println("Height AS String === " + jMetaDataText.getHeightAsString());
        System.out.println("Height AS Boolean === " + jMetaDataText.getHeightAsBoolean());
        System.out.println("Height AS BigInteger === " + jMetaDataText.getHeightAsBigInteger());
        System.out.println("Height AS URL === " + jMetaDataText.getHeightAsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataText.getCodecIDStringAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataText.getCodecIDStringAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataText.getCodecIDStringAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataText.getCodecIDStringAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataText.getCodecIDStringAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataText.getCodecIDStringAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataText.getCodecIDStringAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataText.getCodecIDStringAsURL());
        System.out.println("Name of the company AS Integer === " + jMetaDataText.getEncodedLibraryCompanyNameAsInteger());
        System.out.println("Name of the company AS Long === " + jMetaDataText.getEncodedLibraryCompanyNameAsLong());
        System.out.println("Name of the company AS LocalDateTime === " + jMetaDataText.getEncodedLibraryCompanyNameAsLocalDateTime());
        System.out.println("Name of the company AS LocalTime === " + jMetaDataText.getEncodedLibraryCompanyNameAsLocalTime());
        System.out.println("Name of the company AS String === " + jMetaDataText.getEncodedLibraryCompanyNameAsString());
        System.out.println("Name of the company AS Boolean === " + jMetaDataText.getEncodedLibraryCompanyNameAsBoolean());
        System.out.println("Name of the company AS BigInteger === " + jMetaDataText.getEncodedLibraryCompanyNameAsBigInteger());
        System.out.println("Name of the company AS URL === " + jMetaDataText.getEncodedLibraryCompanyNameAsURL());
        System.out.println("Source Streamsize in bytes AS Integer === " + jMetaDataText.getSourceStreamSizeAsInteger());
        System.out.println("Source Streamsize in bytes AS Long === " + jMetaDataText.getSourceStreamSizeAsLong());
        System.out.println("Source Streamsize in bytes AS LocalDateTime === " + jMetaDataText.getSourceStreamSizeAsLocalDateTime());
        System.out.println("Source Streamsize in bytes AS LocalTime === " + jMetaDataText.getSourceStreamSizeAsLocalTime());
        System.out.println("Source Streamsize in bytes AS String === " + jMetaDataText.getSourceStreamSizeAsString());
        System.out.println("Source Streamsize in bytes AS Boolean === " + jMetaDataText.getSourceStreamSizeAsBoolean());
        System.out.println("Source Streamsize in bytes AS BigInteger === " + jMetaDataText.getSourceStreamSizeAsBigInteger());
        System.out.println("Source Streamsize in bytes AS URL === " + jMetaDataText.getSourceStreamSizeAsURL());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Integer === " + jMetaDataText.getFormatCommercialAsInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Long === " + jMetaDataText.getFormatCommercialAsLong());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalDateTime === " + jMetaDataText.getFormatCommercialAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalTime === " + jMetaDataText.getFormatCommercialAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS String === " + jMetaDataText.getFormatCommercialAsString());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Boolean === " + jMetaDataText.getFormatCommercialAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS BigInteger === " + jMetaDataText.getFormatCommercialAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS URL === " + jMetaDataText.getFormatCommercialAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataText.getDelaySourceStringAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataText.getDelaySourceStringAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataText.getDelaySourceStringAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataText.getDelaySourceStringAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataText.getDelaySourceStringAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataText.getDelaySourceStringAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataText.getDelaySourceStringAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataText.getDelaySourceStringAsURL());
        System.out.println("Nominal Bit rate in bps AS Integer === " + jMetaDataText.getBitRateNominalAsInteger());
        System.out.println("Nominal Bit rate in bps AS Long === " + jMetaDataText.getBitRateNominalAsLong());
        System.out.println("Nominal Bit rate in bps AS LocalDateTime === " + jMetaDataText.getBitRateNominalAsLocalDateTime());
        System.out.println("Nominal Bit rate in bps AS LocalTime === " + jMetaDataText.getBitRateNominalAsLocalTime());
        System.out.println("Nominal Bit rate in bps AS String === " + jMetaDataText.getBitRateNominalAsString());
        System.out.println("Nominal Bit rate in bps AS Boolean === " + jMetaDataText.getBitRateNominalAsBoolean());
        System.out.println("Nominal Bit rate in bps AS BigInteger === " + jMetaDataText.getBitRateNominalAsBigInteger());
        System.out.println("Nominal Bit rate in bps AS URL === " + jMetaDataText.getBitRateNominalAsURL());
        System.out.println("Minimum Bit rate in bps AS Integer === " + jMetaDataText.getBitRateMinimumAsInteger());
        System.out.println("Minimum Bit rate in bps AS Long === " + jMetaDataText.getBitRateMinimumAsLong());
        System.out.println("Minimum Bit rate in bps AS LocalDateTime === " + jMetaDataText.getBitRateMinimumAsLocalDateTime());
        System.out.println("Minimum Bit rate in bps AS LocalTime === " + jMetaDataText.getBitRateMinimumAsLocalTime());
        System.out.println("Minimum Bit rate in bps AS String === " + jMetaDataText.getBitRateMinimumAsString());
        System.out.println("Minimum Bit rate in bps AS Boolean === " + jMetaDataText.getBitRateMinimumAsBoolean());
        System.out.println("Minimum Bit rate in bps AS BigInteger === " + jMetaDataText.getBitRateMinimumAsBigInteger());
        System.out.println("Minimum Bit rate in bps AS URL === " + jMetaDataText.getBitRateMinimumAsURL());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataText.getSourceDurationStringAsInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataText.getSourceDurationStringAsLong());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataText.getSourceDurationStringAsLocalDateTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataText.getSourceDurationStringAsLocalTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataText.getSourceDurationStringAsString());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataText.getSourceDurationStringAsBoolean());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataText.getSourceDurationStringAsBigInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataText.getSourceDurationStringAsURL());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Integer === " + jMetaDataText.getBitRateEncodedStringAsInteger());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Long === " + jMetaDataText.getBitRateEncodedStringAsLong());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS LocalDateTime === " + jMetaDataText.getBitRateEncodedStringAsLocalDateTime());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS LocalTime === " + jMetaDataText.getBitRateEncodedStringAsLocalTime());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS String === " + jMetaDataText.getBitRateEncodedStringAsString());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Boolean === " + jMetaDataText.getBitRateEncodedStringAsBoolean());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS BigInteger === " + jMetaDataText.getBitRateEncodedStringAsBigInteger());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS URL === " + jMetaDataText.getBitRateEncodedStringAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataText.getStreamKindStringAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataText.getStreamKindStringAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataText.getStreamKindStringAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataText.getStreamKindStringAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataText.getStreamKindStringAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataText.getStreamKindStringAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataText.getStreamKindStringAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataText.getStreamKindStringAsURL());
        System.out.println("ChromaSubsampling AS Integer === " + jMetaDataText.getChromaSubsamplingAsInteger());
        System.out.println("ChromaSubsampling AS Long === " + jMetaDataText.getChromaSubsamplingAsLong());
        System.out.println("ChromaSubsampling AS LocalDateTime === " + jMetaDataText.getChromaSubsamplingAsLocalDateTime());
        System.out.println("ChromaSubsampling AS LocalTime === " + jMetaDataText.getChromaSubsamplingAsLocalTime());
        System.out.println("ChromaSubsampling AS String === " + jMetaDataText.getChromaSubsamplingAsString());
        System.out.println("ChromaSubsampling AS Boolean === " + jMetaDataText.getChromaSubsamplingAsBoolean());
        System.out.println("ChromaSubsampling AS BigInteger === " + jMetaDataText.getChromaSubsamplingAsBigInteger());
        System.out.println("ChromaSubsampling AS URL === " + jMetaDataText.getChromaSubsamplingAsURL());
        System.out.println("Version of the product AS Integer === " + jMetaDataText.getEncodedApplicationVersionAsInteger());
        System.out.println("Version of the product AS Long === " + jMetaDataText.getEncodedApplicationVersionAsLong());
        System.out.println("Version of the product AS LocalDateTime === " + jMetaDataText.getEncodedApplicationVersionAsLocalDateTime());
        System.out.println("Version of the product AS LocalTime === " + jMetaDataText.getEncodedApplicationVersionAsLocalTime());
        System.out.println("Version of the product AS String === " + jMetaDataText.getEncodedApplicationVersionAsString());
        System.out.println("Version of the product AS Boolean === " + jMetaDataText.getEncodedApplicationVersionAsBoolean());
        System.out.println("Version of the product AS BigInteger === " + jMetaDataText.getEncodedApplicationVersionAsBigInteger());
        System.out.println("Version of the product AS URL === " + jMetaDataText.getEncodedApplicationVersionAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataText.getMenuIDAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataText.getMenuIDAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataText.getMenuIDAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataText.getMenuIDAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataText.getMenuIDAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataText.getMenuIDAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataText.getMenuIDAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataText.getMenuIDAsURL());
        System.out.println("Number of a group in order to provide versions of the same track AS Integer === " + jMetaDataText.getAlternateGroupStringAsInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS Long === " + jMetaDataText.getAlternateGroupStringAsLong());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalDateTime === " + jMetaDataText.getAlternateGroupStringAsLocalDateTime());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalTime === " + jMetaDataText.getAlternateGroupStringAsLocalTime());
        System.out.println("Number of a group in order to provide versions of the same track AS String === " + jMetaDataText.getAlternateGroupStringAsString());
        System.out.println("Number of a group in order to provide versions of the same track AS Boolean === " + jMetaDataText.getAlternateGroupStringAsBoolean());
        System.out.println("Number of a group in order to provide versions of the same track AS BigInteger === " + jMetaDataText.getAlternateGroupStringAsBigInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS URL === " + jMetaDataText.getAlternateGroupStringAsURL());
        System.out.println("Summary AS Integer === " + jMetaDataText.getSummaryAsInteger());
        System.out.println("Summary AS Long === " + jMetaDataText.getSummaryAsLong());
        System.out.println("Summary AS LocalDateTime === " + jMetaDataText.getSummaryAsLocalDateTime());
        System.out.println("Summary AS LocalTime === " + jMetaDataText.getSummaryAsLocalTime());
        System.out.println("Summary AS String === " + jMetaDataText.getSummaryAsString());
        System.out.println("Summary AS Boolean === " + jMetaDataText.getSummaryAsBoolean());
        System.out.println("Summary AS BigInteger === " + jMetaDataText.getSummaryAsBigInteger());
        System.out.println("Summary AS URL === " + jMetaDataText.getSummaryAsURL());
    }

}
