package aka.jmetadata.test;

import org.eclipse.jdt.annotation.NonNull;

import aka.jmetadata.main.JMetaDataAudio;

/**
 * This class contains tests methods for Audio informations of a specific Audio stream.
 *
 * @author Welle Charlotte
 */
public final class JMetaDataAudio_JUnitTest {

   /**
    * Print Audio informations.
    * 
    * @param jMetaDataAudio to be printed
    */
    static void printJMetadataAudio(@NonNull final JMetaDataAudio jMetaDataAudio) {
        System.out.println("JMetaDataAudio");
        System.out.println("-------------------------------------------------------");
        System.out.println("Delay source (Stream or empty) AS Integer === " + jMetaDataAudio.getDelayOriginalSourceAsInteger());
        System.out.println("Delay source (Stream or empty) AS Long === " + jMetaDataAudio.getDelayOriginalSourceAsLong());
        System.out.println("Delay source (Stream or empty) AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalSourceAsLocalDateTime());
        System.out.println("Delay source (Stream or empty) AS LocalTime === " + jMetaDataAudio.getDelayOriginalSourceAsLocalTime());
        System.out.println("Delay source (Stream or empty) AS String === " + jMetaDataAudio.getDelayOriginalSourceAsString());
        System.out.println("Delay source (Stream or empty) AS Boolean === " + jMetaDataAudio.getDelayOriginalSourceAsBoolean());
        System.out.println("Delay source (Stream or empty) AS BigInteger === " + jMetaDataAudio.getDelayOriginalSourceAsBigInteger());
        System.out.println("Delay source (Stream or empty) AS URL === " + jMetaDataAudio.getDelayOriginalSourceAsURL());
        System.out.println("Between how much time (ms) the stream is inserted AS Integer === " + jMetaDataAudio.getInterleaveDurationAsInteger());
        System.out.println("Between how much time (ms) the stream is inserted AS Long === " + jMetaDataAudio.getInterleaveDurationAsLong());
        System.out.println("Between how much time (ms) the stream is inserted AS LocalDateTime === " + jMetaDataAudio.getInterleaveDurationAsLocalDateTime());
        System.out.println("Between how much time (ms) the stream is inserted AS LocalTime === " + jMetaDataAudio.getInterleaveDurationAsLocalTime());
        System.out.println("Between how much time (ms) the stream is inserted AS String === " + jMetaDataAudio.getInterleaveDurationAsString());
        System.out.println("Between how much time (ms) the stream is inserted AS Boolean === " + jMetaDataAudio.getInterleaveDurationAsBoolean());
        System.out.println("Between how much time (ms) the stream is inserted AS BigInteger === " + jMetaDataAudio.getInterleaveDurationAsBigInteger());
        System.out.println("Between how much time (ms) the stream is inserted AS URL === " + jMetaDataAudio.getInterleaveDurationAsURL());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataAudio.getStreamOrderAsInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataAudio.getStreamOrderAsLong());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataAudio.getStreamOrderAsLocalDateTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataAudio.getStreamOrderAsLocalTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataAudio.getStreamOrderAsString());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataAudio.getStreamOrderAsBoolean());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataAudio.getStreamOrderAsBigInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataAudio.getStreamOrderAsURL());
        System.out.println("Name of the the encoding-software AS Integer === " + jMetaDataAudio.getEncodedLibraryNameAsInteger());
        System.out.println("Name of the the encoding-software AS Long === " + jMetaDataAudio.getEncodedLibraryNameAsLong());
        System.out.println("Name of the the encoding-software AS LocalDateTime === " + jMetaDataAudio.getEncodedLibraryNameAsLocalDateTime());
        System.out.println("Name of the the encoding-software AS LocalTime === " + jMetaDataAudio.getEncodedLibraryNameAsLocalTime());
        System.out.println("Name of the the encoding-software AS String === " + jMetaDataAudio.getEncodedLibraryNameAsString());
        System.out.println("Name of the the encoding-software AS Boolean === " + jMetaDataAudio.getEncodedLibraryNameAsBoolean());
        System.out.println("Name of the the encoding-software AS BigInteger === " + jMetaDataAudio.getEncodedLibraryNameAsBigInteger());
        System.out.println("Name of the the encoding-software AS URL === " + jMetaDataAudio.getEncodedLibraryNameAsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataAudio.getDurationFirstFrameString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataAudio.getDurationFirstFrameString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataAudio.getDurationFirstFrameString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataAudio.getDurationFirstFrameString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataAudio.getDurationFirstFrameString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataAudio.getDurationFirstFrameString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataAudio.getDurationFirstFrameString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataAudio.getDurationFirstFrameString4AsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataAudio.getDurationFirstFrameString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataAudio.getDurationFirstFrameString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataAudio.getDurationFirstFrameString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataAudio.getDurationFirstFrameString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataAudio.getDurationFirstFrameString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataAudio.getDurationFirstFrameString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataAudio.getDurationFirstFrameString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataAudio.getDurationFirstFrameString5AsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getDurationFirstFrameString2AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getDurationFirstFrameString2AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationFirstFrameString2AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getDurationFirstFrameString2AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getDurationFirstFrameString2AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getDurationFirstFrameString2AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getDurationFirstFrameString2AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getDurationFirstFrameString2AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationFirstFrameStringAsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getSourceDurationFirstFrameStringAsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationFirstFrameStringAsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationFirstFrameStringAsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getSourceDurationFirstFrameStringAsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationFirstFrameStringAsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationFirstFrameStringAsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getSourceDurationFirstFrameStringAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataAudio.getDurationFirstFrameString3AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataAudio.getDurationFirstFrameString3AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataAudio.getDurationFirstFrameString3AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataAudio.getDurationFirstFrameString3AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataAudio.getDurationFirstFrameString3AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataAudio.getDurationFirstFrameString3AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataAudio.getDurationFirstFrameString3AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataAudio.getDurationFirstFrameString3AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Integer === " + jMetaDataAudio.getSourceDurationLastFrameAsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Long === " + jMetaDataAudio.getSourceDurationLastFrameAsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataAudio.getSourceDurationLastFrameAsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS LocalTime === " + jMetaDataAudio.getSourceDurationLastFrameAsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS String === " + jMetaDataAudio.getSourceDurationLastFrameAsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS Boolean === " + jMetaDataAudio.getSourceDurationLastFrameAsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS BigInteger === " + jMetaDataAudio.getSourceDurationLastFrameAsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in ms AS URL === " + jMetaDataAudio.getSourceDurationLastFrameAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataAudio.getDurationFirstFrameString1AsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataAudio.getDurationFirstFrameString1AsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationFirstFrameString1AsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataAudio.getDurationFirstFrameString1AsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataAudio.getDurationFirstFrameString1AsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataAudio.getDurationFirstFrameString1AsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataAudio.getDurationFirstFrameString1AsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataAudio.getDurationFirstFrameString1AsURL());
        System.out.println("How much time is buffered before the first video frame (with measurement) AS Integer === " + jMetaDataAudio.getInterleavePreloadStringAsInteger());
        System.out.println("How much time is buffered before the first video frame (with measurement) AS Long === " + jMetaDataAudio.getInterleavePreloadStringAsLong());
        System.out.println("How much time is buffered before the first video frame (with measurement) AS LocalDateTime === " + jMetaDataAudio.getInterleavePreloadStringAsLocalDateTime());
        System.out.println("How much time is buffered before the first video frame (with measurement) AS LocalTime === " + jMetaDataAudio.getInterleavePreloadStringAsLocalTime());
        System.out.println("How much time is buffered before the first video frame (with measurement) AS String === " + jMetaDataAudio.getInterleavePreloadStringAsString());
        System.out.println("How much time is buffered before the first video frame (with measurement) AS Boolean === " + jMetaDataAudio.getInterleavePreloadStringAsBoolean());
        System.out.println("How much time is buffered before the first video frame (with measurement) AS BigInteger === " + jMetaDataAudio.getInterleavePreloadStringAsBigInteger());
        System.out.println("How much time is buffered before the first video frame (with measurement) AS URL === " + jMetaDataAudio.getInterleavePreloadStringAsURL());
        System.out.println("Compression method used AS Integer === " + jMetaDataAudio.getFormatCompressionAsInteger());
        System.out.println("Compression method used AS Long === " + jMetaDataAudio.getFormatCompressionAsLong());
        System.out.println("Compression method used AS LocalDateTime === " + jMetaDataAudio.getFormatCompressionAsLocalDateTime());
        System.out.println("Compression method used AS LocalTime === " + jMetaDataAudio.getFormatCompressionAsLocalTime());
        System.out.println("Compression method used AS String === " + jMetaDataAudio.getFormatCompressionAsString());
        System.out.println("Compression method used AS Boolean === " + jMetaDataAudio.getFormatCompressionAsBoolean());
        System.out.println("Compression method used AS BigInteger === " + jMetaDataAudio.getFormatCompressionAsBigInteger());
        System.out.println("Compression method used AS URL === " + jMetaDataAudio.getFormatCompressionAsURL());
        System.out.println("Where this stream file is aligned in the container AS Integer === " + jMetaDataAudio.getAlignmentStringAsInteger());
        System.out.println("Where this stream file is aligned in the container AS Long === " + jMetaDataAudio.getAlignmentStringAsLong());
        System.out.println("Where this stream file is aligned in the container AS LocalDateTime === " + jMetaDataAudio.getAlignmentStringAsLocalDateTime());
        System.out.println("Where this stream file is aligned in the container AS LocalTime === " + jMetaDataAudio.getAlignmentStringAsLocalTime());
        System.out.println("Where this stream file is aligned in the container AS String === " + jMetaDataAudio.getAlignmentStringAsString());
        System.out.println("Where this stream file is aligned in the container AS Boolean === " + jMetaDataAudio.getAlignmentStringAsBoolean());
        System.out.println("Where this stream file is aligned in the container AS BigInteger === " + jMetaDataAudio.getAlignmentStringAsBigInteger());
        System.out.println("Where this stream file is aligned in the container AS URL === " + jMetaDataAudio.getAlignmentStringAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataAudio.getDelayStringAsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataAudio.getDelayStringAsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataAudio.getDelayStringAsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataAudio.getDelayStringAsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataAudio.getDelayStringAsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataAudio.getDelayStringAsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataAudio.getDelayStringAsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataAudio.getDelayStringAsURL());
        System.out.println("More info (text) about the muxing mode AS Integer === " + jMetaDataAudio.getMuxingModeMoreInfoAsInteger());
        System.out.println("More info (text) about the muxing mode AS Long === " + jMetaDataAudio.getMuxingModeMoreInfoAsLong());
        System.out.println("More info (text) about the muxing mode AS LocalDateTime === " + jMetaDataAudio.getMuxingModeMoreInfoAsLocalDateTime());
        System.out.println("More info (text) about the muxing mode AS LocalTime === " + jMetaDataAudio.getMuxingModeMoreInfoAsLocalTime());
        System.out.println("More info (text) about the muxing mode AS String === " + jMetaDataAudio.getMuxingModeMoreInfoAsString());
        System.out.println("More info (text) about the muxing mode AS Boolean === " + jMetaDataAudio.getMuxingModeMoreInfoAsBoolean());
        System.out.println("More info (text) about the muxing mode AS BigInteger === " + jMetaDataAudio.getMuxingModeMoreInfoAsBigInteger());
        System.out.println("More info (text) about the muxing mode AS URL === " + jMetaDataAudio.getMuxingModeMoreInfoAsURL());
        System.out.println("Source Encoded Streamsize in with percentage value AS Integer === " + jMetaDataAudio.getSourceStreamSizeEncodedStringAsInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS Long === " + jMetaDataAudio.getSourceStreamSizeEncodedStringAsLong());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeEncodedStringAsLocalDateTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeEncodedStringAsLocalTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS String === " + jMetaDataAudio.getSourceStreamSizeEncodedStringAsString());
        System.out.println("Source Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataAudio.getSourceStreamSizeEncodedStringAsBoolean());
        System.out.println("Source Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeEncodedStringAsBigInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS URL === " + jMetaDataAudio.getSourceStreamSizeEncodedStringAsURL());
        System.out.println("Manual description given by the container AS Integer === " + jMetaDataAudio.getCodecIDDescriptionAsInteger());
        System.out.println("Manual description given by the container AS Long === " + jMetaDataAudio.getCodecIDDescriptionAsLong());
        System.out.println("Manual description given by the container AS LocalDateTime === " + jMetaDataAudio.getCodecIDDescriptionAsLocalDateTime());
        System.out.println("Manual description given by the container AS LocalTime === " + jMetaDataAudio.getCodecIDDescriptionAsLocalTime());
        System.out.println("Manual description given by the container AS String === " + jMetaDataAudio.getCodecIDDescriptionAsString());
        System.out.println("Manual description given by the container AS Boolean === " + jMetaDataAudio.getCodecIDDescriptionAsBoolean());
        System.out.println("Manual description given by the container AS BigInteger === " + jMetaDataAudio.getCodecIDDescriptionAsBigInteger());
        System.out.println("Manual description given by the container AS URL === " + jMetaDataAudio.getCodecIDDescriptionAsURL());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Integer === " + jMetaDataAudio.getStatusAsInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Long === " + jMetaDataAudio.getStatusAsLong());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalDateTime === " + jMetaDataAudio.getStatusAsLocalDateTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalTime === " + jMetaDataAudio.getStatusAsLocalTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS String === " + jMetaDataAudio.getStatusAsString());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Boolean === " + jMetaDataAudio.getStatusAsBoolean());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS BigInteger === " + jMetaDataAudio.getStatusAsBigInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS URL === " + jMetaDataAudio.getStatusAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getDurationFirstFrameStringAsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getDurationFirstFrameStringAsLong());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationFirstFrameStringAsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getDurationFirstFrameStringAsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getDurationFirstFrameStringAsString());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getDurationFirstFrameStringAsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getDurationFirstFrameStringAsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getDurationFirstFrameStringAsURL());
        System.out.println("Frames per second AS Integer === " + jMetaDataAudio.getFrameRateAsInteger());
        System.out.println("Frames per second AS Long === " + jMetaDataAudio.getFrameRateAsLong());
        System.out.println("Frames per second AS LocalDateTime === " + jMetaDataAudio.getFrameRateAsLocalDateTime());
        System.out.println("Frames per second AS LocalTime === " + jMetaDataAudio.getFrameRateAsLocalTime());
        System.out.println("Frames per second AS String === " + jMetaDataAudio.getFrameRateAsString());
        System.out.println("Frames per second AS Boolean === " + jMetaDataAudio.getFrameRateAsBoolean());
        System.out.println("Frames per second AS BigInteger === " + jMetaDataAudio.getFrameRateAsBigInteger());
        System.out.println("Frames per second AS URL === " + jMetaDataAudio.getFrameRateAsURL());
        System.out.println("How this stream is muxed in the container AS Integer === " + jMetaDataAudio.getMuxingModeAsInteger());
        System.out.println("How this stream is muxed in the container AS Long === " + jMetaDataAudio.getMuxingModeAsLong());
        System.out.println("How this stream is muxed in the container AS LocalDateTime === " + jMetaDataAudio.getMuxingModeAsLocalDateTime());
        System.out.println("How this stream is muxed in the container AS LocalTime === " + jMetaDataAudio.getMuxingModeAsLocalTime());
        System.out.println("How this stream is muxed in the container AS String === " + jMetaDataAudio.getMuxingModeAsString());
        System.out.println("How this stream is muxed in the container AS Boolean === " + jMetaDataAudio.getMuxingModeAsBoolean());
        System.out.println("How this stream is muxed in the container AS BigInteger === " + jMetaDataAudio.getMuxingModeAsBigInteger());
        System.out.println("How this stream is muxed in the container AS URL === " + jMetaDataAudio.getMuxingModeAsURL());
        System.out.println("Delay settings (in case of timecode for example) AS Integer === " + jMetaDataAudio.getDelaySettingsAsInteger());
        System.out.println("Delay settings (in case of timecode for example) AS Long === " + jMetaDataAudio.getDelaySettingsAsLong());
        System.out.println("Delay settings (in case of timecode for example) AS LocalDateTime === " + jMetaDataAudio.getDelaySettingsAsLocalDateTime());
        System.out.println("Delay settings (in case of timecode for example) AS LocalTime === " + jMetaDataAudio.getDelaySettingsAsLocalTime());
        System.out.println("Delay settings (in case of timecode for example) AS String === " + jMetaDataAudio.getDelaySettingsAsString());
        System.out.println("Delay settings (in case of timecode for example) AS Boolean === " + jMetaDataAudio.getDelaySettingsAsBoolean());
        System.out.println("Delay settings (in case of timecode for example) AS BigInteger === " + jMetaDataAudio.getDelaySettingsAsBigInteger());
        System.out.println("Delay settings (in case of timecode for example) AS URL === " + jMetaDataAudio.getDelaySettingsAsURL());
        System.out.println("Source Encoded Streamsize in bytes AS Integer === " + jMetaDataAudio.getSourceStreamSizeEncodedAsInteger());
        System.out.println("Source Encoded Streamsize in bytes AS Long === " + jMetaDataAudio.getSourceStreamSizeEncodedAsLong());
        System.out.println("Source Encoded Streamsize in bytes AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeEncodedAsLocalDateTime());
        System.out.println("Source Encoded Streamsize in bytes AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeEncodedAsLocalTime());
        System.out.println("Source Encoded Streamsize in bytes AS String === " + jMetaDataAudio.getSourceStreamSizeEncodedAsString());
        System.out.println("Source Encoded Streamsize in bytes AS Boolean === " + jMetaDataAudio.getSourceStreamSizeEncodedAsBoolean());
        System.out.println("Source Encoded Streamsize in bytes AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeEncodedAsBigInteger());
        System.out.println("Source Encoded Streamsize in bytes AS URL === " + jMetaDataAudio.getSourceStreamSizeEncodedAsURL());
        System.out.println("Format_Settings_ITU AS Integer === " + jMetaDataAudio.getFormatSettingsITUAsInteger());
        System.out.println("Format_Settings_ITU AS Long === " + jMetaDataAudio.getFormatSettingsITUAsLong());
        System.out.println("Format_Settings_ITU AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsITUAsLocalDateTime());
        System.out.println("Format_Settings_ITU AS LocalTime === " + jMetaDataAudio.getFormatSettingsITUAsLocalTime());
        System.out.println("Format_Settings_ITU AS String === " + jMetaDataAudio.getFormatSettingsITUAsString());
        System.out.println("Format_Settings_ITU AS Boolean === " + jMetaDataAudio.getFormatSettingsITUAsBoolean());
        System.out.println("Format_Settings_ITU AS BigInteger === " + jMetaDataAudio.getFormatSettingsITUAsBigInteger());
        System.out.println("Format_Settings_ITU AS URL === " + jMetaDataAudio.getFormatSettingsITUAsURL());
        System.out.println("Number of channels (with measurement) AS Integer === " + jMetaDataAudio.getChannelsOriginalStringAsInteger());
        System.out.println("Number of channels (with measurement) AS Long === " + jMetaDataAudio.getChannelsOriginalStringAsLong());
        System.out.println("Number of channels (with measurement) AS LocalDateTime === " + jMetaDataAudio.getChannelsOriginalStringAsLocalDateTime());
        System.out.println("Number of channels (with measurement) AS LocalTime === " + jMetaDataAudio.getChannelsOriginalStringAsLocalTime());
        System.out.println("Number of channels (with measurement) AS String === " + jMetaDataAudio.getChannelsOriginalStringAsString());
        System.out.println("Number of channels (with measurement) AS Boolean === " + jMetaDataAudio.getChannelsOriginalStringAsBoolean());
        System.out.println("Number of channels (with measurement) AS BigInteger === " + jMetaDataAudio.getChannelsOriginalStringAsBigInteger());
        System.out.println("Number of channels (with measurement) AS URL === " + jMetaDataAudio.getChannelsOriginalStringAsURL());
        System.out.println("Format_Settings_ModeExtension AS Integer === " + jMetaDataAudio.getFormatSettingsModeExtensionAsInteger());
        System.out.println("Format_Settings_ModeExtension AS Long === " + jMetaDataAudio.getFormatSettingsModeExtensionAsLong());
        System.out.println("Format_Settings_ModeExtension AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsModeExtensionAsLocalDateTime());
        System.out.println("Format_Settings_ModeExtension AS LocalTime === " + jMetaDataAudio.getFormatSettingsModeExtensionAsLocalTime());
        System.out.println("Format_Settings_ModeExtension AS String === " + jMetaDataAudio.getFormatSettingsModeExtensionAsString());
        System.out.println("Format_Settings_ModeExtension AS Boolean === " + jMetaDataAudio.getFormatSettingsModeExtensionAsBoolean());
        System.out.println("Format_Settings_ModeExtension AS BigInteger === " + jMetaDataAudio.getFormatSettingsModeExtensionAsBigInteger());
        System.out.println("Format_Settings_ModeExtension AS URL === " + jMetaDataAudio.getFormatSettingsModeExtensionAsURL());
        System.out.println("Format_Settings_Firm AS Integer === " + jMetaDataAudio.getFormatSettingsFirmAsInteger());
        System.out.println("Format_Settings_Firm AS Long === " + jMetaDataAudio.getFormatSettingsFirmAsLong());
        System.out.println("Format_Settings_Firm AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsFirmAsLocalDateTime());
        System.out.println("Format_Settings_Firm AS LocalTime === " + jMetaDataAudio.getFormatSettingsFirmAsLocalTime());
        System.out.println("Format_Settings_Firm AS String === " + jMetaDataAudio.getFormatSettingsFirmAsString());
        System.out.println("Format_Settings_Firm AS Boolean === " + jMetaDataAudio.getFormatSettingsFirmAsBoolean());
        System.out.println("Format_Settings_Firm AS BigInteger === " + jMetaDataAudio.getFormatSettingsFirmAsBigInteger());
        System.out.println("Format_Settings_Firm AS URL === " + jMetaDataAudio.getFormatSettingsFirmAsURL());
        System.out.println("Bit rate mode (Constant, Variable) AS Integer === " + jMetaDataAudio.getBitRateModeStringAsInteger());
        System.out.println("Bit rate mode (Constant, Variable) AS Long === " + jMetaDataAudio.getBitRateModeStringAsLong());
        System.out.println("Bit rate mode (Constant, Variable) AS LocalDateTime === " + jMetaDataAudio.getBitRateModeStringAsLocalDateTime());
        System.out.println("Bit rate mode (Constant, Variable) AS LocalTime === " + jMetaDataAudio.getBitRateModeStringAsLocalTime());
        System.out.println("Bit rate mode (Constant, Variable) AS String === " + jMetaDataAudio.getBitRateModeStringAsString());
        System.out.println("Bit rate mode (Constant, Variable) AS Boolean === " + jMetaDataAudio.getBitRateModeStringAsBoolean());
        System.out.println("Bit rate mode (Constant, Variable) AS BigInteger === " + jMetaDataAudio.getBitRateModeStringAsBigInteger());
        System.out.println("Bit rate mode (Constant, Variable) AS URL === " + jMetaDataAudio.getBitRateModeStringAsURL());
        System.out.println("The maximum absolute peak value of the item AS Integer === " + jMetaDataAudio.getReplayGainPeakAsInteger());
        System.out.println("The maximum absolute peak value of the item AS Long === " + jMetaDataAudio.getReplayGainPeakAsLong());
        System.out.println("The maximum absolute peak value of the item AS LocalDateTime === " + jMetaDataAudio.getReplayGainPeakAsLocalDateTime());
        System.out.println("The maximum absolute peak value of the item AS LocalTime === " + jMetaDataAudio.getReplayGainPeakAsLocalTime());
        System.out.println("The maximum absolute peak value of the item AS String === " + jMetaDataAudio.getReplayGainPeakAsString());
        System.out.println("The maximum absolute peak value of the item AS Boolean === " + jMetaDataAudio.getReplayGainPeakAsBoolean());
        System.out.println("The maximum absolute peak value of the item AS BigInteger === " + jMetaDataAudio.getReplayGainPeakAsBigInteger());
        System.out.println("The maximum absolute peak value of the item AS URL === " + jMetaDataAudio.getReplayGainPeakAsURL());
        System.out.println("ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon. AS Integer === " + jMetaDataAudio.getChannelLayoutIDAsInteger());
        System.out.println("ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon. AS Long === " + jMetaDataAudio.getChannelLayoutIDAsLong());
        System.out.println("ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon. AS LocalDateTime === " + jMetaDataAudio.getChannelLayoutIDAsLocalDateTime());
        System.out.println("ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon. AS LocalTime === " + jMetaDataAudio.getChannelLayoutIDAsLocalTime());
        System.out.println("ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon. AS String === " + jMetaDataAudio.getChannelLayoutIDAsString());
        System.out.println("ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon. AS Boolean === " + jMetaDataAudio.getChannelLayoutIDAsBoolean());
        System.out.println("ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon. AS BigInteger === " + jMetaDataAudio.getChannelLayoutIDAsBigInteger());
        System.out.println("ID of layout of channels (e.g. MXF descriptor channel assignment). Warning, sometimes this is not enough for uniquely identifying a layout (e.g. MXF descriptor channel assignment is SMPTE 377-4). For AC-3, the form is x,y with x=acmod and y=lfeon. AS URL === " + jMetaDataAudio.getChannelLayoutIDAsURL());
        System.out.println("Source Sample count (based on sampling rate) AS Integer === " + jMetaDataAudio.getSourceSamplingCountAsInteger());
        System.out.println("Source Sample count (based on sampling rate) AS Long === " + jMetaDataAudio.getSourceSamplingCountAsLong());
        System.out.println("Source Sample count (based on sampling rate) AS LocalDateTime === " + jMetaDataAudio.getSourceSamplingCountAsLocalDateTime());
        System.out.println("Source Sample count (based on sampling rate) AS LocalTime === " + jMetaDataAudio.getSourceSamplingCountAsLocalTime());
        System.out.println("Source Sample count (based on sampling rate) AS String === " + jMetaDataAudio.getSourceSamplingCountAsString());
        System.out.println("Source Sample count (based on sampling rate) AS Boolean === " + jMetaDataAudio.getSourceSamplingCountAsBoolean());
        System.out.println("Source Sample count (based on sampling rate) AS BigInteger === " + jMetaDataAudio.getSourceSamplingCountAsBigInteger());
        System.out.println("Source Sample count (based on sampling rate) AS URL === " + jMetaDataAudio.getSourceSamplingCountAsURL());
        System.out.println("Version of encoding-software AS Integer === " + jMetaDataAudio.getEncodedLibraryVersionAsInteger());
        System.out.println("Version of encoding-software AS Long === " + jMetaDataAudio.getEncodedLibraryVersionAsLong());
        System.out.println("Version of encoding-software AS LocalDateTime === " + jMetaDataAudio.getEncodedLibraryVersionAsLocalDateTime());
        System.out.println("Version of encoding-software AS LocalTime === " + jMetaDataAudio.getEncodedLibraryVersionAsLocalTime());
        System.out.println("Version of encoding-software AS String === " + jMetaDataAudio.getEncodedLibraryVersionAsString());
        System.out.println("Version of encoding-software AS Boolean === " + jMetaDataAudio.getEncodedLibraryVersionAsBoolean());
        System.out.println("Version of encoding-software AS BigInteger === " + jMetaDataAudio.getEncodedLibraryVersionAsBigInteger());
        System.out.println("Version of encoding-software AS URL === " + jMetaDataAudio.getEncodedLibraryVersionAsURL());
        System.out.println("Sample count (based on sampling rate) AS Integer === " + jMetaDataAudio.getSamplingCountAsInteger());
        System.out.println("Sample count (based on sampling rate) AS Long === " + jMetaDataAudio.getSamplingCountAsLong());
        System.out.println("Sample count (based on sampling rate) AS LocalDateTime === " + jMetaDataAudio.getSamplingCountAsLocalDateTime());
        System.out.println("Sample count (based on sampling rate) AS LocalTime === " + jMetaDataAudio.getSamplingCountAsLocalTime());
        System.out.println("Sample count (based on sampling rate) AS String === " + jMetaDataAudio.getSamplingCountAsString());
        System.out.println("Sample count (based on sampling rate) AS Boolean === " + jMetaDataAudio.getSamplingCountAsBoolean());
        System.out.println("Sample count (based on sampling rate) AS BigInteger === " + jMetaDataAudio.getSamplingCountAsBigInteger());
        System.out.println("Sample count (based on sampling rate) AS URL === " + jMetaDataAudio.getSamplingCountAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationLastFrameStringAsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getSourceDurationLastFrameStringAsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationLastFrameStringAsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationLastFrameStringAsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getSourceDurationLastFrameStringAsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationLastFrameStringAsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationLastFrameStringAsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getSourceDurationLastFrameStringAsURL());
        System.out.println("Info about codec ID AS Integer === " + jMetaDataAudio.getCodecIDInfoAsInteger());
        System.out.println("Info about codec ID AS Long === " + jMetaDataAudio.getCodecIDInfoAsLong());
        System.out.println("Info about codec ID AS LocalDateTime === " + jMetaDataAudio.getCodecIDInfoAsLocalDateTime());
        System.out.println("Info about codec ID AS LocalTime === " + jMetaDataAudio.getCodecIDInfoAsLocalTime());
        System.out.println("Info about codec ID AS String === " + jMetaDataAudio.getCodecIDInfoAsString());
        System.out.println("Info about codec ID AS Boolean === " + jMetaDataAudio.getCodecIDInfoAsBoolean());
        System.out.println("Info about codec ID AS BigInteger === " + jMetaDataAudio.getCodecIDInfoAsBigInteger());
        System.out.println("Info about codec ID AS URL === " + jMetaDataAudio.getCodecIDInfoAsURL());
        System.out.println("Streamsize in bytes AS Integer === " + jMetaDataAudio.getStreamSizeAsInteger());
        System.out.println("Streamsize in bytes AS Long === " + jMetaDataAudio.getStreamSizeAsLong());
        System.out.println("Streamsize in bytes AS LocalDateTime === " + jMetaDataAudio.getStreamSizeAsLocalDateTime());
        System.out.println("Streamsize in bytes AS LocalTime === " + jMetaDataAudio.getStreamSizeAsLocalTime());
        System.out.println("Streamsize in bytes AS String === " + jMetaDataAudio.getStreamSizeAsString());
        System.out.println("Streamsize in bytes AS Boolean === " + jMetaDataAudio.getStreamSizeAsBoolean());
        System.out.println("Streamsize in bytes AS BigInteger === " + jMetaDataAudio.getStreamSizeAsBigInteger());
        System.out.println("Streamsize in bytes AS URL === " + jMetaDataAudio.getStreamSizeAsURL());
        System.out.println("Info about the format AS Integer === " + jMetaDataAudio.getFormatInfoAsInteger());
        System.out.println("Info about the format AS Long === " + jMetaDataAudio.getFormatInfoAsLong());
        System.out.println("Info about the format AS LocalDateTime === " + jMetaDataAudio.getFormatInfoAsLocalDateTime());
        System.out.println("Info about the format AS LocalTime === " + jMetaDataAudio.getFormatInfoAsLocalTime());
        System.out.println("Info about the format AS String === " + jMetaDataAudio.getFormatInfoAsString());
        System.out.println("Info about the format AS Boolean === " + jMetaDataAudio.getFormatInfoAsBoolean());
        System.out.println("Info about the format AS BigInteger === " + jMetaDataAudio.getFormatInfoAsBigInteger());
        System.out.println("Info about the format AS URL === " + jMetaDataAudio.getFormatInfoAsURL());
        System.out.println("Source_StreamSize/String1 AS Integer === " + jMetaDataAudio.getSourceStreamSizeString1AsInteger());
        System.out.println("Source_StreamSize/String1 AS Long === " + jMetaDataAudio.getSourceStreamSizeString1AsLong());
        System.out.println("Source_StreamSize/String1 AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeString1AsLocalDateTime());
        System.out.println("Source_StreamSize/String1 AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeString1AsLocalTime());
        System.out.println("Source_StreamSize/String1 AS String === " + jMetaDataAudio.getSourceStreamSizeString1AsString());
        System.out.println("Source_StreamSize/String1 AS Boolean === " + jMetaDataAudio.getSourceStreamSizeString1AsBoolean());
        System.out.println("Source_StreamSize/String1 AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeString1AsBigInteger());
        System.out.println("Source_StreamSize/String1 AS URL === " + jMetaDataAudio.getSourceStreamSizeString1AsURL());
        System.out.println("Source Stream size divided by file size AS Integer === " + jMetaDataAudio.getSourceStreamSizeProportionAsInteger());
        System.out.println("Source Stream size divided by file size AS Long === " + jMetaDataAudio.getSourceStreamSizeProportionAsLong());
        System.out.println("Source Stream size divided by file size AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeProportionAsLocalDateTime());
        System.out.println("Source Stream size divided by file size AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeProportionAsLocalTime());
        System.out.println("Source Stream size divided by file size AS String === " + jMetaDataAudio.getSourceStreamSizeProportionAsString());
        System.out.println("Source Stream size divided by file size AS Boolean === " + jMetaDataAudio.getSourceStreamSizeProportionAsBoolean());
        System.out.println("Source Stream size divided by file size AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeProportionAsBigInteger());
        System.out.println("Source Stream size divided by file size AS URL === " + jMetaDataAudio.getSourceStreamSizeProportionAsURL());
        System.out.println("Homepage for more details about this codec ID AS Integer === " + jMetaDataAudio.getCodecIDUrlAsInteger());
        System.out.println("Homepage for more details about this codec ID AS Long === " + jMetaDataAudio.getCodecIDUrlAsLong());
        System.out.println("Homepage for more details about this codec ID AS LocalDateTime === " + jMetaDataAudio.getCodecIDUrlAsLocalDateTime());
        System.out.println("Homepage for more details about this codec ID AS LocalTime === " + jMetaDataAudio.getCodecIDUrlAsLocalTime());
        System.out.println("Homepage for more details about this codec ID AS String === " + jMetaDataAudio.getCodecIDUrlAsString());
        System.out.println("Homepage for more details about this codec ID AS Boolean === " + jMetaDataAudio.getCodecIDUrlAsBoolean());
        System.out.println("Homepage for more details about this codec ID AS BigInteger === " + jMetaDataAudio.getCodecIDUrlAsBigInteger());
        System.out.println("Homepage for more details about this codec ID AS URL === " + jMetaDataAudio.getCodecIDUrlAsURL());
        System.out.println("Source_StreamSize/String2 AS Integer === " + jMetaDataAudio.getSourceStreamSizeString2AsInteger());
        System.out.println("Source_StreamSize/String2 AS Long === " + jMetaDataAudio.getSourceStreamSizeString2AsLong());
        System.out.println("Source_StreamSize/String2 AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeString2AsLocalDateTime());
        System.out.println("Source_StreamSize/String2 AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeString2AsLocalTime());
        System.out.println("Source_StreamSize/String2 AS String === " + jMetaDataAudio.getSourceStreamSizeString2AsString());
        System.out.println("Source_StreamSize/String2 AS Boolean === " + jMetaDataAudio.getSourceStreamSizeString2AsBoolean());
        System.out.println("Source_StreamSize/String2 AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeString2AsBigInteger());
        System.out.println("Source_StreamSize/String2 AS URL === " + jMetaDataAudio.getSourceStreamSizeString2AsURL());
        System.out.println("Source Streamsize in with percentage value AS Integer === " + jMetaDataAudio.getSourceStreamSizeString5AsInteger());
        System.out.println("Source Streamsize in with percentage value AS Long === " + jMetaDataAudio.getSourceStreamSizeString5AsLong());
        System.out.println("Source Streamsize in with percentage value AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeString5AsLocalDateTime());
        System.out.println("Source Streamsize in with percentage value AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeString5AsLocalTime());
        System.out.println("Source Streamsize in with percentage value AS String === " + jMetaDataAudio.getSourceStreamSizeString5AsString());
        System.out.println("Source Streamsize in with percentage value AS Boolean === " + jMetaDataAudio.getSourceStreamSizeString5AsBoolean());
        System.out.println("Source Streamsize in with percentage value AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeString5AsBigInteger());
        System.out.println("Source Streamsize in with percentage value AS URL === " + jMetaDataAudio.getSourceStreamSizeString5AsURL());
        System.out.println("Source_StreamSize/String3 AS Integer === " + jMetaDataAudio.getSourceStreamSizeString3AsInteger());
        System.out.println("Source_StreamSize/String3 AS Long === " + jMetaDataAudio.getSourceStreamSizeString3AsLong());
        System.out.println("Source_StreamSize/String3 AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeString3AsLocalDateTime());
        System.out.println("Source_StreamSize/String3 AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeString3AsLocalTime());
        System.out.println("Source_StreamSize/String3 AS String === " + jMetaDataAudio.getSourceStreamSizeString3AsString());
        System.out.println("Source_StreamSize/String3 AS Boolean === " + jMetaDataAudio.getSourceStreamSizeString3AsBoolean());
        System.out.println("Source_StreamSize/String3 AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeString3AsBigInteger());
        System.out.println("Source_StreamSize/String3 AS URL === " + jMetaDataAudio.getSourceStreamSizeString3AsURL());
        System.out.println("Source_StreamSize/String4 AS Integer === " + jMetaDataAudio.getSourceStreamSizeString4AsInteger());
        System.out.println("Source_StreamSize/String4 AS Long === " + jMetaDataAudio.getSourceStreamSizeString4AsLong());
        System.out.println("Source_StreamSize/String4 AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeString4AsLocalDateTime());
        System.out.println("Source_StreamSize/String4 AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeString4AsLocalTime());
        System.out.println("Source_StreamSize/String4 AS String === " + jMetaDataAudio.getSourceStreamSizeString4AsString());
        System.out.println("Source_StreamSize/String4 AS Boolean === " + jMetaDataAudio.getSourceStreamSizeString4AsBoolean());
        System.out.println("Source_StreamSize/String4 AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeString4AsBigInteger());
        System.out.println("Source_StreamSize/String4 AS URL === " + jMetaDataAudio.getSourceStreamSizeString4AsURL());
        System.out.println("Set if that track should not be used AS Integer === " + jMetaDataAudio.getDisabledStringAsInteger());
        System.out.println("Set if that track should not be used AS Long === " + jMetaDataAudio.getDisabledStringAsLong());
        System.out.println("Set if that track should not be used AS LocalDateTime === " + jMetaDataAudio.getDisabledStringAsLocalDateTime());
        System.out.println("Set if that track should not be used AS LocalTime === " + jMetaDataAudio.getDisabledStringAsLocalTime());
        System.out.println("Set if that track should not be used AS String === " + jMetaDataAudio.getDisabledStringAsString());
        System.out.println("Set if that track should not be used AS Boolean === " + jMetaDataAudio.getDisabledStringAsBoolean());
        System.out.println("Set if that track should not be used AS BigInteger === " + jMetaDataAudio.getDisabledStringAsBigInteger());
        System.out.println("Set if that track should not be used AS URL === " + jMetaDataAudio.getDisabledStringAsURL());
        System.out.println("Operating System of encoding-software AS Integer === " + jMetaDataAudio.getEncodedOperatingSystemAsInteger());
        System.out.println("Operating System of encoding-software AS Long === " + jMetaDataAudio.getEncodedOperatingSystemAsLong());
        System.out.println("Operating System of encoding-software AS LocalDateTime === " + jMetaDataAudio.getEncodedOperatingSystemAsLocalDateTime());
        System.out.println("Operating System of encoding-software AS LocalTime === " + jMetaDataAudio.getEncodedOperatingSystemAsLocalTime());
        System.out.println("Operating System of encoding-software AS String === " + jMetaDataAudio.getEncodedOperatingSystemAsString());
        System.out.println("Operating System of encoding-software AS Boolean === " + jMetaDataAudio.getEncodedOperatingSystemAsBoolean());
        System.out.println("Operating System of encoding-software AS BigInteger === " + jMetaDataAudio.getEncodedOperatingSystemAsBigInteger());
        System.out.println("Operating System of encoding-software AS URL === " + jMetaDataAudio.getEncodedOperatingSystemAsURL());
        System.out.println("Name of the company AS Integer === " + jMetaDataAudio.getEncodedApplicationCompanyNameAsInteger());
        System.out.println("Name of the company AS Long === " + jMetaDataAudio.getEncodedApplicationCompanyNameAsLong());
        System.out.println("Name of the company AS LocalDateTime === " + jMetaDataAudio.getEncodedApplicationCompanyNameAsLocalDateTime());
        System.out.println("Name of the company AS LocalTime === " + jMetaDataAudio.getEncodedApplicationCompanyNameAsLocalTime());
        System.out.println("Name of the company AS String === " + jMetaDataAudio.getEncodedApplicationCompanyNameAsString());
        System.out.println("Name of the company AS Boolean === " + jMetaDataAudio.getEncodedApplicationCompanyNameAsBoolean());
        System.out.println("Name of the company AS BigInteger === " + jMetaDataAudio.getEncodedApplicationCompanyNameAsBigInteger());
        System.out.println("Name of the company AS URL === " + jMetaDataAudio.getEncodedApplicationCompanyNameAsURL());
        System.out.println("Current stream size divided by uncompressed stream size AS Integer === " + jMetaDataAudio.getCompressionRatioAsInteger());
        System.out.println("Current stream size divided by uncompressed stream size AS Long === " + jMetaDataAudio.getCompressionRatioAsLong());
        System.out.println("Current stream size divided by uncompressed stream size AS LocalDateTime === " + jMetaDataAudio.getCompressionRatioAsLocalDateTime());
        System.out.println("Current stream size divided by uncompressed stream size AS LocalTime === " + jMetaDataAudio.getCompressionRatioAsLocalTime());
        System.out.println("Current stream size divided by uncompressed stream size AS String === " + jMetaDataAudio.getCompressionRatioAsString());
        System.out.println("Current stream size divided by uncompressed stream size AS Boolean === " + jMetaDataAudio.getCompressionRatioAsBoolean());
        System.out.println("Current stream size divided by uncompressed stream size AS BigInteger === " + jMetaDataAudio.getCompressionRatioAsBigInteger());
        System.out.println("Current stream size divided by uncompressed stream size AS URL === " + jMetaDataAudio.getCompressionRatioAsURL());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Integer === " + jMetaDataAudio.getFormatCommercialIfAnyAsInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Long === " + jMetaDataAudio.getFormatCommercialIfAnyAsLong());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalDateTime === " + jMetaDataAudio.getFormatCommercialIfAnyAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalTime === " + jMetaDataAudio.getFormatCommercialIfAnyAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS String === " + jMetaDataAudio.getFormatCommercialIfAnyAsString());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Boolean === " + jMetaDataAudio.getFormatCommercialIfAnyAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS BigInteger === " + jMetaDataAudio.getFormatCommercialIfAnyAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS URL === " + jMetaDataAudio.getFormatCommercialIfAnyAsURL());
        System.out.println("UTC time that the tags were done for this item. AS Integer === " + jMetaDataAudio.getTaggedDateAsInteger());
        System.out.println("UTC time that the tags were done for this item. AS Long === " + jMetaDataAudio.getTaggedDateAsLong());
        System.out.println("UTC time that the tags were done for this item. AS LocalDateTime === " + jMetaDataAudio.getTaggedDateAsLocalDateTime());
        System.out.println("UTC time that the tags were done for this item. AS LocalTime === " + jMetaDataAudio.getTaggedDateAsLocalTime());
        System.out.println("UTC time that the tags were done for this item. AS String === " + jMetaDataAudio.getTaggedDateAsString());
        System.out.println("UTC time that the tags were done for this item. AS Boolean === " + jMetaDataAudio.getTaggedDateAsBoolean());
        System.out.println("UTC time that the tags were done for this item. AS BigInteger === " + jMetaDataAudio.getTaggedDateAsBigInteger());
        System.out.println("UTC time that the tags were done for this item. AS URL === " + jMetaDataAudio.getTaggedDateAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataAudio.getIDStringAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataAudio.getIDStringAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataAudio.getIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataAudio.getIDStringAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataAudio.getIDStringAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataAudio.getIDStringAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataAudio.getIDStringAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataAudio.getIDStringAsURL());
        System.out.println("Compression mode (Lossy or Lossless) AS Integer === " + jMetaDataAudio.getCompressionModeAsInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS Long === " + jMetaDataAudio.getCompressionModeAsLong());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalDateTime === " + jMetaDataAudio.getCompressionModeAsLocalDateTime());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalTime === " + jMetaDataAudio.getCompressionModeAsLocalTime());
        System.out.println("Compression mode (Lossy or Lossless) AS String === " + jMetaDataAudio.getCompressionModeAsString());
        System.out.println("Compression mode (Lossy or Lossless) AS Boolean === " + jMetaDataAudio.getCompressionModeAsBoolean());
        System.out.println("Compression mode (Lossy or Lossless) AS BigInteger === " + jMetaDataAudio.getCompressionModeAsBigInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS URL === " + jMetaDataAudio.getCompressionModeAsURL());
        System.out.println("Bit rate in bps AS Integer === " + jMetaDataAudio.getBitRateAsInteger());
        System.out.println("Bit rate in bps AS Long === " + jMetaDataAudio.getBitRateAsLong());
        System.out.println("Bit rate in bps AS LocalDateTime === " + jMetaDataAudio.getBitRateAsLocalDateTime());
        System.out.println("Bit rate in bps AS LocalTime === " + jMetaDataAudio.getBitRateAsLocalTime());
        System.out.println("Bit rate in bps AS String === " + jMetaDataAudio.getBitRateAsString());
        System.out.println("Bit rate in bps AS Boolean === " + jMetaDataAudio.getBitRateAsBoolean());
        System.out.println("Bit rate in bps AS BigInteger === " + jMetaDataAudio.getBitRateAsBigInteger());
        System.out.println("Bit rate in bps AS URL === " + jMetaDataAudio.getBitRateAsURL());
        System.out.println("UTC time that the encoding of this item was completed began. AS Integer === " + jMetaDataAudio.getEncodedDateAsInteger());
        System.out.println("UTC time that the encoding of this item was completed began. AS Long === " + jMetaDataAudio.getEncodedDateAsLong());
        System.out.println("UTC time that the encoding of this item was completed began. AS LocalDateTime === " + jMetaDataAudio.getEncodedDateAsLocalDateTime());
        System.out.println("UTC time that the encoding of this item was completed began. AS LocalTime === " + jMetaDataAudio.getEncodedDateAsLocalTime());
        System.out.println("UTC time that the encoding of this item was completed began. AS String === " + jMetaDataAudio.getEncodedDateAsString());
        System.out.println("UTC time that the encoding of this item was completed began. AS Boolean === " + jMetaDataAudio.getEncodedDateAsBoolean());
        System.out.println("UTC time that the encoding of this item was completed began. AS BigInteger === " + jMetaDataAudio.getEncodedDateAsBigInteger());
        System.out.println("UTC time that the encoding of this item was completed began. AS URL === " + jMetaDataAudio.getEncodedDateAsURL());
        System.out.println("Bit rate mode (VBR, CBR) AS Integer === " + jMetaDataAudio.getBitRateModeAsInteger());
        System.out.println("Bit rate mode (VBR, CBR) AS Long === " + jMetaDataAudio.getBitRateModeAsLong());
        System.out.println("Bit rate mode (VBR, CBR) AS LocalDateTime === " + jMetaDataAudio.getBitRateModeAsLocalDateTime());
        System.out.println("Bit rate mode (VBR, CBR) AS LocalTime === " + jMetaDataAudio.getBitRateModeAsLocalTime());
        System.out.println("Bit rate mode (VBR, CBR) AS String === " + jMetaDataAudio.getBitRateModeAsString());
        System.out.println("Bit rate mode (VBR, CBR) AS Boolean === " + jMetaDataAudio.getBitRateModeAsBoolean());
        System.out.println("Bit rate mode (VBR, CBR) AS BigInteger === " + jMetaDataAudio.getBitRateModeAsBigInteger());
        System.out.println("Bit rate mode (VBR, CBR) AS URL === " + jMetaDataAudio.getBitRateModeAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataAudio.getUniqueIDAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataAudio.getUniqueIDAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataAudio.getUniqueIDAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataAudio.getUniqueIDAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataAudio.getUniqueIDAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataAudio.getUniqueIDAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataAudio.getUniqueIDAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataAudio.getUniqueIDAsURL());
        System.out.println("Maximum Bit rate (with measurement) AS Integer === " + jMetaDataAudio.getBitRateMaximumStringAsInteger());
        System.out.println("Maximum Bit rate (with measurement) AS Long === " + jMetaDataAudio.getBitRateMaximumStringAsLong());
        System.out.println("Maximum Bit rate (with measurement) AS LocalDateTime === " + jMetaDataAudio.getBitRateMaximumStringAsLocalDateTime());
        System.out.println("Maximum Bit rate (with measurement) AS LocalTime === " + jMetaDataAudio.getBitRateMaximumStringAsLocalTime());
        System.out.println("Maximum Bit rate (with measurement) AS String === " + jMetaDataAudio.getBitRateMaximumStringAsString());
        System.out.println("Maximum Bit rate (with measurement) AS Boolean === " + jMetaDataAudio.getBitRateMaximumStringAsBoolean());
        System.out.println("Maximum Bit rate (with measurement) AS BigInteger === " + jMetaDataAudio.getBitRateMaximumStringAsBigInteger());
        System.out.println("Maximum Bit rate (with measurement) AS URL === " + jMetaDataAudio.getBitRateMaximumStringAsURL());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Integer === " + jMetaDataAudio.getDelayString3AsInteger());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Long === " + jMetaDataAudio.getDelayString3AsLong());
        System.out.println("Delay in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataAudio.getDelayString3AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataAudio.getDelayString3AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.MMM AS String === " + jMetaDataAudio.getDelayString3AsString());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataAudio.getDelayString3AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataAudio.getDelayString3AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.MMM AS URL === " + jMetaDataAudio.getDelayString3AsURL());
        System.out.println("Video_Delay/String AS Integer === " + jMetaDataAudio.getVideoDelayStringAsInteger());
        System.out.println("Video_Delay/String AS Long === " + jMetaDataAudio.getVideoDelayStringAsLong());
        System.out.println("Video_Delay/String AS LocalDateTime === " + jMetaDataAudio.getVideoDelayStringAsLocalDateTime());
        System.out.println("Video_Delay/String AS LocalTime === " + jMetaDataAudio.getVideoDelayStringAsLocalTime());
        System.out.println("Video_Delay/String AS String === " + jMetaDataAudio.getVideoDelayStringAsString());
        System.out.println("Video_Delay/String AS Boolean === " + jMetaDataAudio.getVideoDelayStringAsBoolean());
        System.out.println("Video_Delay/String AS BigInteger === " + jMetaDataAudio.getVideoDelayStringAsBigInteger());
        System.out.println("Video_Delay/String AS URL === " + jMetaDataAudio.getVideoDelayStringAsURL());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataAudio.getDelayString4AsInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataAudio.getDelayString4AsLong());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataAudio.getDelayString4AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataAudio.getDelayString4AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataAudio.getDelayString4AsString());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataAudio.getDelayString4AsBoolean());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataAudio.getDelayString4AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataAudio.getDelayString4AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataAudio.getDelayString1AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataAudio.getDelayString1AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataAudio.getDelayString1AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataAudio.getDelayString1AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataAudio.getDelayString1AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataAudio.getDelayString1AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataAudio.getDelayString1AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataAudio.getDelayString1AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataAudio.getDelayString2AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataAudio.getDelayString2AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataAudio.getDelayString2AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataAudio.getDelayString2AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataAudio.getDelayString2AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataAudio.getDelayString2AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataAudio.getDelayString2AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataAudio.getDelayString2AsURL());
        System.out.println("Number of channels (with measurement) AS Integer === " + jMetaDataAudio.getChannelsStringAsInteger());
        System.out.println("Number of channels (with measurement) AS Long === " + jMetaDataAudio.getChannelsStringAsLong());
        System.out.println("Number of channels (with measurement) AS LocalDateTime === " + jMetaDataAudio.getChannelsStringAsLocalDateTime());
        System.out.println("Number of channels (with measurement) AS LocalTime === " + jMetaDataAudio.getChannelsStringAsLocalTime());
        System.out.println("Number of channels (with measurement) AS String === " + jMetaDataAudio.getChannelsStringAsString());
        System.out.println("Number of channels (with measurement) AS Boolean === " + jMetaDataAudio.getChannelsStringAsBoolean());
        System.out.println("Number of channels (with measurement) AS BigInteger === " + jMetaDataAudio.getChannelsStringAsBigInteger());
        System.out.println("Number of channels (with measurement) AS URL === " + jMetaDataAudio.getChannelsStringAsURL());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataAudio.getDelayString5AsInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataAudio.getDelayString5AsLong());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataAudio.getDelayString5AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataAudio.getDelayString5AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataAudio.getDelayString5AsString());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataAudio.getDelayString5AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataAudio.getDelayString5AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataAudio.getDelayString5AsURL());
        System.out.println("How much time is buffered before the first video frame AS Integer === " + jMetaDataAudio.getInterleavePreloadAsInteger());
        System.out.println("How much time is buffered before the first video frame AS Long === " + jMetaDataAudio.getInterleavePreloadAsLong());
        System.out.println("How much time is buffered before the first video frame AS LocalDateTime === " + jMetaDataAudio.getInterleavePreloadAsLocalDateTime());
        System.out.println("How much time is buffered before the first video frame AS LocalTime === " + jMetaDataAudio.getInterleavePreloadAsLocalTime());
        System.out.println("How much time is buffered before the first video frame AS String === " + jMetaDataAudio.getInterleavePreloadAsString());
        System.out.println("How much time is buffered before the first video frame AS Boolean === " + jMetaDataAudio.getInterleavePreloadAsBoolean());
        System.out.println("How much time is buffered before the first video frame AS BigInteger === " + jMetaDataAudio.getInterleavePreloadAsBigInteger());
        System.out.println("How much time is buffered before the first video frame AS URL === " + jMetaDataAudio.getInterleavePreloadAsURL());
        System.out.println("Position of channels after matrix decoding (x/y.z format) AS Integer === " + jMetaDataAudio.getMatrixChannelPositionsString2AsInteger());
        System.out.println("Position of channels after matrix decoding (x/y.z format) AS Long === " + jMetaDataAudio.getMatrixChannelPositionsString2AsLong());
        System.out.println("Position of channels after matrix decoding (x/y.z format) AS LocalDateTime === " + jMetaDataAudio.getMatrixChannelPositionsString2AsLocalDateTime());
        System.out.println("Position of channels after matrix decoding (x/y.z format) AS LocalTime === " + jMetaDataAudio.getMatrixChannelPositionsString2AsLocalTime());
        System.out.println("Position of channels after matrix decoding (x/y.z format) AS String === " + jMetaDataAudio.getMatrixChannelPositionsString2AsString());
        System.out.println("Position of channels after matrix decoding (x/y.z format) AS Boolean === " + jMetaDataAudio.getMatrixChannelPositionsString2AsBoolean());
        System.out.println("Position of channels after matrix decoding (x/y.z format) AS BigInteger === " + jMetaDataAudio.getMatrixChannelPositionsString2AsBigInteger());
        System.out.println("Position of channels after matrix decoding (x/y.z format) AS URL === " + jMetaDataAudio.getMatrixChannelPositionsString2AsURL());
        System.out.println("Format_Settings_SBR AS Integer === " + jMetaDataAudio.getFormatSettingsSBRAsInteger());
        System.out.println("Format_Settings_SBR AS Long === " + jMetaDataAudio.getFormatSettingsSBRAsLong());
        System.out.println("Format_Settings_SBR AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsSBRAsLocalDateTime());
        System.out.println("Format_Settings_SBR AS LocalTime === " + jMetaDataAudio.getFormatSettingsSBRAsLocalTime());
        System.out.println("Format_Settings_SBR AS String === " + jMetaDataAudio.getFormatSettingsSBRAsString());
        System.out.println("Format_Settings_SBR AS Boolean === " + jMetaDataAudio.getFormatSettingsSBRAsBoolean());
        System.out.println("Format_Settings_SBR AS BigInteger === " + jMetaDataAudio.getFormatSettingsSBRAsBigInteger());
        System.out.println("Format_Settings_SBR AS URL === " + jMetaDataAudio.getFormatSettingsSBRAsURL());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Integer === " + jMetaDataAudio.getDelayAsInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Long === " + jMetaDataAudio.getDelayAsLong());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalDateTime === " + jMetaDataAudio.getDelayAsLocalDateTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalTime === " + jMetaDataAudio.getDelayAsLocalTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS String === " + jMetaDataAudio.getDelayAsString());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Boolean === " + jMetaDataAudio.getDelayAsBoolean());
        System.out.println("Delay fixed in the stream (relative) IN MS AS BigInteger === " + jMetaDataAudio.getDelayAsBigInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS URL === " + jMetaDataAudio.getDelayAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Integer === " + jMetaDataAudio.getEncodedApplicationUrlAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Long === " + jMetaDataAudio.getEncodedApplicationUrlAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS LocalDateTime === " + jMetaDataAudio.getEncodedApplicationUrlAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS LocalTime === " + jMetaDataAudio.getEncodedApplicationUrlAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS String === " + jMetaDataAudio.getEncodedApplicationUrlAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Boolean === " + jMetaDataAudio.getEncodedApplicationUrlAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS BigInteger === " + jMetaDataAudio.getEncodedApplicationUrlAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS URL === " + jMetaDataAudio.getEncodedApplicationUrlAsURL());
        System.out.println("Source_StreamSize_Encoded/String4 AS Integer === " + jMetaDataAudio.getSourceStreamSizeEncodedString4AsInteger());
        System.out.println("Source_StreamSize_Encoded/String4 AS Long === " + jMetaDataAudio.getSourceStreamSizeEncodedString4AsLong());
        System.out.println("Source_StreamSize_Encoded/String4 AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString4AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String4 AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString4AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String4 AS String === " + jMetaDataAudio.getSourceStreamSizeEncodedString4AsString());
        System.out.println("Source_StreamSize_Encoded/String4 AS Boolean === " + jMetaDataAudio.getSourceStreamSizeEncodedString4AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String4 AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeEncodedString4AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String4 AS URL === " + jMetaDataAudio.getSourceStreamSizeEncodedString4AsURL());
        System.out.println("Source Encoded Streamsize in with percentage value AS Integer === " + jMetaDataAudio.getSourceStreamSizeEncodedString5AsInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS Long === " + jMetaDataAudio.getSourceStreamSizeEncodedString5AsLong());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString5AsLocalDateTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString5AsLocalTime());
        System.out.println("Source Encoded Streamsize in with percentage value AS String === " + jMetaDataAudio.getSourceStreamSizeEncodedString5AsString());
        System.out.println("Source Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataAudio.getSourceStreamSizeEncodedString5AsBoolean());
        System.out.println("Source Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeEncodedString5AsBigInteger());
        System.out.println("Source Encoded Streamsize in with percentage value AS URL === " + jMetaDataAudio.getSourceStreamSizeEncodedString5AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationFirstFrameString1AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataAudio.getSourceDurationFirstFrameString1AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationFirstFrameString1AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationFirstFrameString1AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataAudio.getSourceDurationFirstFrameString1AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationFirstFrameString1AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationFirstFrameString1AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataAudio.getSourceDurationFirstFrameString1AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationFirstFrameString2AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getSourceDurationFirstFrameString2AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationFirstFrameString2AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationFirstFrameString2AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getSourceDurationFirstFrameString2AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationFirstFrameString2AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationFirstFrameString2AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getSourceDurationFirstFrameString2AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataAudio.getSourceDurationFirstFrameString3AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataAudio.getSourceDurationFirstFrameString3AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataAudio.getSourceDurationFirstFrameString3AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataAudio.getSourceDurationFirstFrameString3AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataAudio.getSourceDurationFirstFrameString3AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataAudio.getSourceDurationFirstFrameString3AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataAudio.getSourceDurationFirstFrameString3AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataAudio.getSourceDurationFirstFrameString3AsURL());
        System.out.println("Software used to create the file AS Integer === " + jMetaDataAudio.getEncodedLibraryAsInteger());
        System.out.println("Software used to create the file AS Long === " + jMetaDataAudio.getEncodedLibraryAsLong());
        System.out.println("Software used to create the file AS LocalDateTime === " + jMetaDataAudio.getEncodedLibraryAsLocalDateTime());
        System.out.println("Software used to create the file AS LocalTime === " + jMetaDataAudio.getEncodedLibraryAsLocalTime());
        System.out.println("Software used to create the file AS String === " + jMetaDataAudio.getEncodedLibraryAsString());
        System.out.println("Software used to create the file AS Boolean === " + jMetaDataAudio.getEncodedLibraryAsBoolean());
        System.out.println("Software used to create the file AS BigInteger === " + jMetaDataAudio.getEncodedLibraryAsBigInteger());
        System.out.println("Software used to create the file AS URL === " + jMetaDataAudio.getEncodedLibraryAsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataAudio.getSourceDurationFirstFrameString4AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataAudio.getSourceDurationFirstFrameString4AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataAudio.getSourceDurationFirstFrameString4AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataAudio.getSourceDurationFirstFrameString4AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataAudio.getSourceDurationFirstFrameString4AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataAudio.getSourceDurationFirstFrameString4AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataAudio.getSourceDurationFirstFrameString4AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataAudio.getSourceDurationFirstFrameString4AsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataAudio.getSourceDurationFirstFrameString5AsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataAudio.getSourceDurationFirstFrameString5AsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataAudio.getSourceDurationFirstFrameString5AsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataAudio.getSourceDurationFirstFrameString5AsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataAudio.getSourceDurationFirstFrameString5AsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataAudio.getSourceDurationFirstFrameString5AsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataAudio.getSourceDurationFirstFrameString5AsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataAudio.getSourceDurationFirstFrameString5AsURL());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Integer === " + jMetaDataAudio.getInternetMediaTypeAsInteger());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Long === " + jMetaDataAudio.getInternetMediaTypeAsLong());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS LocalDateTime === " + jMetaDataAudio.getInternetMediaTypeAsLocalDateTime());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS LocalTime === " + jMetaDataAudio.getInternetMediaTypeAsLocalTime());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS String === " + jMetaDataAudio.getInternetMediaTypeAsString());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Boolean === " + jMetaDataAudio.getInternetMediaTypeAsBoolean());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS BigInteger === " + jMetaDataAudio.getInternetMediaTypeAsBigInteger());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS URL === " + jMetaDataAudio.getInternetMediaTypeAsURL());
        System.out.println("Source_StreamSize_Encoded/String2 AS Integer === " + jMetaDataAudio.getSourceStreamSizeEncodedString2AsInteger());
        System.out.println("Source_StreamSize_Encoded/String2 AS Long === " + jMetaDataAudio.getSourceStreamSizeEncodedString2AsLong());
        System.out.println("Source_StreamSize_Encoded/String2 AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString2AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String2 AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString2AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String2 AS String === " + jMetaDataAudio.getSourceStreamSizeEncodedString2AsString());
        System.out.println("Source_StreamSize_Encoded/String2 AS Boolean === " + jMetaDataAudio.getSourceStreamSizeEncodedString2AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String2 AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeEncodedString2AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String2 AS URL === " + jMetaDataAudio.getSourceStreamSizeEncodedString2AsURL());
        System.out.println("Set if that track should not be used AS Integer === " + jMetaDataAudio.getDisabledAsInteger());
        System.out.println("Set if that track should not be used AS Long === " + jMetaDataAudio.getDisabledAsLong());
        System.out.println("Set if that track should not be used AS LocalDateTime === " + jMetaDataAudio.getDisabledAsLocalDateTime());
        System.out.println("Set if that track should not be used AS LocalTime === " + jMetaDataAudio.getDisabledAsLocalTime());
        System.out.println("Set if that track should not be used AS String === " + jMetaDataAudio.getDisabledAsString());
        System.out.println("Set if that track should not be used AS Boolean === " + jMetaDataAudio.getDisabledAsBoolean());
        System.out.println("Set if that track should not be used AS BigInteger === " + jMetaDataAudio.getDisabledAsBigInteger());
        System.out.println("Set if that track should not be used AS URL === " + jMetaDataAudio.getDisabledAsURL());
        System.out.println("Number of channels AS Integer === " + jMetaDataAudio.getChannelsOriginalAsInteger());
        System.out.println("Number of channels AS Long === " + jMetaDataAudio.getChannelsOriginalAsLong());
        System.out.println("Number of channels AS LocalDateTime === " + jMetaDataAudio.getChannelsOriginalAsLocalDateTime());
        System.out.println("Number of channels AS LocalTime === " + jMetaDataAudio.getChannelsOriginalAsLocalTime());
        System.out.println("Number of channels AS String === " + jMetaDataAudio.getChannelsOriginalAsString());
        System.out.println("Number of channels AS Boolean === " + jMetaDataAudio.getChannelsOriginalAsBoolean());
        System.out.println("Number of channels AS BigInteger === " + jMetaDataAudio.getChannelsOriginalAsBigInteger());
        System.out.println("Number of channels AS URL === " + jMetaDataAudio.getChannelsOriginalAsURL());
        System.out.println("Frames per second, denominator AS Integer === " + jMetaDataAudio.getFrameRateDenAsInteger());
        System.out.println("Frames per second, denominator AS Long === " + jMetaDataAudio.getFrameRateDenAsLong());
        System.out.println("Frames per second, denominator AS LocalDateTime === " + jMetaDataAudio.getFrameRateDenAsLocalDateTime());
        System.out.println("Frames per second, denominator AS LocalTime === " + jMetaDataAudio.getFrameRateDenAsLocalTime());
        System.out.println("Frames per second, denominator AS String === " + jMetaDataAudio.getFrameRateDenAsString());
        System.out.println("Frames per second, denominator AS Boolean === " + jMetaDataAudio.getFrameRateDenAsBoolean());
        System.out.println("Frames per second, denominator AS BigInteger === " + jMetaDataAudio.getFrameRateDenAsBigInteger());
        System.out.println("Frames per second, denominator AS URL === " + jMetaDataAudio.getFrameRateDenAsURL());
        System.out.println("Source_StreamSize_Encoded/String3 AS Integer === " + jMetaDataAudio.getSourceStreamSizeEncodedString3AsInteger());
        System.out.println("Source_StreamSize_Encoded/String3 AS Long === " + jMetaDataAudio.getSourceStreamSizeEncodedString3AsLong());
        System.out.println("Source_StreamSize_Encoded/String3 AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString3AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String3 AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString3AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String3 AS String === " + jMetaDataAudio.getSourceStreamSizeEncodedString3AsString());
        System.out.println("Source_StreamSize_Encoded/String3 AS Boolean === " + jMetaDataAudio.getSourceStreamSizeEncodedString3AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String3 AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeEncodedString3AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String3 AS URL === " + jMetaDataAudio.getSourceStreamSizeEncodedString3AsURL());
        System.out.println("Encoded Stream size divided by file size AS Integer === " + jMetaDataAudio.getStreamSizeEncodedProportionAsInteger());
        System.out.println("Encoded Stream size divided by file size AS Long === " + jMetaDataAudio.getStreamSizeEncodedProportionAsLong());
        System.out.println("Encoded Stream size divided by file size AS LocalDateTime === " + jMetaDataAudio.getStreamSizeEncodedProportionAsLocalDateTime());
        System.out.println("Encoded Stream size divided by file size AS LocalTime === " + jMetaDataAudio.getStreamSizeEncodedProportionAsLocalTime());
        System.out.println("Encoded Stream size divided by file size AS String === " + jMetaDataAudio.getStreamSizeEncodedProportionAsString());
        System.out.println("Encoded Stream size divided by file size AS Boolean === " + jMetaDataAudio.getStreamSizeEncodedProportionAsBoolean());
        System.out.println("Encoded Stream size divided by file size AS BigInteger === " + jMetaDataAudio.getStreamSizeEncodedProportionAsBigInteger());
        System.out.println("Encoded Stream size divided by file size AS URL === " + jMetaDataAudio.getStreamSizeEncodedProportionAsURL());
        System.out.println("Source_StreamSize_Encoded/String1 AS Integer === " + jMetaDataAudio.getSourceStreamSizeEncodedString1AsInteger());
        System.out.println("Source_StreamSize_Encoded/String1 AS Long === " + jMetaDataAudio.getSourceStreamSizeEncodedString1AsLong());
        System.out.println("Source_StreamSize_Encoded/String1 AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString1AsLocalDateTime());
        System.out.println("Source_StreamSize_Encoded/String1 AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeEncodedString1AsLocalTime());
        System.out.println("Source_StreamSize_Encoded/String1 AS String === " + jMetaDataAudio.getSourceStreamSizeEncodedString1AsString());
        System.out.println("Source_StreamSize_Encoded/String1 AS Boolean === " + jMetaDataAudio.getSourceStreamSizeEncodedString1AsBoolean());
        System.out.println("Source_StreamSize_Encoded/String1 AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeEncodedString1AsBigInteger());
        System.out.println("Source_StreamSize_Encoded/String1 AS URL === " + jMetaDataAudio.getSourceStreamSizeEncodedString1AsURL());
        System.out.println("Position of channels AS Integer === " + jMetaDataAudio.getChannelPositionsAsInteger());
        System.out.println("Position of channels AS Long === " + jMetaDataAudio.getChannelPositionsAsLong());
        System.out.println("Position of channels AS LocalDateTime === " + jMetaDataAudio.getChannelPositionsAsLocalDateTime());
        System.out.println("Position of channels AS LocalTime === " + jMetaDataAudio.getChannelPositionsAsLocalTime());
        System.out.println("Position of channels AS String === " + jMetaDataAudio.getChannelPositionsAsString());
        System.out.println("Position of channels AS Boolean === " + jMetaDataAudio.getChannelPositionsAsBoolean());
        System.out.println("Position of channels AS BigInteger === " + jMetaDataAudio.getChannelPositionsAsBigInteger());
        System.out.println("Position of channels AS URL === " + jMetaDataAudio.getChannelPositionsAsURL());
        System.out.println("Play time of the stream, in ms AS Integer === " + jMetaDataAudio.getDurationAsInteger());
        System.out.println("Play time of the stream, in ms AS Long === " + jMetaDataAudio.getDurationAsLong());
        System.out.println("Play time of the stream, in ms AS LocalDateTime === " + jMetaDataAudio.getDurationAsLocalDateTime());
        System.out.println("Play time of the stream, in ms AS LocalTime === " + jMetaDataAudio.getDurationAsLocalTime());
        System.out.println("Play time of the stream, in ms AS String === " + jMetaDataAudio.getDurationAsString());
        System.out.println("Play time of the stream, in ms AS Boolean === " + jMetaDataAudio.getDurationAsBoolean());
        System.out.println("Play time of the stream, in ms AS BigInteger === " + jMetaDataAudio.getDurationAsBigInteger());
        System.out.println("Play time of the stream, in ms AS URL === " + jMetaDataAudio.getDurationAsURL());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataAudio.getSourceDurationString5AsInteger());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataAudio.getSourceDurationString5AsLong());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataAudio.getSourceDurationString5AsLocalDateTime());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataAudio.getSourceDurationString5AsLocalTime());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataAudio.getSourceDurationString5AsString());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataAudio.getSourceDurationString5AsBoolean());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataAudio.getSourceDurationString5AsBigInteger());
        System.out.println("Source Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataAudio.getSourceDurationString5AsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getDurationLastFrameStringAsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getDurationLastFrameStringAsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationLastFrameStringAsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getDurationLastFrameStringAsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getDurationLastFrameStringAsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getDurationLastFrameStringAsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getDurationLastFrameStringAsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getDurationLastFrameStringAsURL());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataAudio.getSourceDurationString4AsInteger());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataAudio.getSourceDurationString4AsLong());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataAudio.getSourceDurationString4AsLocalDateTime());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataAudio.getSourceDurationString4AsLocalTime());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataAudio.getSourceDurationString4AsString());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataAudio.getSourceDurationString4AsBoolean());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataAudio.getSourceDurationString4AsBigInteger());
        System.out.println("Source Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataAudio.getSourceDurationString4AsURL());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Integer === " + jMetaDataAudio.getSourceDurationString3AsInteger());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Long === " + jMetaDataAudio.getSourceDurationString3AsLong());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataAudio.getSourceDurationString3AsLocalDateTime());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataAudio.getSourceDurationString3AsLocalTime());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS String === " + jMetaDataAudio.getSourceDurationString3AsString());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataAudio.getSourceDurationString3AsBoolean());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataAudio.getSourceDurationString3AsBigInteger());
        System.out.println("Source Play time in format : HH:MM:SS.MMM AS URL === " + jMetaDataAudio.getSourceDurationString3AsURL());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationString2AsInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getSourceDurationString2AsLong());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationString2AsLocalDateTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationString2AsLocalTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getSourceDurationString2AsString());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationString2AsBoolean());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationString2AsBigInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getSourceDurationString2AsURL());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationString1AsInteger());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataAudio.getSourceDurationString1AsLong());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationString1AsLocalDateTime());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationString1AsLocalTime());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataAudio.getSourceDurationString1AsString());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationString1AsBoolean());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationString1AsBigInteger());
        System.out.println("Source Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataAudio.getSourceDurationString1AsURL());
        System.out.println("Hint/popular name for this codec ID AS Integer === " + jMetaDataAudio.getCodecIDHintAsInteger());
        System.out.println("Hint/popular name for this codec ID AS Long === " + jMetaDataAudio.getCodecIDHintAsLong());
        System.out.println("Hint/popular name for this codec ID AS LocalDateTime === " + jMetaDataAudio.getCodecIDHintAsLocalDateTime());
        System.out.println("Hint/popular name for this codec ID AS LocalTime === " + jMetaDataAudio.getCodecIDHintAsLocalTime());
        System.out.println("Hint/popular name for this codec ID AS String === " + jMetaDataAudio.getCodecIDHintAsString());
        System.out.println("Hint/popular name for this codec ID AS Boolean === " + jMetaDataAudio.getCodecIDHintAsBoolean());
        System.out.println("Hint/popular name for this codec ID AS BigInteger === " + jMetaDataAudio.getCodecIDHintAsBigInteger());
        System.out.println("Hint/popular name for this codec ID AS URL === " + jMetaDataAudio.getCodecIDHintAsURL());
        System.out.println("Number of channels after matrix decoding AS Integer === " + jMetaDataAudio.getMatrixChannelsAsInteger());
        System.out.println("Number of channels after matrix decoding AS Long === " + jMetaDataAudio.getMatrixChannelsAsLong());
        System.out.println("Number of channels after matrix decoding AS LocalDateTime === " + jMetaDataAudio.getMatrixChannelsAsLocalDateTime());
        System.out.println("Number of channels after matrix decoding AS LocalTime === " + jMetaDataAudio.getMatrixChannelsAsLocalTime());
        System.out.println("Number of channels after matrix decoding AS String === " + jMetaDataAudio.getMatrixChannelsAsString());
        System.out.println("Number of channels after matrix decoding AS Boolean === " + jMetaDataAudio.getMatrixChannelsAsBoolean());
        System.out.println("Number of channels after matrix decoding AS BigInteger === " + jMetaDataAudio.getMatrixChannelsAsBigInteger());
        System.out.println("Number of channels after matrix decoding AS URL === " + jMetaDataAudio.getMatrixChannelsAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Integer === " + jMetaDataAudio.getEncodedApplicationAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Long === " + jMetaDataAudio.getEncodedApplicationAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS LocalDateTime === " + jMetaDataAudio.getEncodedApplicationAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS LocalTime === " + jMetaDataAudio.getEncodedApplicationAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS String === " + jMetaDataAudio.getEncodedApplicationAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Boolean === " + jMetaDataAudio.getEncodedApplicationAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS BigInteger === " + jMetaDataAudio.getEncodedApplicationAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS URL === " + jMetaDataAudio.getEncodedApplicationAsURL());
        System.out.println("Compression mode (Lossy or Lossless) AS Integer === " + jMetaDataAudio.getCompressionModeStringAsInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS Long === " + jMetaDataAudio.getCompressionModeStringAsLong());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalDateTime === " + jMetaDataAudio.getCompressionModeStringAsLocalDateTime());
        System.out.println("Compression mode (Lossy or Lossless) AS LocalTime === " + jMetaDataAudio.getCompressionModeStringAsLocalTime());
        System.out.println("Compression mode (Lossy or Lossless) AS String === " + jMetaDataAudio.getCompressionModeStringAsString());
        System.out.println("Compression mode (Lossy or Lossless) AS Boolean === " + jMetaDataAudio.getCompressionModeStringAsBoolean());
        System.out.println("Compression mode (Lossy or Lossless) AS BigInteger === " + jMetaDataAudio.getCompressionModeStringAsBigInteger());
        System.out.println("Compression mode (Lossy or Lossless) AS URL === " + jMetaDataAudio.getCompressionModeStringAsURL());
        System.out.println("StreamSize/String2 AS Integer === " + jMetaDataAudio.getStreamSizeString2AsInteger());
        System.out.println("StreamSize/String2 AS Long === " + jMetaDataAudio.getStreamSizeString2AsLong());
        System.out.println("StreamSize/String2 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeString2AsLocalDateTime());
        System.out.println("StreamSize/String2 AS LocalTime === " + jMetaDataAudio.getStreamSizeString2AsLocalTime());
        System.out.println("StreamSize/String2 AS String === " + jMetaDataAudio.getStreamSizeString2AsString());
        System.out.println("StreamSize/String2 AS Boolean === " + jMetaDataAudio.getStreamSizeString2AsBoolean());
        System.out.println("StreamSize/String2 AS BigInteger === " + jMetaDataAudio.getStreamSizeString2AsBigInteger());
        System.out.println("StreamSize/String2 AS URL === " + jMetaDataAudio.getStreamSizeString2AsURL());
        System.out.println("StreamSize/String1 AS Integer === " + jMetaDataAudio.getStreamSizeString1AsInteger());
        System.out.println("StreamSize/String1 AS Long === " + jMetaDataAudio.getStreamSizeString1AsLong());
        System.out.println("StreamSize/String1 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeString1AsLocalDateTime());
        System.out.println("StreamSize/String1 AS LocalTime === " + jMetaDataAudio.getStreamSizeString1AsLocalTime());
        System.out.println("StreamSize/String1 AS String === " + jMetaDataAudio.getStreamSizeString1AsString());
        System.out.println("StreamSize/String1 AS Boolean === " + jMetaDataAudio.getStreamSizeString1AsBoolean());
        System.out.println("StreamSize/String1 AS BigInteger === " + jMetaDataAudio.getStreamSizeString1AsBigInteger());
        System.out.println("StreamSize/String1 AS URL === " + jMetaDataAudio.getStreamSizeString1AsURL());
        System.out.println("StreamSize/String4 AS Integer === " + jMetaDataAudio.getStreamSizeString4AsInteger());
        System.out.println("StreamSize/String4 AS Long === " + jMetaDataAudio.getStreamSizeString4AsLong());
        System.out.println("StreamSize/String4 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeString4AsLocalDateTime());
        System.out.println("StreamSize/String4 AS LocalTime === " + jMetaDataAudio.getStreamSizeString4AsLocalTime());
        System.out.println("StreamSize/String4 AS String === " + jMetaDataAudio.getStreamSizeString4AsString());
        System.out.println("StreamSize/String4 AS Boolean === " + jMetaDataAudio.getStreamSizeString4AsBoolean());
        System.out.println("StreamSize/String4 AS BigInteger === " + jMetaDataAudio.getStreamSizeString4AsBigInteger());
        System.out.println("StreamSize/String4 AS URL === " + jMetaDataAudio.getStreamSizeString4AsURL());
        System.out.println("StreamSize/String3 AS Integer === " + jMetaDataAudio.getStreamSizeString3AsInteger());
        System.out.println("StreamSize/String3 AS Long === " + jMetaDataAudio.getStreamSizeString3AsLong());
        System.out.println("StreamSize/String3 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeString3AsLocalDateTime());
        System.out.println("StreamSize/String3 AS LocalTime === " + jMetaDataAudio.getStreamSizeString3AsLocalTime());
        System.out.println("StreamSize/String3 AS String === " + jMetaDataAudio.getStreamSizeString3AsString());
        System.out.println("StreamSize/String3 AS Boolean === " + jMetaDataAudio.getStreamSizeString3AsBoolean());
        System.out.println("StreamSize/String3 AS BigInteger === " + jMetaDataAudio.getStreamSizeString3AsBigInteger());
        System.out.println("StreamSize/String3 AS URL === " + jMetaDataAudio.getStreamSizeString3AsURL());
        System.out.println("Streamsize in with percentage value AS Integer === " + jMetaDataAudio.getStreamSizeString5AsInteger());
        System.out.println("Streamsize in with percentage value AS Long === " + jMetaDataAudio.getStreamSizeString5AsLong());
        System.out.println("Streamsize in with percentage value AS LocalDateTime === " + jMetaDataAudio.getStreamSizeString5AsLocalDateTime());
        System.out.println("Streamsize in with percentage value AS LocalTime === " + jMetaDataAudio.getStreamSizeString5AsLocalTime());
        System.out.println("Streamsize in with percentage value AS String === " + jMetaDataAudio.getStreamSizeString5AsString());
        System.out.println("Streamsize in with percentage value AS Boolean === " + jMetaDataAudio.getStreamSizeString5AsBoolean());
        System.out.println("Streamsize in with percentage value AS BigInteger === " + jMetaDataAudio.getStreamSizeString5AsBigInteger());
        System.out.println("Streamsize in with percentage value AS URL === " + jMetaDataAudio.getStreamSizeString5AsURL());
        System.out.println("ReplayGain_Gain/String AS Integer === " + jMetaDataAudio.getReplayGainGainStringAsInteger());
        System.out.println("ReplayGain_Gain/String AS Long === " + jMetaDataAudio.getReplayGainGainStringAsLong());
        System.out.println("ReplayGain_Gain/String AS LocalDateTime === " + jMetaDataAudio.getReplayGainGainStringAsLocalDateTime());
        System.out.println("ReplayGain_Gain/String AS LocalTime === " + jMetaDataAudio.getReplayGainGainStringAsLocalTime());
        System.out.println("ReplayGain_Gain/String AS String === " + jMetaDataAudio.getReplayGainGainStringAsString());
        System.out.println("ReplayGain_Gain/String AS Boolean === " + jMetaDataAudio.getReplayGainGainStringAsBoolean());
        System.out.println("ReplayGain_Gain/String AS BigInteger === " + jMetaDataAudio.getReplayGainGainStringAsBigInteger());
        System.out.println("ReplayGain_Gain/String AS URL === " + jMetaDataAudio.getReplayGainGainStringAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataAudio.getStreamKindAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataAudio.getStreamKindAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataAudio.getStreamKindAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataAudio.getStreamKindAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataAudio.getStreamKindAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataAudio.getStreamKindAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataAudio.getStreamKindAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataAudio.getStreamKindAsURL());
        System.out.println("Bit rate (with measurement) AS Integer === " + jMetaDataAudio.getBitRateStringAsInteger());
        System.out.println("Bit rate (with measurement) AS Long === " + jMetaDataAudio.getBitRateStringAsLong());
        System.out.println("Bit rate (with measurement) AS LocalDateTime === " + jMetaDataAudio.getBitRateStringAsLocalDateTime());
        System.out.println("Bit rate (with measurement) AS LocalTime === " + jMetaDataAudio.getBitRateStringAsLocalTime());
        System.out.println("Bit rate (with measurement) AS String === " + jMetaDataAudio.getBitRateStringAsString());
        System.out.println("Bit rate (with measurement) AS Boolean === " + jMetaDataAudio.getBitRateStringAsBoolean());
        System.out.println("Bit rate (with measurement) AS BigInteger === " + jMetaDataAudio.getBitRateStringAsBigInteger());
        System.out.println("Bit rate (with measurement) AS URL === " + jMetaDataAudio.getBitRateStringAsURL());
        System.out.println("Format_Settings_Sign AS Integer === " + jMetaDataAudio.getFormatSettingsSignAsInteger());
        System.out.println("Format_Settings_Sign AS Long === " + jMetaDataAudio.getFormatSettingsSignAsLong());
        System.out.println("Format_Settings_Sign AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsSignAsLocalDateTime());
        System.out.println("Format_Settings_Sign AS LocalTime === " + jMetaDataAudio.getFormatSettingsSignAsLocalTime());
        System.out.println("Format_Settings_Sign AS String === " + jMetaDataAudio.getFormatSettingsSignAsString());
        System.out.println("Format_Settings_Sign AS Boolean === " + jMetaDataAudio.getFormatSettingsSignAsBoolean());
        System.out.println("Format_Settings_Sign AS BigInteger === " + jMetaDataAudio.getFormatSettingsSignAsBigInteger());
        System.out.println("Format_Settings_Sign AS URL === " + jMetaDataAudio.getFormatSettingsSignAsURL());
        System.out.println("Language (full) AS Integer === " + jMetaDataAudio.getLanguageString1AsInteger());
        System.out.println("Language (full) AS Long === " + jMetaDataAudio.getLanguageString1AsLong());
        System.out.println("Language (full) AS LocalDateTime === " + jMetaDataAudio.getLanguageString1AsLocalDateTime());
        System.out.println("Language (full) AS LocalTime === " + jMetaDataAudio.getLanguageString1AsLocalTime());
        System.out.println("Language (full) AS String === " + jMetaDataAudio.getLanguageString1AsString());
        System.out.println("Language (full) AS Boolean === " + jMetaDataAudio.getLanguageString1AsBoolean());
        System.out.println("Language (full) AS BigInteger === " + jMetaDataAudio.getLanguageString1AsBigInteger());
        System.out.println("Language (full) AS URL === " + jMetaDataAudio.getLanguageString1AsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Integer === " + jMetaDataAudio.getLanguageString2AsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Long === " + jMetaDataAudio.getLanguageString2AsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS LocalDateTime === " + jMetaDataAudio.getLanguageString2AsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS LocalTime === " + jMetaDataAudio.getLanguageString2AsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS String === " + jMetaDataAudio.getLanguageString2AsString());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Boolean === " + jMetaDataAudio.getLanguageString2AsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS BigInteger === " + jMetaDataAudio.getLanguageString2AsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS URL === " + jMetaDataAudio.getLanguageString2AsURL());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Integer === " + jMetaDataAudio.getLanguageString3AsInteger());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Long === " + jMetaDataAudio.getLanguageString3AsLong());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS LocalDateTime === " + jMetaDataAudio.getLanguageString3AsLocalDateTime());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS LocalTime === " + jMetaDataAudio.getLanguageString3AsLocalTime());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS String === " + jMetaDataAudio.getLanguageString3AsString());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Boolean === " + jMetaDataAudio.getLanguageString3AsBoolean());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS BigInteger === " + jMetaDataAudio.getLanguageString3AsBigInteger());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS URL === " + jMetaDataAudio.getLanguageString3AsURL());
        System.out.println("Position of channels after matrix decoding AS Integer === " + jMetaDataAudio.getMatrixChannelPositionsAsInteger());
        System.out.println("Position of channels after matrix decoding AS Long === " + jMetaDataAudio.getMatrixChannelPositionsAsLong());
        System.out.println("Position of channels after matrix decoding AS LocalDateTime === " + jMetaDataAudio.getMatrixChannelPositionsAsLocalDateTime());
        System.out.println("Position of channels after matrix decoding AS LocalTime === " + jMetaDataAudio.getMatrixChannelPositionsAsLocalTime());
        System.out.println("Position of channels after matrix decoding AS String === " + jMetaDataAudio.getMatrixChannelPositionsAsString());
        System.out.println("Position of channels after matrix decoding AS Boolean === " + jMetaDataAudio.getMatrixChannelPositionsAsBoolean());
        System.out.println("Position of channels after matrix decoding AS BigInteger === " + jMetaDataAudio.getMatrixChannelPositionsAsBigInteger());
        System.out.println("Position of channels after matrix decoding AS URL === " + jMetaDataAudio.getMatrixChannelPositionsAsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Integer === " + jMetaDataAudio.getLanguageString4AsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Long === " + jMetaDataAudio.getLanguageString4AsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS LocalDateTime === " + jMetaDataAudio.getLanguageString4AsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS LocalTime === " + jMetaDataAudio.getLanguageString4AsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS String === " + jMetaDataAudio.getLanguageString4AsString());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Boolean === " + jMetaDataAudio.getLanguageString4AsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS BigInteger === " + jMetaDataAudio.getLanguageString4AsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS URL === " + jMetaDataAudio.getLanguageString4AsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataAudio.getCodecIDAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataAudio.getCodecIDAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataAudio.getCodecIDAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataAudio.getCodecIDAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataAudio.getCodecIDAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataAudio.getCodecIDAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataAudio.getCodecIDAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataAudio.getCodecIDAsURL());
        System.out.println("Number of a group in order to provide versions of the same track AS Integer === " + jMetaDataAudio.getAlternateGroupAsInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS Long === " + jMetaDataAudio.getAlternateGroupAsLong());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalDateTime === " + jMetaDataAudio.getAlternateGroupAsLocalDateTime());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalTime === " + jMetaDataAudio.getAlternateGroupAsLocalTime());
        System.out.println("Number of a group in order to provide versions of the same track AS String === " + jMetaDataAudio.getAlternateGroupAsString());
        System.out.println("Number of a group in order to provide versions of the same track AS Boolean === " + jMetaDataAudio.getAlternateGroupAsBoolean());
        System.out.println("Number of a group in order to provide versions of the same track AS BigInteger === " + jMetaDataAudio.getAlternateGroupAsBigInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS URL === " + jMetaDataAudio.getAlternateGroupAsURL());
        System.out.println("Between how many video frames the stream is inserted AS Integer === " + jMetaDataAudio.getInterleaveVideoFramesAsInteger());
        System.out.println("Between how many video frames the stream is inserted AS Long === " + jMetaDataAudio.getInterleaveVideoFramesAsLong());
        System.out.println("Between how many video frames the stream is inserted AS LocalDateTime === " + jMetaDataAudio.getInterleaveVideoFramesAsLocalDateTime());
        System.out.println("Between how many video frames the stream is inserted AS LocalTime === " + jMetaDataAudio.getInterleaveVideoFramesAsLocalTime());
        System.out.println("Between how many video frames the stream is inserted AS String === " + jMetaDataAudio.getInterleaveVideoFramesAsString());
        System.out.println("Between how many video frames the stream is inserted AS Boolean === " + jMetaDataAudio.getInterleaveVideoFramesAsBoolean());
        System.out.println("Between how many video frames the stream is inserted AS BigInteger === " + jMetaDataAudio.getInterleaveVideoFramesAsBigInteger());
        System.out.println("Between how many video frames the stream is inserted AS URL === " + jMetaDataAudio.getInterleaveVideoFramesAsURL());
        System.out.println("Matrix format (e.g. DTS Neural) AS Integer === " + jMetaDataAudio.getMatrixFormatAsInteger());
        System.out.println("Matrix format (e.g. DTS Neural) AS Long === " + jMetaDataAudio.getMatrixFormatAsLong());
        System.out.println("Matrix format (e.g. DTS Neural) AS LocalDateTime === " + jMetaDataAudio.getMatrixFormatAsLocalDateTime());
        System.out.println("Matrix format (e.g. DTS Neural) AS LocalTime === " + jMetaDataAudio.getMatrixFormatAsLocalTime());
        System.out.println("Matrix format (e.g. DTS Neural) AS String === " + jMetaDataAudio.getMatrixFormatAsString());
        System.out.println("Matrix format (e.g. DTS Neural) AS Boolean === " + jMetaDataAudio.getMatrixFormatAsBoolean());
        System.out.println("Matrix format (e.g. DTS Neural) AS BigInteger === " + jMetaDataAudio.getMatrixFormatAsBigInteger());
        System.out.println("Matrix format (e.g. DTS Neural) AS URL === " + jMetaDataAudio.getMatrixFormatAsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Integer === " + jMetaDataAudio.getLanguageAsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Long === " + jMetaDataAudio.getLanguageAsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS LocalDateTime === " + jMetaDataAudio.getLanguageAsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS LocalTime === " + jMetaDataAudio.getLanguageAsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS String === " + jMetaDataAudio.getLanguageAsString());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Boolean === " + jMetaDataAudio.getLanguageAsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS BigInteger === " + jMetaDataAudio.getLanguageAsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS URL === " + jMetaDataAudio.getLanguageAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Integer === " + jMetaDataAudio.getDurationLastFrameAsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Long === " + jMetaDataAudio.getDurationLastFrameAsLong());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataAudio.getDurationLastFrameAsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS LocalTime === " + jMetaDataAudio.getDurationLastFrameAsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS String === " + jMetaDataAudio.getDurationLastFrameAsString());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS Boolean === " + jMetaDataAudio.getDurationLastFrameAsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS BigInteger === " + jMetaDataAudio.getDurationLastFrameAsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in ms AS URL === " + jMetaDataAudio.getDurationLastFrameAsURL());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Integer === " + jMetaDataAudio.getEncodedLibraryStringAsInteger());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Long === " + jMetaDataAudio.getEncodedLibraryStringAsLong());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalDateTime === " + jMetaDataAudio.getEncodedLibraryStringAsLocalDateTime());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalTime === " + jMetaDataAudio.getEncodedLibraryStringAsLocalTime());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS String === " + jMetaDataAudio.getEncodedLibraryStringAsString());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Boolean === " + jMetaDataAudio.getEncodedLibraryStringAsBoolean());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS BigInteger === " + jMetaDataAudio.getEncodedLibraryStringAsBigInteger());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS URL === " + jMetaDataAudio.getEncodedLibraryStringAsURL());
        System.out.println("in KHz AS Integer === " + jMetaDataAudio.getSamplingRateStringAsInteger());
        System.out.println("in KHz AS Long === " + jMetaDataAudio.getSamplingRateStringAsLong());
        System.out.println("in KHz AS LocalDateTime === " + jMetaDataAudio.getSamplingRateStringAsLocalDateTime());
        System.out.println("in KHz AS LocalTime === " + jMetaDataAudio.getSamplingRateStringAsLocalTime());
        System.out.println("in KHz AS String === " + jMetaDataAudio.getSamplingRateStringAsString());
        System.out.println("in KHz AS Boolean === " + jMetaDataAudio.getSamplingRateStringAsBoolean());
        System.out.println("in KHz AS BigInteger === " + jMetaDataAudio.getSamplingRateStringAsBigInteger());
        System.out.println("in KHz AS URL === " + jMetaDataAudio.getSamplingRateStringAsURL());
        System.out.println("Streamsize in with percentage value AS Integer === " + jMetaDataAudio.getStreamSizeStringAsInteger());
        System.out.println("Streamsize in with percentage value AS Long === " + jMetaDataAudio.getStreamSizeStringAsLong());
        System.out.println("Streamsize in with percentage value AS LocalDateTime === " + jMetaDataAudio.getStreamSizeStringAsLocalDateTime());
        System.out.println("Streamsize in with percentage value AS LocalTime === " + jMetaDataAudio.getStreamSizeStringAsLocalTime());
        System.out.println("Streamsize in with percentage value AS String === " + jMetaDataAudio.getStreamSizeStringAsString());
        System.out.println("Streamsize in with percentage value AS Boolean === " + jMetaDataAudio.getStreamSizeStringAsBoolean());
        System.out.println("Streamsize in with percentage value AS BigInteger === " + jMetaDataAudio.getStreamSizeStringAsBigInteger());
        System.out.println("Streamsize in with percentage value AS URL === " + jMetaDataAudio.getStreamSizeStringAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataAudio.getDefaultStringAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataAudio.getDefaultStringAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataAudio.getDefaultStringAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataAudio.getDefaultStringAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataAudio.getDefaultStringAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataAudio.getDefaultStringAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataAudio.getDefaultStringAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataAudio.getDefaultStringAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataAudio.getOriginalSourceMediumIDStringAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataAudio.getOriginalSourceMediumIDStringAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataAudio.getOriginalSourceMediumIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataAudio.getOriginalSourceMediumIDStringAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataAudio.getOriginalSourceMediumIDStringAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataAudio.getOriginalSourceMediumIDStringAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataAudio.getOriginalSourceMediumIDStringAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataAudio.getOriginalSourceMediumIDStringAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationLastFrameString1AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataAudio.getSourceDurationLastFrameString1AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationLastFrameString1AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationLastFrameString1AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataAudio.getSourceDurationLastFrameString1AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationLastFrameString1AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationLastFrameString1AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataAudio.getSourceDurationLastFrameString1AsURL());
        System.out.println("Format_Settings_Mode AS Integer === " + jMetaDataAudio.getFormatSettingsModeAsInteger());
        System.out.println("Format_Settings_Mode AS Long === " + jMetaDataAudio.getFormatSettingsModeAsLong());
        System.out.println("Format_Settings_Mode AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsModeAsLocalDateTime());
        System.out.println("Format_Settings_Mode AS LocalTime === " + jMetaDataAudio.getFormatSettingsModeAsLocalTime());
        System.out.println("Format_Settings_Mode AS String === " + jMetaDataAudio.getFormatSettingsModeAsString());
        System.out.println("Format_Settings_Mode AS Boolean === " + jMetaDataAudio.getFormatSettingsModeAsBoolean());
        System.out.println("Format_Settings_Mode AS BigInteger === " + jMetaDataAudio.getFormatSettingsModeAsBigInteger());
        System.out.println("Format_Settings_Mode AS URL === " + jMetaDataAudio.getFormatSettingsModeAsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataAudio.getSourceDurationLastFrameString3AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataAudio.getSourceDurationLastFrameString3AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataAudio.getSourceDurationLastFrameString3AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataAudio.getSourceDurationLastFrameString3AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataAudio.getSourceDurationLastFrameString3AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataAudio.getSourceDurationLastFrameString3AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataAudio.getSourceDurationLastFrameString3AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataAudio.getSourceDurationLastFrameString3AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationLastFrameString2AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getSourceDurationLastFrameString2AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationLastFrameString2AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationLastFrameString2AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getSourceDurationLastFrameString2AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationLastFrameString2AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationLastFrameString2AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getSourceDurationLastFrameString2AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataAudio.getSourceDurationLastFrameString5AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataAudio.getSourceDurationLastFrameString5AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataAudio.getSourceDurationLastFrameString5AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataAudio.getSourceDurationLastFrameString5AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataAudio.getSourceDurationLastFrameString5AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataAudio.getSourceDurationLastFrameString5AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataAudio.getSourceDurationLastFrameString5AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataAudio.getSourceDurationLastFrameString5AsURL());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataAudio.getSourceDurationLastFrameString4AsInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataAudio.getSourceDurationLastFrameString4AsLong());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataAudio.getSourceDurationLastFrameString4AsLocalDateTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataAudio.getSourceDurationLastFrameString4AsLocalTime());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataAudio.getSourceDurationLastFrameString4AsString());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataAudio.getSourceDurationLastFrameString4AsBoolean());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataAudio.getSourceDurationLastFrameString4AsBigInteger());
        System.out.println("Source Duration of the last frame if it is longer than others, in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataAudio.getSourceDurationLastFrameString4AsURL());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS Integer === " + jMetaDataAudio.getBitDepthStringAsInteger());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS Long === " + jMetaDataAudio.getBitDepthStringAsLong());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS LocalDateTime === " + jMetaDataAudio.getBitDepthStringAsLocalDateTime());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS LocalTime === " + jMetaDataAudio.getBitDepthStringAsLocalTime());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS String === " + jMetaDataAudio.getBitDepthStringAsString());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS Boolean === " + jMetaDataAudio.getBitDepthStringAsBoolean());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS BigInteger === " + jMetaDataAudio.getBitDepthStringAsBigInteger());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS URL === " + jMetaDataAudio.getBitDepthStringAsURL());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS Integer === " + jMetaDataAudio.getFrameCountAsInteger());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS Long === " + jMetaDataAudio.getFrameCountAsLong());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS LocalDateTime === " + jMetaDataAudio.getFrameCountAsLocalDateTime());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS LocalTime === " + jMetaDataAudio.getFrameCountAsLocalTime());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS String === " + jMetaDataAudio.getFrameCountAsString());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS Boolean === " + jMetaDataAudio.getFrameCountAsBoolean());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS BigInteger === " + jMetaDataAudio.getFrameCountAsBigInteger());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS URL === " + jMetaDataAudio.getFrameCountAsURL());
        System.out.println("Name of the track AS Integer === " + jMetaDataAudio.getTitleAsInteger());
        System.out.println("Name of the track AS Long === " + jMetaDataAudio.getTitleAsLong());
        System.out.println("Name of the track AS LocalDateTime === " + jMetaDataAudio.getTitleAsLocalDateTime());
        System.out.println("Name of the track AS LocalTime === " + jMetaDataAudio.getTitleAsLocalTime());
        System.out.println("Name of the track AS String === " + jMetaDataAudio.getTitleAsString());
        System.out.println("Name of the track AS Boolean === " + jMetaDataAudio.getTitleAsBoolean());
        System.out.println("Name of the track AS BigInteger === " + jMetaDataAudio.getTitleAsBigInteger());
        System.out.println("Name of the track AS URL === " + jMetaDataAudio.getTitleAsURL());
        System.out.println("Delay drop frame AS Integer === " + jMetaDataAudio.getDelayDropFrameAsInteger());
        System.out.println("Delay drop frame AS Long === " + jMetaDataAudio.getDelayDropFrameAsLong());
        System.out.println("Delay drop frame AS LocalDateTime === " + jMetaDataAudio.getDelayDropFrameAsLocalDateTime());
        System.out.println("Delay drop frame AS LocalTime === " + jMetaDataAudio.getDelayDropFrameAsLocalTime());
        System.out.println("Delay drop frame AS String === " + jMetaDataAudio.getDelayDropFrameAsString());
        System.out.println("Delay drop frame AS Boolean === " + jMetaDataAudio.getDelayDropFrameAsBoolean());
        System.out.println("Delay drop frame AS BigInteger === " + jMetaDataAudio.getDelayDropFrameAsBigInteger());
        System.out.println("Delay drop frame AS URL === " + jMetaDataAudio.getDelayDropFrameAsURL());
        System.out.println("Sampling rate AS Integer === " + jMetaDataAudio.getSamplingRateAsInteger());
        System.out.println("Sampling rate AS Long === " + jMetaDataAudio.getSamplingRateAsLong());
        System.out.println("Sampling rate AS LocalDateTime === " + jMetaDataAudio.getSamplingRateAsLocalDateTime());
        System.out.println("Sampling rate AS LocalTime === " + jMetaDataAudio.getSamplingRateAsLocalTime());
        System.out.println("Sampling rate AS String === " + jMetaDataAudio.getSamplingRateAsString());
        System.out.println("Sampling rate AS Boolean === " + jMetaDataAudio.getSamplingRateAsBoolean());
        System.out.println("Sampling rate AS BigInteger === " + jMetaDataAudio.getSamplingRateAsBigInteger());
        System.out.println("Sampling rate AS URL === " + jMetaDataAudio.getSamplingRateAsURL());
        System.out.println("Maximum Bit rate in bps AS Integer === " + jMetaDataAudio.getBitRateMaximumAsInteger());
        System.out.println("Maximum Bit rate in bps AS Long === " + jMetaDataAudio.getBitRateMaximumAsLong());
        System.out.println("Maximum Bit rate in bps AS LocalDateTime === " + jMetaDataAudio.getBitRateMaximumAsLocalDateTime());
        System.out.println("Maximum Bit rate in bps AS LocalTime === " + jMetaDataAudio.getBitRateMaximumAsLocalTime());
        System.out.println("Maximum Bit rate in bps AS String === " + jMetaDataAudio.getBitRateMaximumAsString());
        System.out.println("Maximum Bit rate in bps AS Boolean === " + jMetaDataAudio.getBitRateMaximumAsBoolean());
        System.out.println("Maximum Bit rate in bps AS BigInteger === " + jMetaDataAudio.getBitRateMaximumAsBigInteger());
        System.out.println("Maximum Bit rate in bps AS URL === " + jMetaDataAudio.getBitRateMaximumAsURL());
        System.out.println("Format_Settings_Emphasis AS Integer === " + jMetaDataAudio.getFormatSettingsEmphasisAsInteger());
        System.out.println("Format_Settings_Emphasis AS Long === " + jMetaDataAudio.getFormatSettingsEmphasisAsLong());
        System.out.println("Format_Settings_Emphasis AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsEmphasisAsLocalDateTime());
        System.out.println("Format_Settings_Emphasis AS LocalTime === " + jMetaDataAudio.getFormatSettingsEmphasisAsLocalTime());
        System.out.println("Format_Settings_Emphasis AS String === " + jMetaDataAudio.getFormatSettingsEmphasisAsString());
        System.out.println("Format_Settings_Emphasis AS Boolean === " + jMetaDataAudio.getFormatSettingsEmphasisAsBoolean());
        System.out.println("Format_Settings_Emphasis AS BigInteger === " + jMetaDataAudio.getFormatSettingsEmphasisAsBigInteger());
        System.out.println("Format_Settings_Emphasis AS URL === " + jMetaDataAudio.getFormatSettingsEmphasisAsURL());
        System.out.println("Stream size divided by file size AS Integer === " + jMetaDataAudio.getStreamSizeProportionAsInteger());
        System.out.println("Stream size divided by file size AS Long === " + jMetaDataAudio.getStreamSizeProportionAsLong());
        System.out.println("Stream size divided by file size AS LocalDateTime === " + jMetaDataAudio.getStreamSizeProportionAsLocalDateTime());
        System.out.println("Stream size divided by file size AS LocalTime === " + jMetaDataAudio.getStreamSizeProportionAsLocalTime());
        System.out.println("Stream size divided by file size AS String === " + jMetaDataAudio.getStreamSizeProportionAsString());
        System.out.println("Stream size divided by file size AS Boolean === " + jMetaDataAudio.getStreamSizeProportionAsBoolean());
        System.out.println("Stream size divided by file size AS BigInteger === " + jMetaDataAudio.getStreamSizeProportionAsBigInteger());
        System.out.println("Stream size divided by file size AS URL === " + jMetaDataAudio.getStreamSizeProportionAsURL());
        System.out.println("Source Encoded Stream size divided by file size AS Integer === " + jMetaDataAudio.getSourceStreamSizeEncodedProportionAsInteger());
        System.out.println("Source Encoded Stream size divided by file size AS Long === " + jMetaDataAudio.getSourceStreamSizeEncodedProportionAsLong());
        System.out.println("Source Encoded Stream size divided by file size AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeEncodedProportionAsLocalDateTime());
        System.out.println("Source Encoded Stream size divided by file size AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeEncodedProportionAsLocalTime());
        System.out.println("Source Encoded Stream size divided by file size AS String === " + jMetaDataAudio.getSourceStreamSizeEncodedProportionAsString());
        System.out.println("Source Encoded Stream size divided by file size AS Boolean === " + jMetaDataAudio.getSourceStreamSizeEncodedProportionAsBoolean());
        System.out.println("Source Encoded Stream size divided by file size AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeEncodedProportionAsBigInteger());
        System.out.println("Source Encoded Stream size divided by file size AS URL === " + jMetaDataAudio.getSourceStreamSizeEncodedProportionAsURL());
        System.out.println("Parameters used by the software AS Integer === " + jMetaDataAudio.getEncodedLibrarySettingsAsInteger());
        System.out.println("Parameters used by the software AS Long === " + jMetaDataAudio.getEncodedLibrarySettingsAsLong());
        System.out.println("Parameters used by the software AS LocalDateTime === " + jMetaDataAudio.getEncodedLibrarySettingsAsLocalDateTime());
        System.out.println("Parameters used by the software AS LocalTime === " + jMetaDataAudio.getEncodedLibrarySettingsAsLocalTime());
        System.out.println("Parameters used by the software AS String === " + jMetaDataAudio.getEncodedLibrarySettingsAsString());
        System.out.println("Parameters used by the software AS Boolean === " + jMetaDataAudio.getEncodedLibrarySettingsAsBoolean());
        System.out.println("Parameters used by the software AS BigInteger === " + jMetaDataAudio.getEncodedLibrarySettingsAsBigInteger());
        System.out.println("Parameters used by the software AS URL === " + jMetaDataAudio.getEncodedLibrarySettingsAsURL());
        System.out.println("Source Play time of the stream, in ms AS Integer === " + jMetaDataAudio.getSourceDurationAsInteger());
        System.out.println("Source Play time of the stream, in ms AS Long === " + jMetaDataAudio.getSourceDurationAsLong());
        System.out.println("Source Play time of the stream, in ms AS LocalDateTime === " + jMetaDataAudio.getSourceDurationAsLocalDateTime());
        System.out.println("Source Play time of the stream, in ms AS LocalTime === " + jMetaDataAudio.getSourceDurationAsLocalTime());
        System.out.println("Source Play time of the stream, in ms AS String === " + jMetaDataAudio.getSourceDurationAsString());
        System.out.println("Source Play time of the stream, in ms AS Boolean === " + jMetaDataAudio.getSourceDurationAsBoolean());
        System.out.println("Source Play time of the stream, in ms AS BigInteger === " + jMetaDataAudio.getSourceDurationAsBigInteger());
        System.out.println("Source Play time of the stream, in ms AS URL === " + jMetaDataAudio.getSourceDurationAsURL());
        System.out.println("Format_Settings_PS/String AS Integer === " + jMetaDataAudio.getFormatSettingsPSStringAsInteger());
        System.out.println("Format_Settings_PS/String AS Long === " + jMetaDataAudio.getFormatSettingsPSStringAsLong());
        System.out.println("Format_Settings_PS/String AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsPSStringAsLocalDateTime());
        System.out.println("Format_Settings_PS/String AS LocalTime === " + jMetaDataAudio.getFormatSettingsPSStringAsLocalTime());
        System.out.println("Format_Settings_PS/String AS String === " + jMetaDataAudio.getFormatSettingsPSStringAsString());
        System.out.println("Format_Settings_PS/String AS Boolean === " + jMetaDataAudio.getFormatSettingsPSStringAsBoolean());
        System.out.println("Format_Settings_PS/String AS BigInteger === " + jMetaDataAudio.getFormatSettingsPSStringAsBigInteger());
        System.out.println("Format_Settings_PS/String AS URL === " + jMetaDataAudio.getFormatSettingsPSStringAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataAudio.getDelayOriginalString1AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataAudio.getDelayOriginalString1AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalString1AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataAudio.getDelayOriginalString1AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataAudio.getDelayOriginalString1AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataAudio.getDelayOriginalString1AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataAudio.getDelayOriginalString1AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataAudio.getDelayOriginalString1AsURL());
        System.out.println("Count of objects available in this stream AS Integer === " + jMetaDataAudio.getCountAsInteger());
        System.out.println("Count of objects available in this stream AS Long === " + jMetaDataAudio.getCountAsLong());
        System.out.println("Count of objects available in this stream AS LocalDateTime === " + jMetaDataAudio.getCountAsLocalDateTime());
        System.out.println("Count of objects available in this stream AS LocalTime === " + jMetaDataAudio.getCountAsLocalTime());
        System.out.println("Count of objects available in this stream AS String === " + jMetaDataAudio.getCountAsString());
        System.out.println("Count of objects available in this stream AS Boolean === " + jMetaDataAudio.getCountAsBoolean());
        System.out.println("Count of objects available in this stream AS BigInteger === " + jMetaDataAudio.getCountAsBigInteger());
        System.out.println("Count of objects available in this stream AS URL === " + jMetaDataAudio.getCountAsURL());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Integer === " + jMetaDataAudio.getFormatSettingsWrappingAsInteger());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Long === " + jMetaDataAudio.getFormatSettingsWrappingAsLong());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsWrappingAsLocalDateTime());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS LocalTime === " + jMetaDataAudio.getFormatSettingsWrappingAsLocalTime());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS String === " + jMetaDataAudio.getFormatSettingsWrappingAsString());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS Boolean === " + jMetaDataAudio.getFormatSettingsWrappingAsBoolean());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS BigInteger === " + jMetaDataAudio.getFormatSettingsWrappingAsBigInteger());
        System.out.println("Wrapping mode (Frame wrapped or Clip wrapped) AS URL === " + jMetaDataAudio.getFormatSettingsWrappingAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataAudio.getDelayOriginalString2AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataAudio.getDelayOriginalString2AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalString2AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataAudio.getDelayOriginalString2AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataAudio.getDelayOriginalString2AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataAudio.getDelayOriginalString2AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataAudio.getDelayOriginalString2AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataAudio.getDelayOriginalString2AsURL());
        System.out.println("Encryption AS Integer === " + jMetaDataAudio.getEncryptionAsInteger());
        System.out.println("Encryption AS Long === " + jMetaDataAudio.getEncryptionAsLong());
        System.out.println("Encryption AS LocalDateTime === " + jMetaDataAudio.getEncryptionAsLocalDateTime());
        System.out.println("Encryption AS LocalTime === " + jMetaDataAudio.getEncryptionAsLocalTime());
        System.out.println("Encryption AS String === " + jMetaDataAudio.getEncryptionAsString());
        System.out.println("Encryption AS Boolean === " + jMetaDataAudio.getEncryptionAsBoolean());
        System.out.println("Encryption AS BigInteger === " + jMetaDataAudio.getEncryptionAsBigInteger());
        System.out.println("Encryption AS URL === " + jMetaDataAudio.getEncryptionAsURL());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Integer === " + jMetaDataAudio.getDelayOriginalAsInteger());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Long === " + jMetaDataAudio.getDelayOriginalAsLong());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalAsLocalDateTime());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS LocalTime === " + jMetaDataAudio.getDelayOriginalAsLocalTime());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS String === " + jMetaDataAudio.getDelayOriginalAsString());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS Boolean === " + jMetaDataAudio.getDelayOriginalAsBoolean());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS BigInteger === " + jMetaDataAudio.getDelayOriginalAsBigInteger());
        System.out.println("Delay fixed in the raw stream (relative) IN MS AS URL === " + jMetaDataAudio.getDelayOriginalAsURL());
        System.out.println("Frames per second, numerator AS Integer === " + jMetaDataAudio.getFrameRateNumAsInteger());
        System.out.println("Frames per second, numerator AS Long === " + jMetaDataAudio.getFrameRateNumAsLong());
        System.out.println("Frames per second, numerator AS LocalDateTime === " + jMetaDataAudio.getFrameRateNumAsLocalDateTime());
        System.out.println("Frames per second, numerator AS LocalTime === " + jMetaDataAudio.getFrameRateNumAsLocalTime());
        System.out.println("Frames per second, numerator AS String === " + jMetaDataAudio.getFrameRateNumAsString());
        System.out.println("Frames per second, numerator AS Boolean === " + jMetaDataAudio.getFrameRateNumAsBoolean());
        System.out.println("Frames per second, numerator AS BigInteger === " + jMetaDataAudio.getFrameRateNumAsBigInteger());
        System.out.println("Frames per second, numerator AS URL === " + jMetaDataAudio.getFrameRateNumAsURL());
        System.out.println("How this stream file is aligned in the container AS Integer === " + jMetaDataAudio.getAlignmentAsInteger());
        System.out.println("How this stream file is aligned in the container AS Long === " + jMetaDataAudio.getAlignmentAsLong());
        System.out.println("How this stream file is aligned in the container AS LocalDateTime === " + jMetaDataAudio.getAlignmentAsLocalDateTime());
        System.out.println("How this stream file is aligned in the container AS LocalTime === " + jMetaDataAudio.getAlignmentAsLocalTime());
        System.out.println("How this stream file is aligned in the container AS String === " + jMetaDataAudio.getAlignmentAsString());
        System.out.println("How this stream file is aligned in the container AS Boolean === " + jMetaDataAudio.getAlignmentAsBoolean());
        System.out.println("How this stream file is aligned in the container AS BigInteger === " + jMetaDataAudio.getAlignmentAsBigInteger());
        System.out.println("How this stream file is aligned in the container AS URL === " + jMetaDataAudio.getAlignmentAsURL());
        System.out.println("Version of this format AS Integer === " + jMetaDataAudio.getFormatVersionAsInteger());
        System.out.println("Version of this format AS Long === " + jMetaDataAudio.getFormatVersionAsLong());
        System.out.println("Version of this format AS LocalDateTime === " + jMetaDataAudio.getFormatVersionAsLocalDateTime());
        System.out.println("Version of this format AS LocalTime === " + jMetaDataAudio.getFormatVersionAsLocalTime());
        System.out.println("Version of this format AS String === " + jMetaDataAudio.getFormatVersionAsString());
        System.out.println("Version of this format AS Boolean === " + jMetaDataAudio.getFormatVersionAsBoolean());
        System.out.println("Version of this format AS BigInteger === " + jMetaDataAudio.getFormatVersionAsBigInteger());
        System.out.println("Version of this format AS URL === " + jMetaDataAudio.getFormatVersionAsURL());
        System.out.println("When multiple streams, number of the stream (base=1) AS Integer === " + jMetaDataAudio.getStreamKindPosAsInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS Long === " + jMetaDataAudio.getStreamKindPosAsLong());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalDateTime === " + jMetaDataAudio.getStreamKindPosAsLocalDateTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalTime === " + jMetaDataAudio.getStreamKindPosAsLocalTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS String === " + jMetaDataAudio.getStreamKindPosAsString());
        System.out.println("When multiple streams, number of the stream (base=1) AS Boolean === " + jMetaDataAudio.getStreamKindPosAsBoolean());
        System.out.println("When multiple streams, number of the stream (base=1) AS BigInteger === " + jMetaDataAudio.getStreamKindPosAsBigInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS URL === " + jMetaDataAudio.getStreamKindPosAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataAudio.getOriginalSourceMediumIDAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataAudio.getOriginalSourceMediumIDAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataAudio.getOriginalSourceMediumIDAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataAudio.getOriginalSourceMediumIDAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataAudio.getOriginalSourceMediumIDAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataAudio.getOriginalSourceMediumIDAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataAudio.getOriginalSourceMediumIDAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataAudio.getOriginalSourceMediumIDAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getDurationStringAsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getDurationStringAsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationStringAsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getDurationStringAsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getDurationStringAsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getDurationStringAsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getDurationStringAsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getDurationStringAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataAudio.getIDAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataAudio.getIDAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataAudio.getIDAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataAudio.getIDAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataAudio.getIDAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataAudio.getIDAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataAudio.getIDAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataAudio.getIDAsURL());
        System.out.println("Delay fixed in the stream (absolute / video) AS Integer === " + jMetaDataAudio.getVideoDelayAsInteger());
        System.out.println("Delay fixed in the stream (absolute / video) AS Long === " + jMetaDataAudio.getVideoDelayAsLong());
        System.out.println("Delay fixed in the stream (absolute / video) AS LocalDateTime === " + jMetaDataAudio.getVideoDelayAsLocalDateTime());
        System.out.println("Delay fixed in the stream (absolute / video) AS LocalTime === " + jMetaDataAudio.getVideoDelayAsLocalTime());
        System.out.println("Delay fixed in the stream (absolute / video) AS String === " + jMetaDataAudio.getVideoDelayAsString());
        System.out.println("Delay fixed in the stream (absolute / video) AS Boolean === " + jMetaDataAudio.getVideoDelayAsBoolean());
        System.out.println("Delay fixed in the stream (absolute / video) AS BigInteger === " + jMetaDataAudio.getVideoDelayAsBigInteger());
        System.out.println("Delay fixed in the stream (absolute / video) AS URL === " + jMetaDataAudio.getVideoDelayAsURL());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS Integer === " + jMetaDataAudio.getReplayGainGainAsInteger());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS Long === " + jMetaDataAudio.getReplayGainGainAsLong());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS LocalDateTime === " + jMetaDataAudio.getReplayGainGainAsLocalDateTime());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS LocalTime === " + jMetaDataAudio.getReplayGainGainAsLocalTime());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS String === " + jMetaDataAudio.getReplayGainGainAsString());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS Boolean === " + jMetaDataAudio.getReplayGainGainAsBoolean());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS BigInteger === " + jMetaDataAudio.getReplayGainGainAsBigInteger());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS URL === " + jMetaDataAudio.getReplayGainGainAsURL());
        System.out.println("Release date of software AS Integer === " + jMetaDataAudio.getEncodedLibraryDateAsInteger());
        System.out.println("Release date of software AS Long === " + jMetaDataAudio.getEncodedLibraryDateAsLong());
        System.out.println("Release date of software AS LocalDateTime === " + jMetaDataAudio.getEncodedLibraryDateAsLocalDateTime());
        System.out.println("Release date of software AS LocalTime === " + jMetaDataAudio.getEncodedLibraryDateAsLocalTime());
        System.out.println("Release date of software AS String === " + jMetaDataAudio.getEncodedLibraryDateAsString());
        System.out.println("Release date of software AS Boolean === " + jMetaDataAudio.getEncodedLibraryDateAsBoolean());
        System.out.println("Release date of software AS BigInteger === " + jMetaDataAudio.getEncodedLibraryDateAsBigInteger());
        System.out.println("Release date of software AS URL === " + jMetaDataAudio.getEncodedLibraryDateAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataAudio.getMenuIDStringAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataAudio.getMenuIDStringAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataAudio.getMenuIDStringAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataAudio.getMenuIDStringAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataAudio.getMenuIDStringAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataAudio.getMenuIDStringAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataAudio.getMenuIDStringAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataAudio.getMenuIDStringAsURL());
        System.out.println("More info about Language (e.g. Director's Comment) AS Integer === " + jMetaDataAudio.getLanguageMoreAsInteger());
        System.out.println("More info about Language (e.g. Director's Comment) AS Long === " + jMetaDataAudio.getLanguageMoreAsLong());
        System.out.println("More info about Language (e.g. Director's Comment) AS LocalDateTime === " + jMetaDataAudio.getLanguageMoreAsLocalDateTime());
        System.out.println("More info about Language (e.g. Director's Comment) AS LocalTime === " + jMetaDataAudio.getLanguageMoreAsLocalTime());
        System.out.println("More info about Language (e.g. Director's Comment) AS String === " + jMetaDataAudio.getLanguageMoreAsString());
        System.out.println("More info about Language (e.g. Director's Comment) AS Boolean === " + jMetaDataAudio.getLanguageMoreAsBoolean());
        System.out.println("More info about Language (e.g. Director's Comment) AS BigInteger === " + jMetaDataAudio.getLanguageMoreAsBigInteger());
        System.out.println("More info about Language (e.g. Director's Comment) AS URL === " + jMetaDataAudio.getLanguageMoreAsURL());
        System.out.println("Source Streamsize in with percentage value AS Integer === " + jMetaDataAudio.getSourceStreamSizeStringAsInteger());
        System.out.println("Source Streamsize in with percentage value AS Long === " + jMetaDataAudio.getSourceStreamSizeStringAsLong());
        System.out.println("Source Streamsize in with percentage value AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeStringAsLocalDateTime());
        System.out.println("Source Streamsize in with percentage value AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeStringAsLocalTime());
        System.out.println("Source Streamsize in with percentage value AS String === " + jMetaDataAudio.getSourceStreamSizeStringAsString());
        System.out.println("Source Streamsize in with percentage value AS Boolean === " + jMetaDataAudio.getSourceStreamSizeStringAsBoolean());
        System.out.println("Source Streamsize in with percentage value AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeStringAsBigInteger());
        System.out.println("Source Streamsize in with percentage value AS URL === " + jMetaDataAudio.getSourceStreamSizeStringAsURL());
        System.out.println("Format_Settings_Law AS Integer === " + jMetaDataAudio.getFormatSettingsLawAsInteger());
        System.out.println("Format_Settings_Law AS Long === " + jMetaDataAudio.getFormatSettingsLawAsLong());
        System.out.println("Format_Settings_Law AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsLawAsLocalDateTime());
        System.out.println("Format_Settings_Law AS LocalTime === " + jMetaDataAudio.getFormatSettingsLawAsLocalTime());
        System.out.println("Format_Settings_Law AS String === " + jMetaDataAudio.getFormatSettingsLawAsString());
        System.out.println("Format_Settings_Law AS Boolean === " + jMetaDataAudio.getFormatSettingsLawAsBoolean());
        System.out.println("Format_Settings_Law AS BigInteger === " + jMetaDataAudio.getFormatSettingsLawAsBigInteger());
        System.out.println("Format_Settings_Law AS URL === " + jMetaDataAudio.getFormatSettingsLawAsURL());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Integer === " + jMetaDataAudio.getDurationFirstFrameAsInteger());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Long === " + jMetaDataAudio.getDurationFirstFrameAsLong());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataAudio.getDurationFirstFrameAsLocalDateTime());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS LocalTime === " + jMetaDataAudio.getDurationFirstFrameAsLocalTime());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS String === " + jMetaDataAudio.getDurationFirstFrameAsString());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS Boolean === " + jMetaDataAudio.getDurationFirstFrameAsBoolean());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS BigInteger === " + jMetaDataAudio.getDurationFirstFrameAsBigInteger());
        System.out.println("Duration of the first frame if it is longer than others, in ms AS URL === " + jMetaDataAudio.getDurationFirstFrameAsURL());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Integer === " + jMetaDataAudio.getDelayOriginalString3AsInteger());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Long === " + jMetaDataAudio.getDelayOriginalString3AsLong());
        System.out.println("Delay in format: HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalString3AsLocalDateTime());
        System.out.println("Delay in format: HH:MM:SS.MMM AS LocalTime === " + jMetaDataAudio.getDelayOriginalString3AsLocalTime());
        System.out.println("Delay in format: HH:MM:SS.MMM AS String === " + jMetaDataAudio.getDelayOriginalString3AsString());
        System.out.println("Delay in format: HH:MM:SS.MMM AS Boolean === " + jMetaDataAudio.getDelayOriginalString3AsBoolean());
        System.out.println("Delay in format: HH:MM:SS.MMM AS BigInteger === " + jMetaDataAudio.getDelayOriginalString3AsBigInteger());
        System.out.println("Delay in format: HH:MM:SS.MMM AS URL === " + jMetaDataAudio.getDelayOriginalString3AsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Integer === " + jMetaDataAudio.getEncodedApplicationStringAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Long === " + jMetaDataAudio.getEncodedApplicationStringAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalDateTime === " + jMetaDataAudio.getEncodedApplicationStringAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalTime === " + jMetaDataAudio.getEncodedApplicationStringAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS String === " + jMetaDataAudio.getEncodedApplicationStringAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Boolean === " + jMetaDataAudio.getEncodedApplicationStringAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS BigInteger === " + jMetaDataAudio.getEncodedApplicationStringAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS URL === " + jMetaDataAudio.getEncodedApplicationStringAsURL());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataAudio.getDelayOriginalString4AsInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataAudio.getDelayOriginalString4AsLong());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalString4AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataAudio.getDelayOriginalString4AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataAudio.getDelayOriginalString4AsString());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataAudio.getDelayOriginalString4AsBoolean());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataAudio.getDelayOriginalString4AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataAudio.getDelayOriginalString4AsURL());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataAudio.getDelayOriginalString5AsInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataAudio.getDelayOriginalString5AsLong());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalString5AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataAudio.getDelayOriginalString5AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataAudio.getDelayOriginalString5AsString());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataAudio.getDelayOriginalString5AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataAudio.getDelayOriginalString5AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataAudio.getDelayOriginalString5AsURL());
        System.out.println("Format_Settings_PS AS Integer === " + jMetaDataAudio.getFormatSettingsPSAsInteger());
        System.out.println("Format_Settings_PS AS Long === " + jMetaDataAudio.getFormatSettingsPSAsLong());
        System.out.println("Format_Settings_PS AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsPSAsLocalDateTime());
        System.out.println("Format_Settings_PS AS LocalTime === " + jMetaDataAudio.getFormatSettingsPSAsLocalTime());
        System.out.println("Format_Settings_PS AS String === " + jMetaDataAudio.getFormatSettingsPSAsString());
        System.out.println("Format_Settings_PS AS Boolean === " + jMetaDataAudio.getFormatSettingsPSAsBoolean());
        System.out.println("Format_Settings_PS AS BigInteger === " + jMetaDataAudio.getFormatSettingsPSAsBigInteger());
        System.out.println("Format_Settings_PS AS URL === " + jMetaDataAudio.getFormatSettingsPSAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataAudio.getForcedAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataAudio.getForcedAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataAudio.getForcedAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataAudio.getForcedAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataAudio.getForcedAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataAudio.getForcedAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataAudio.getForcedAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataAudio.getForcedAsURL());
        System.out.println("Number of channels after matrix decoding (with measurement) AS Integer === " + jMetaDataAudio.getMatrixChannelsStringAsInteger());
        System.out.println("Number of channels after matrix decoding (with measurement) AS Long === " + jMetaDataAudio.getMatrixChannelsStringAsLong());
        System.out.println("Number of channels after matrix decoding (with measurement) AS LocalDateTime === " + jMetaDataAudio.getMatrixChannelsStringAsLocalDateTime());
        System.out.println("Number of channels after matrix decoding (with measurement) AS LocalTime === " + jMetaDataAudio.getMatrixChannelsStringAsLocalTime());
        System.out.println("Number of channels after matrix decoding (with measurement) AS String === " + jMetaDataAudio.getMatrixChannelsStringAsString());
        System.out.println("Number of channels after matrix decoding (with measurement) AS Boolean === " + jMetaDataAudio.getMatrixChannelsStringAsBoolean());
        System.out.println("Number of channels after matrix decoding (with measurement) AS BigInteger === " + jMetaDataAudio.getMatrixChannelsStringAsBigInteger());
        System.out.println("Number of channels after matrix decoding (with measurement) AS URL === " + jMetaDataAudio.getMatrixChannelsStringAsURL());
        System.out.println("Last **Inform** call AS Integer === " + jMetaDataAudio.getInformAsInteger());
        System.out.println("Last **Inform** call AS Long === " + jMetaDataAudio.getInformAsLong());
        System.out.println("Last **Inform** call AS LocalDateTime === " + jMetaDataAudio.getInformAsLocalDateTime());
        System.out.println("Last **Inform** call AS LocalTime === " + jMetaDataAudio.getInformAsLocalTime());
        System.out.println("Last **Inform** call AS String === " + jMetaDataAudio.getInformAsString());
        System.out.println("Last **Inform** call AS Boolean === " + jMetaDataAudio.getInformAsBoolean());
        System.out.println("Last **Inform** call AS BigInteger === " + jMetaDataAudio.getInformAsBigInteger());
        System.out.println("Last **Inform** call AS URL === " + jMetaDataAudio.getInformAsURL());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Integer === " + jMetaDataAudio.getSourceDurationFirstFrameAsInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Long === " + jMetaDataAudio.getSourceDurationFirstFrameAsLong());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS LocalDateTime === " + jMetaDataAudio.getSourceDurationFirstFrameAsLocalDateTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS LocalTime === " + jMetaDataAudio.getSourceDurationFirstFrameAsLocalTime());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS String === " + jMetaDataAudio.getSourceDurationFirstFrameAsString());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS Boolean === " + jMetaDataAudio.getSourceDurationFirstFrameAsBoolean());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS BigInteger === " + jMetaDataAudio.getSourceDurationFirstFrameAsBigInteger());
        System.out.println("Source Duration of the first frame if it is longer than others, in ms AS URL === " + jMetaDataAudio.getSourceDurationFirstFrameAsURL());
        System.out.println("Number of the stream (base=0) AS Integer === " + jMetaDataAudio.getStreamKindIDAsInteger());
        System.out.println("Number of the stream (base=0) AS Long === " + jMetaDataAudio.getStreamKindIDAsLong());
        System.out.println("Number of the stream (base=0) AS LocalDateTime === " + jMetaDataAudio.getStreamKindIDAsLocalDateTime());
        System.out.println("Number of the stream (base=0) AS LocalTime === " + jMetaDataAudio.getStreamKindIDAsLocalTime());
        System.out.println("Number of the stream (base=0) AS String === " + jMetaDataAudio.getStreamKindIDAsString());
        System.out.println("Number of the stream (base=0) AS Boolean === " + jMetaDataAudio.getStreamKindIDAsBoolean());
        System.out.println("Number of the stream (base=0) AS BigInteger === " + jMetaDataAudio.getStreamKindIDAsBigInteger());
        System.out.println("Number of the stream (base=0) AS URL === " + jMetaDataAudio.getStreamKindIDAsURL());
        System.out.println("Format_Settings_Floor AS Integer === " + jMetaDataAudio.getFormatSettingsFloorAsInteger());
        System.out.println("Format_Settings_Floor AS Long === " + jMetaDataAudio.getFormatSettingsFloorAsLong());
        System.out.println("Format_Settings_Floor AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsFloorAsLocalDateTime());
        System.out.println("Format_Settings_Floor AS LocalTime === " + jMetaDataAudio.getFormatSettingsFloorAsLocalTime());
        System.out.println("Format_Settings_Floor AS String === " + jMetaDataAudio.getFormatSettingsFloorAsString());
        System.out.println("Format_Settings_Floor AS Boolean === " + jMetaDataAudio.getFormatSettingsFloorAsBoolean());
        System.out.println("Format_Settings_Floor AS BigInteger === " + jMetaDataAudio.getFormatSettingsFloorAsBigInteger());
        System.out.println("Format_Settings_Floor AS URL === " + jMetaDataAudio.getFormatSettingsFloorAsURL());
        System.out.println("Homepage of this format AS Integer === " + jMetaDataAudio.getFormatUrlAsInteger());
        System.out.println("Homepage of this format AS Long === " + jMetaDataAudio.getFormatUrlAsLong());
        System.out.println("Homepage of this format AS LocalDateTime === " + jMetaDataAudio.getFormatUrlAsLocalDateTime());
        System.out.println("Homepage of this format AS LocalTime === " + jMetaDataAudio.getFormatUrlAsLocalTime());
        System.out.println("Homepage of this format AS String === " + jMetaDataAudio.getFormatUrlAsString());
        System.out.println("Homepage of this format AS Boolean === " + jMetaDataAudio.getFormatUrlAsBoolean());
        System.out.println("Homepage of this format AS BigInteger === " + jMetaDataAudio.getFormatUrlAsBigInteger());
        System.out.println("Homepage of this format AS URL === " + jMetaDataAudio.getFormatUrlAsURL());
        System.out.println("Minimum Bit rate (with measurement) AS Integer === " + jMetaDataAudio.getBitRateMinimumStringAsInteger());
        System.out.println("Minimum Bit rate (with measurement) AS Long === " + jMetaDataAudio.getBitRateMinimumStringAsLong());
        System.out.println("Minimum Bit rate (with measurement) AS LocalDateTime === " + jMetaDataAudio.getBitRateMinimumStringAsLocalDateTime());
        System.out.println("Minimum Bit rate (with measurement) AS LocalTime === " + jMetaDataAudio.getBitRateMinimumStringAsLocalTime());
        System.out.println("Minimum Bit rate (with measurement) AS String === " + jMetaDataAudio.getBitRateMinimumStringAsString());
        System.out.println("Minimum Bit rate (with measurement) AS Boolean === " + jMetaDataAudio.getBitRateMinimumStringAsBoolean());
        System.out.println("Minimum Bit rate (with measurement) AS BigInteger === " + jMetaDataAudio.getBitRateMinimumStringAsBigInteger());
        System.out.println("Minimum Bit rate (with measurement) AS URL === " + jMetaDataAudio.getBitRateMinimumStringAsURL());
        System.out.println("Frames per second (with measurement) AS Integer === " + jMetaDataAudio.getFrameRateStringAsInteger());
        System.out.println("Frames per second (with measurement) AS Long === " + jMetaDataAudio.getFrameRateStringAsLong());
        System.out.println("Frames per second (with measurement) AS LocalDateTime === " + jMetaDataAudio.getFrameRateStringAsLocalDateTime());
        System.out.println("Frames per second (with measurement) AS LocalTime === " + jMetaDataAudio.getFrameRateStringAsLocalTime());
        System.out.println("Frames per second (with measurement) AS String === " + jMetaDataAudio.getFrameRateStringAsString());
        System.out.println("Frames per second (with measurement) AS Boolean === " + jMetaDataAudio.getFrameRateStringAsBoolean());
        System.out.println("Frames per second (with measurement) AS BigInteger === " + jMetaDataAudio.getFrameRateStringAsBigInteger());
        System.out.println("Frames per second (with measurement) AS URL === " + jMetaDataAudio.getFrameRateStringAsURL());
        System.out.println("Source Frame count (a frame contains a count of samples depends of the format) AS Integer === " + jMetaDataAudio.getSourceFrameCountAsInteger());
        System.out.println("Source Frame count (a frame contains a count of samples depends of the format) AS Long === " + jMetaDataAudio.getSourceFrameCountAsLong());
        System.out.println("Source Frame count (a frame contains a count of samples depends of the format) AS LocalDateTime === " + jMetaDataAudio.getSourceFrameCountAsLocalDateTime());
        System.out.println("Source Frame count (a frame contains a count of samples depends of the format) AS LocalTime === " + jMetaDataAudio.getSourceFrameCountAsLocalTime());
        System.out.println("Source Frame count (a frame contains a count of samples depends of the format) AS String === " + jMetaDataAudio.getSourceFrameCountAsString());
        System.out.println("Source Frame count (a frame contains a count of samples depends of the format) AS Boolean === " + jMetaDataAudio.getSourceFrameCountAsBoolean());
        System.out.println("Source Frame count (a frame contains a count of samples depends of the format) AS BigInteger === " + jMetaDataAudio.getSourceFrameCountAsBigInteger());
        System.out.println("Source Frame count (a frame contains a count of samples depends of the format) AS URL === " + jMetaDataAudio.getSourceFrameCountAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataAudio.getDefaultAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataAudio.getDefaultAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataAudio.getDefaultAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataAudio.getDefaultAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataAudio.getDefaultAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataAudio.getDefaultAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataAudio.getDefaultAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataAudio.getDefaultAsURL());
        System.out.println("Delay settings (in case of timecode for example) AS Integer === " + jMetaDataAudio.getDelayOriginalSettingsAsInteger());
        System.out.println("Delay settings (in case of timecode for example) AS Long === " + jMetaDataAudio.getDelayOriginalSettingsAsLong());
        System.out.println("Delay settings (in case of timecode for example) AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalSettingsAsLocalDateTime());
        System.out.println("Delay settings (in case of timecode for example) AS LocalTime === " + jMetaDataAudio.getDelayOriginalSettingsAsLocalTime());
        System.out.println("Delay settings (in case of timecode for example) AS String === " + jMetaDataAudio.getDelayOriginalSettingsAsString());
        System.out.println("Delay settings (in case of timecode for example) AS Boolean === " + jMetaDataAudio.getDelayOriginalSettingsAsBoolean());
        System.out.println("Delay settings (in case of timecode for example) AS BigInteger === " + jMetaDataAudio.getDelayOriginalSettingsAsBigInteger());
        System.out.println("Delay settings (in case of timecode for example) AS URL === " + jMetaDataAudio.getDelayOriginalSettingsAsURL());
        System.out.println("Name of the product AS Integer === " + jMetaDataAudio.getEncodedApplicationNameAsInteger());
        System.out.println("Name of the product AS Long === " + jMetaDataAudio.getEncodedApplicationNameAsLong());
        System.out.println("Name of the product AS LocalDateTime === " + jMetaDataAudio.getEncodedApplicationNameAsLocalDateTime());
        System.out.println("Name of the product AS LocalTime === " + jMetaDataAudio.getEncodedApplicationNameAsLocalTime());
        System.out.println("Name of the product AS String === " + jMetaDataAudio.getEncodedApplicationNameAsString());
        System.out.println("Name of the product AS Boolean === " + jMetaDataAudio.getEncodedApplicationNameAsBoolean());
        System.out.println("Name of the product AS BigInteger === " + jMetaDataAudio.getEncodedApplicationNameAsBigInteger());
        System.out.println("Name of the product AS URL === " + jMetaDataAudio.getEncodedApplicationNameAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataAudio.getUniqueIDStringAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataAudio.getUniqueIDStringAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataAudio.getUniqueIDStringAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataAudio.getUniqueIDStringAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataAudio.getUniqueIDStringAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataAudio.getUniqueIDStringAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataAudio.getUniqueIDStringAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataAudio.getUniqueIDStringAsURL());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS Integer === " + jMetaDataAudio.getBitDepthDetectedAsInteger());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS Long === " + jMetaDataAudio.getBitDepthDetectedAsLong());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS LocalDateTime === " + jMetaDataAudio.getBitDepthDetectedAsLocalDateTime());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS LocalTime === " + jMetaDataAudio.getBitDepthDetectedAsLocalTime());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS String === " + jMetaDataAudio.getBitDepthDetectedAsString());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS Boolean === " + jMetaDataAudio.getBitDepthDetectedAsBoolean());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS BigInteger === " + jMetaDataAudio.getBitDepthDetectedAsBigInteger());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS URL === " + jMetaDataAudio.getBitDepthDetectedAsURL());
        System.out.println("Profile of this Format AS Integer === " + jMetaDataAudio.getFormatProfileAsInteger());
        System.out.println("Profile of this Format AS Long === " + jMetaDataAudio.getFormatProfileAsLong());
        System.out.println("Profile of this Format AS LocalDateTime === " + jMetaDataAudio.getFormatProfileAsLocalDateTime());
        System.out.println("Profile of this Format AS LocalTime === " + jMetaDataAudio.getFormatProfileAsLocalTime());
        System.out.println("Profile of this Format AS String === " + jMetaDataAudio.getFormatProfileAsString());
        System.out.println("Profile of this Format AS Boolean === " + jMetaDataAudio.getFormatProfileAsBoolean());
        System.out.println("Profile of this Format AS BigInteger === " + jMetaDataAudio.getFormatProfileAsBigInteger());
        System.out.println("Profile of this Format AS URL === " + jMetaDataAudio.getFormatProfileAsURL());
        System.out.println("StreamSize_Encoded/String2 AS Integer === " + jMetaDataAudio.getStreamSizeEncodedString2AsInteger());
        System.out.println("StreamSize_Encoded/String2 AS Long === " + jMetaDataAudio.getStreamSizeEncodedString2AsLong());
        System.out.println("StreamSize_Encoded/String2 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeEncodedString2AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String2 AS LocalTime === " + jMetaDataAudio.getStreamSizeEncodedString2AsLocalTime());
        System.out.println("StreamSize_Encoded/String2 AS String === " + jMetaDataAudio.getStreamSizeEncodedString2AsString());
        System.out.println("StreamSize_Encoded/String2 AS Boolean === " + jMetaDataAudio.getStreamSizeEncodedString2AsBoolean());
        System.out.println("StreamSize_Encoded/String2 AS BigInteger === " + jMetaDataAudio.getStreamSizeEncodedString2AsBigInteger());
        System.out.println("StreamSize_Encoded/String2 AS URL === " + jMetaDataAudio.getStreamSizeEncodedString2AsURL());
        System.out.println("StreamSize_Demuxed/String1 AS Integer === " + jMetaDataAudio.getStreamSizeDemuxedString1AsInteger());
        System.out.println("StreamSize_Demuxed/String1 AS Long === " + jMetaDataAudio.getStreamSizeDemuxedString1AsLong());
        System.out.println("StreamSize_Demuxed/String1 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeDemuxedString1AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String1 AS LocalTime === " + jMetaDataAudio.getStreamSizeDemuxedString1AsLocalTime());
        System.out.println("StreamSize_Demuxed/String1 AS String === " + jMetaDataAudio.getStreamSizeDemuxedString1AsString());
        System.out.println("StreamSize_Demuxed/String1 AS Boolean === " + jMetaDataAudio.getStreamSizeDemuxedString1AsBoolean());
        System.out.println("StreamSize_Demuxed/String1 AS BigInteger === " + jMetaDataAudio.getStreamSizeDemuxedString1AsBigInteger());
        System.out.println("StreamSize_Demuxed/String1 AS URL === " + jMetaDataAudio.getStreamSizeDemuxedString1AsURL());
        System.out.println("StreamSize_Encoded/String3 AS Integer === " + jMetaDataAudio.getStreamSizeEncodedString3AsInteger());
        System.out.println("StreamSize_Encoded/String3 AS Long === " + jMetaDataAudio.getStreamSizeEncodedString3AsLong());
        System.out.println("StreamSize_Encoded/String3 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeEncodedString3AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String3 AS LocalTime === " + jMetaDataAudio.getStreamSizeEncodedString3AsLocalTime());
        System.out.println("StreamSize_Encoded/String3 AS String === " + jMetaDataAudio.getStreamSizeEncodedString3AsString());
        System.out.println("StreamSize_Encoded/String3 AS Boolean === " + jMetaDataAudio.getStreamSizeEncodedString3AsBoolean());
        System.out.println("StreamSize_Encoded/String3 AS BigInteger === " + jMetaDataAudio.getStreamSizeEncodedString3AsBigInteger());
        System.out.println("StreamSize_Encoded/String3 AS URL === " + jMetaDataAudio.getStreamSizeEncodedString3AsURL());
        System.out.println("StreamSize_Demuxed/String2 AS Integer === " + jMetaDataAudio.getStreamSizeDemuxedString2AsInteger());
        System.out.println("StreamSize_Demuxed/String2 AS Long === " + jMetaDataAudio.getStreamSizeDemuxedString2AsLong());
        System.out.println("StreamSize_Demuxed/String2 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeDemuxedString2AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String2 AS LocalTime === " + jMetaDataAudio.getStreamSizeDemuxedString2AsLocalTime());
        System.out.println("StreamSize_Demuxed/String2 AS String === " + jMetaDataAudio.getStreamSizeDemuxedString2AsString());
        System.out.println("StreamSize_Demuxed/String2 AS Boolean === " + jMetaDataAudio.getStreamSizeDemuxedString2AsBoolean());
        System.out.println("StreamSize_Demuxed/String2 AS BigInteger === " + jMetaDataAudio.getStreamSizeDemuxedString2AsBigInteger());
        System.out.println("StreamSize_Demuxed/String2 AS URL === " + jMetaDataAudio.getStreamSizeDemuxedString2AsURL());
        System.out.println("StreamSize_Demuxed/String3 AS Integer === " + jMetaDataAudio.getStreamSizeDemuxedString3AsInteger());
        System.out.println("StreamSize_Demuxed/String3 AS Long === " + jMetaDataAudio.getStreamSizeDemuxedString3AsLong());
        System.out.println("StreamSize_Demuxed/String3 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeDemuxedString3AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String3 AS LocalTime === " + jMetaDataAudio.getStreamSizeDemuxedString3AsLocalTime());
        System.out.println("StreamSize_Demuxed/String3 AS String === " + jMetaDataAudio.getStreamSizeDemuxedString3AsString());
        System.out.println("StreamSize_Demuxed/String3 AS Boolean === " + jMetaDataAudio.getStreamSizeDemuxedString3AsBoolean());
        System.out.println("StreamSize_Demuxed/String3 AS BigInteger === " + jMetaDataAudio.getStreamSizeDemuxedString3AsBigInteger());
        System.out.println("StreamSize_Demuxed/String3 AS URL === " + jMetaDataAudio.getStreamSizeDemuxedString3AsURL());
        System.out.println("StreamSize_Encoded/String1 AS Integer === " + jMetaDataAudio.getStreamSizeEncodedString1AsInteger());
        System.out.println("StreamSize_Encoded/String1 AS Long === " + jMetaDataAudio.getStreamSizeEncodedString1AsLong());
        System.out.println("StreamSize_Encoded/String1 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeEncodedString1AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String1 AS LocalTime === " + jMetaDataAudio.getStreamSizeEncodedString1AsLocalTime());
        System.out.println("StreamSize_Encoded/String1 AS String === " + jMetaDataAudio.getStreamSizeEncodedString1AsString());
        System.out.println("StreamSize_Encoded/String1 AS Boolean === " + jMetaDataAudio.getStreamSizeEncodedString1AsBoolean());
        System.out.println("StreamSize_Encoded/String1 AS BigInteger === " + jMetaDataAudio.getStreamSizeEncodedString1AsBigInteger());
        System.out.println("StreamSize_Encoded/String1 AS URL === " + jMetaDataAudio.getStreamSizeEncodedString1AsURL());
        System.out.println("Language (full) AS Integer === " + jMetaDataAudio.getLanguageStringAsInteger());
        System.out.println("Language (full) AS Long === " + jMetaDataAudio.getLanguageStringAsLong());
        System.out.println("Language (full) AS LocalDateTime === " + jMetaDataAudio.getLanguageStringAsLocalDateTime());
        System.out.println("Language (full) AS LocalTime === " + jMetaDataAudio.getLanguageStringAsLocalTime());
        System.out.println("Language (full) AS String === " + jMetaDataAudio.getLanguageStringAsString());
        System.out.println("Language (full) AS Boolean === " + jMetaDataAudio.getLanguageStringAsBoolean());
        System.out.println("Language (full) AS BigInteger === " + jMetaDataAudio.getLanguageStringAsBigInteger());
        System.out.println("Language (full) AS URL === " + jMetaDataAudio.getLanguageStringAsURL());
        System.out.println("StreamSize_Demuxed/String4 AS Integer === " + jMetaDataAudio.getStreamSizeDemuxedString4AsInteger());
        System.out.println("StreamSize_Demuxed/String4 AS Long === " + jMetaDataAudio.getStreamSizeDemuxedString4AsLong());
        System.out.println("StreamSize_Demuxed/String4 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeDemuxedString4AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String4 AS LocalTime === " + jMetaDataAudio.getStreamSizeDemuxedString4AsLocalTime());
        System.out.println("StreamSize_Demuxed/String4 AS String === " + jMetaDataAudio.getStreamSizeDemuxedString4AsString());
        System.out.println("StreamSize_Demuxed/String4 AS Boolean === " + jMetaDataAudio.getStreamSizeDemuxedString4AsBoolean());
        System.out.println("StreamSize_Demuxed/String4 AS BigInteger === " + jMetaDataAudio.getStreamSizeDemuxedString4AsBigInteger());
        System.out.println("StreamSize_Demuxed/String4 AS URL === " + jMetaDataAudio.getStreamSizeDemuxedString4AsURL());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Integer === " + jMetaDataAudio.getStreamSizeDemuxedString5AsInteger());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Long === " + jMetaDataAudio.getStreamSizeDemuxedString5AsLong());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS LocalDateTime === " + jMetaDataAudio.getStreamSizeDemuxedString5AsLocalDateTime());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS LocalTime === " + jMetaDataAudio.getStreamSizeDemuxedString5AsLocalTime());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS String === " + jMetaDataAudio.getStreamSizeDemuxedString5AsString());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Boolean === " + jMetaDataAudio.getStreamSizeDemuxedString5AsBoolean());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS BigInteger === " + jMetaDataAudio.getStreamSizeDemuxedString5AsBigInteger());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS URL === " + jMetaDataAudio.getStreamSizeDemuxedString5AsURL());
        System.out.println("StreamSize_Encoded/String4 AS Integer === " + jMetaDataAudio.getStreamSizeEncodedString4AsInteger());
        System.out.println("StreamSize_Encoded/String4 AS Long === " + jMetaDataAudio.getStreamSizeEncodedString4AsLong());
        System.out.println("StreamSize_Encoded/String4 AS LocalDateTime === " + jMetaDataAudio.getStreamSizeEncodedString4AsLocalDateTime());
        System.out.println("StreamSize_Encoded/String4 AS LocalTime === " + jMetaDataAudio.getStreamSizeEncodedString4AsLocalTime());
        System.out.println("StreamSize_Encoded/String4 AS String === " + jMetaDataAudio.getStreamSizeEncodedString4AsString());
        System.out.println("StreamSize_Encoded/String4 AS Boolean === " + jMetaDataAudio.getStreamSizeEncodedString4AsBoolean());
        System.out.println("StreamSize_Encoded/String4 AS BigInteger === " + jMetaDataAudio.getStreamSizeEncodedString4AsBigInteger());
        System.out.println("StreamSize_Encoded/String4 AS URL === " + jMetaDataAudio.getStreamSizeEncodedString4AsURL());
        System.out.println("Encoded Streamsize in with percentage value AS Integer === " + jMetaDataAudio.getStreamSizeEncodedString5AsInteger());
        System.out.println("Encoded Streamsize in with percentage value AS Long === " + jMetaDataAudio.getStreamSizeEncodedString5AsLong());
        System.out.println("Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataAudio.getStreamSizeEncodedString5AsLocalDateTime());
        System.out.println("Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataAudio.getStreamSizeEncodedString5AsLocalTime());
        System.out.println("Encoded Streamsize in with percentage value AS String === " + jMetaDataAudio.getStreamSizeEncodedString5AsString());
        System.out.println("Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataAudio.getStreamSizeEncodedString5AsBoolean());
        System.out.println("Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataAudio.getStreamSizeEncodedString5AsBigInteger());
        System.out.println("Encoded Streamsize in with percentage value AS URL === " + jMetaDataAudio.getStreamSizeEncodedString5AsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataAudio.getDurationLastFrameString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataAudio.getDurationLastFrameString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataAudio.getDurationLastFrameString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataAudio.getDurationLastFrameString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataAudio.getDurationLastFrameString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataAudio.getDurationLastFrameString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataAudio.getDurationLastFrameString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataAudio.getDurationLastFrameString5AsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataAudio.getDurationLastFrameString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataAudio.getDurationLastFrameString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataAudio.getDurationLastFrameString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataAudio.getDurationLastFrameString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataAudio.getDurationLastFrameString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataAudio.getDurationLastFrameString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataAudio.getDurationLastFrameString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataAudio.getDurationLastFrameString4AsURL());
        System.out.println("StreamSize_Demuxed in with percentage value AS Integer === " + jMetaDataAudio.getStreamSizeDemuxedStringAsInteger());
        System.out.println("StreamSize_Demuxed in with percentage value AS Long === " + jMetaDataAudio.getStreamSizeDemuxedStringAsLong());
        System.out.println("StreamSize_Demuxed in with percentage value AS LocalDateTime === " + jMetaDataAudio.getStreamSizeDemuxedStringAsLocalDateTime());
        System.out.println("StreamSize_Demuxed in with percentage value AS LocalTime === " + jMetaDataAudio.getStreamSizeDemuxedStringAsLocalTime());
        System.out.println("StreamSize_Demuxed in with percentage value AS String === " + jMetaDataAudio.getStreamSizeDemuxedStringAsString());
        System.out.println("StreamSize_Demuxed in with percentage value AS Boolean === " + jMetaDataAudio.getStreamSizeDemuxedStringAsBoolean());
        System.out.println("StreamSize_Demuxed in with percentage value AS BigInteger === " + jMetaDataAudio.getStreamSizeDemuxedStringAsBigInteger());
        System.out.println("StreamSize_Demuxed in with percentage value AS URL === " + jMetaDataAudio.getStreamSizeDemuxedStringAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataAudio.getForcedStringAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataAudio.getForcedStringAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataAudio.getForcedStringAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataAudio.getForcedStringAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataAudio.getForcedStringAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataAudio.getForcedStringAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataAudio.getForcedStringAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataAudio.getForcedStringAsURL());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS Integer === " + jMetaDataAudio.getBitDepthAsInteger());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS Long === " + jMetaDataAudio.getBitDepthAsLong());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS LocalDateTime === " + jMetaDataAudio.getBitDepthAsLocalDateTime());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS LocalTime === " + jMetaDataAudio.getBitDepthAsLocalTime());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS String === " + jMetaDataAudio.getBitDepthAsString());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS Boolean === " + jMetaDataAudio.getBitDepthAsBoolean());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS BigInteger === " + jMetaDataAudio.getBitDepthAsBigInteger());
        System.out.println("Resolution in bits (8, 16, 20, 24). Note: significant bits in case the stored bit depth is different AS URL === " + jMetaDataAudio.getBitDepthAsURL());
        System.out.println("Encoded Streamsize in bytes AS Integer === " + jMetaDataAudio.getStreamSizeEncodedAsInteger());
        System.out.println("Encoded Streamsize in bytes AS Long === " + jMetaDataAudio.getStreamSizeEncodedAsLong());
        System.out.println("Encoded Streamsize in bytes AS LocalDateTime === " + jMetaDataAudio.getStreamSizeEncodedAsLocalDateTime());
        System.out.println("Encoded Streamsize in bytes AS LocalTime === " + jMetaDataAudio.getStreamSizeEncodedAsLocalTime());
        System.out.println("Encoded Streamsize in bytes AS String === " + jMetaDataAudio.getStreamSizeEncodedAsString());
        System.out.println("Encoded Streamsize in bytes AS Boolean === " + jMetaDataAudio.getStreamSizeEncodedAsBoolean());
        System.out.println("Encoded Streamsize in bytes AS BigInteger === " + jMetaDataAudio.getStreamSizeEncodedAsBigInteger());
        System.out.println("Encoded Streamsize in bytes AS URL === " + jMetaDataAudio.getStreamSizeEncodedAsURL());
        System.out.println("Count of streams of that kind available AS Integer === " + jMetaDataAudio.getStreamCountAsInteger());
        System.out.println("Count of streams of that kind available AS Long === " + jMetaDataAudio.getStreamCountAsLong());
        System.out.println("Count of streams of that kind available AS LocalDateTime === " + jMetaDataAudio.getStreamCountAsLocalDateTime());
        System.out.println("Count of streams of that kind available AS LocalTime === " + jMetaDataAudio.getStreamCountAsLocalTime());
        System.out.println("Count of streams of that kind available AS String === " + jMetaDataAudio.getStreamCountAsString());
        System.out.println("Count of streams of that kind available AS Boolean === " + jMetaDataAudio.getStreamCountAsBoolean());
        System.out.println("Count of streams of that kind available AS BigInteger === " + jMetaDataAudio.getStreamCountAsBigInteger());
        System.out.println("Count of streams of that kind available AS URL === " + jMetaDataAudio.getStreamCountAsURL());
        System.out.println("Encoded Streamsize in with percentage value AS Integer === " + jMetaDataAudio.getStreamSizeEncodedStringAsInteger());
        System.out.println("Encoded Streamsize in with percentage value AS Long === " + jMetaDataAudio.getStreamSizeEncodedStringAsLong());
        System.out.println("Encoded Streamsize in with percentage value AS LocalDateTime === " + jMetaDataAudio.getStreamSizeEncodedStringAsLocalDateTime());
        System.out.println("Encoded Streamsize in with percentage value AS LocalTime === " + jMetaDataAudio.getStreamSizeEncodedStringAsLocalTime());
        System.out.println("Encoded Streamsize in with percentage value AS String === " + jMetaDataAudio.getStreamSizeEncodedStringAsString());
        System.out.println("Encoded Streamsize in with percentage value AS Boolean === " + jMetaDataAudio.getStreamSizeEncodedStringAsBoolean());
        System.out.println("Encoded Streamsize in with percentage value AS BigInteger === " + jMetaDataAudio.getStreamSizeEncodedStringAsBigInteger());
        System.out.println("Encoded Streamsize in with percentage value AS URL === " + jMetaDataAudio.getStreamSizeEncodedStringAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getDurationString2AsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getDurationString2AsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationString2AsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getDurationString2AsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getDurationString2AsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getDurationString2AsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getDurationString2AsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getDurationString2AsURL());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Integer === " + jMetaDataAudio.getDurationString3AsInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Long === " + jMetaDataAudio.getDurationString3AsLong());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataAudio.getDurationString3AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataAudio.getDurationString3AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS String === " + jMetaDataAudio.getDurationString3AsString());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataAudio.getDurationString3AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataAudio.getDurationString3AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS URL === " + jMetaDataAudio.getDurationString3AsURL());
        System.out.println("Layout of channels (in the stream) AS Integer === " + jMetaDataAudio.getChannelLayoutAsInteger());
        System.out.println("Layout of channels (in the stream) AS Long === " + jMetaDataAudio.getChannelLayoutAsLong());
        System.out.println("Layout of channels (in the stream) AS LocalDateTime === " + jMetaDataAudio.getChannelLayoutAsLocalDateTime());
        System.out.println("Layout of channels (in the stream) AS LocalTime === " + jMetaDataAudio.getChannelLayoutAsLocalTime());
        System.out.println("Layout of channels (in the stream) AS String === " + jMetaDataAudio.getChannelLayoutAsString());
        System.out.println("Layout of channels (in the stream) AS Boolean === " + jMetaDataAudio.getChannelLayoutAsBoolean());
        System.out.println("Layout of channels (in the stream) AS BigInteger === " + jMetaDataAudio.getChannelLayoutAsBigInteger());
        System.out.println("Layout of channels (in the stream) AS URL === " + jMetaDataAudio.getChannelLayoutAsURL());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataAudio.getDurationString1AsInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataAudio.getDurationString1AsLong());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationString1AsLocalDateTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataAudio.getDurationString1AsLocalTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataAudio.getDurationString1AsString());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataAudio.getDurationString1AsBoolean());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataAudio.getDurationString1AsBigInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataAudio.getDurationString1AsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataAudio.getDurationString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataAudio.getDurationString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataAudio.getDurationString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataAudio.getDurationString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataAudio.getDurationString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataAudio.getDurationString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataAudio.getDurationString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataAudio.getDurationString4AsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataAudio.getDurationString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataAudio.getDurationString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataAudio.getDurationString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataAudio.getDurationString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataAudio.getDurationString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataAudio.getDurationString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataAudio.getDurationString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataAudio.getDurationString5AsURL());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Integer === " + jMetaDataAudio.getBitRateEncodedAsInteger());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Long === " + jMetaDataAudio.getBitRateEncodedAsLong());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS LocalDateTime === " + jMetaDataAudio.getBitRateEncodedAsLocalDateTime());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS LocalTime === " + jMetaDataAudio.getBitRateEncodedAsLocalTime());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS String === " + jMetaDataAudio.getBitRateEncodedAsString());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS Boolean === " + jMetaDataAudio.getBitRateEncodedAsBoolean());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS BigInteger === " + jMetaDataAudio.getBitRateEncodedAsBigInteger());
        System.out.println("Encoded (with forced padding) bit rate in bps, if some container padding is present AS URL === " + jMetaDataAudio.getBitRateEncodedAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataAudio.getDelaySourceAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataAudio.getDelaySourceAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataAudio.getDelaySourceAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataAudio.getDelaySourceAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataAudio.getDelaySourceAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataAudio.getDelaySourceAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataAudio.getDelaySourceAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataAudio.getDelaySourceAsURL());
        System.out.println("Delay drop frame info AS Integer === " + jMetaDataAudio.getDelayOriginalDropFrameAsInteger());
        System.out.println("Delay drop frame info AS Long === " + jMetaDataAudio.getDelayOriginalDropFrameAsLong());
        System.out.println("Delay drop frame info AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalDropFrameAsLocalDateTime());
        System.out.println("Delay drop frame info AS LocalTime === " + jMetaDataAudio.getDelayOriginalDropFrameAsLocalTime());
        System.out.println("Delay drop frame info AS String === " + jMetaDataAudio.getDelayOriginalDropFrameAsString());
        System.out.println("Delay drop frame info AS Boolean === " + jMetaDataAudio.getDelayOriginalDropFrameAsBoolean());
        System.out.println("Delay drop frame info AS BigInteger === " + jMetaDataAudio.getDelayOriginalDropFrameAsBigInteger());
        System.out.println("Delay drop frame info AS URL === " + jMetaDataAudio.getDelayOriginalDropFrameAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataAudio.getDurationLastFrameString1AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataAudio.getDurationLastFrameString1AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationLastFrameString1AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataAudio.getDurationLastFrameString1AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataAudio.getDurationLastFrameString1AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataAudio.getDurationLastFrameString1AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataAudio.getDurationLastFrameString1AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataAudio.getDurationLastFrameString1AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataAudio.getDelayOriginalStringAsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataAudio.getDelayOriginalStringAsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataAudio.getDelayOriginalStringAsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataAudio.getDelayOriginalStringAsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataAudio.getDelayOriginalStringAsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataAudio.getDelayOriginalStringAsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataAudio.getDelayOriginalStringAsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataAudio.getDelayOriginalStringAsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Integer === " + jMetaDataAudio.getDurationLastFrameString3AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Long === " + jMetaDataAudio.getDurationLastFrameString3AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataAudio.getDurationLastFrameString3AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataAudio.getDurationLastFrameString3AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS String === " + jMetaDataAudio.getDurationLastFrameString3AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataAudio.getDurationLastFrameString3AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataAudio.getDurationLastFrameString3AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : HH:MM:SS.MMM AS URL === " + jMetaDataAudio.getDurationLastFrameString3AsURL());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getDurationLastFrameString2AsInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getDurationLastFrameString2AsLong());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getDurationLastFrameString2AsLocalDateTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getDurationLastFrameString2AsLocalTime());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getDurationLastFrameString2AsString());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getDurationLastFrameString2AsBoolean());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getDurationLastFrameString2AsBigInteger());
        System.out.println("Duration of the last frame if it is longer than others, in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getDurationLastFrameString2AsURL());
        System.out.println("StreamSize in bytes of hte stream after demux AS Integer === " + jMetaDataAudio.getStreamSizeDemuxedAsInteger());
        System.out.println("StreamSize in bytes of hte stream after demux AS Long === " + jMetaDataAudio.getStreamSizeDemuxedAsLong());
        System.out.println("StreamSize in bytes of hte stream after demux AS LocalDateTime === " + jMetaDataAudio.getStreamSizeDemuxedAsLocalDateTime());
        System.out.println("StreamSize in bytes of hte stream after demux AS LocalTime === " + jMetaDataAudio.getStreamSizeDemuxedAsLocalTime());
        System.out.println("StreamSize in bytes of hte stream after demux AS String === " + jMetaDataAudio.getStreamSizeDemuxedAsString());
        System.out.println("StreamSize in bytes of hte stream after demux AS Boolean === " + jMetaDataAudio.getStreamSizeDemuxedAsBoolean());
        System.out.println("StreamSize in bytes of hte stream after demux AS BigInteger === " + jMetaDataAudio.getStreamSizeDemuxedAsBigInteger());
        System.out.println("StreamSize in bytes of hte stream after demux AS URL === " + jMetaDataAudio.getStreamSizeDemuxedAsURL());
        System.out.println("Settings needed for decoder used, summary AS Integer === " + jMetaDataAudio.getFormatSettingsAsInteger());
        System.out.println("Settings needed for decoder used, summary AS Long === " + jMetaDataAudio.getFormatSettingsAsLong());
        System.out.println("Settings needed for decoder used, summary AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsAsLocalDateTime());
        System.out.println("Settings needed for decoder used, summary AS LocalTime === " + jMetaDataAudio.getFormatSettingsAsLocalTime());
        System.out.println("Settings needed for decoder used, summary AS String === " + jMetaDataAudio.getFormatSettingsAsString());
        System.out.println("Settings needed for decoder used, summary AS Boolean === " + jMetaDataAudio.getFormatSettingsAsBoolean());
        System.out.println("Settings needed for decoder used, summary AS BigInteger === " + jMetaDataAudio.getFormatSettingsAsBigInteger());
        System.out.println("Settings needed for decoder used, summary AS URL === " + jMetaDataAudio.getFormatSettingsAsURL());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataAudio.getFirstPacketOrderAsInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataAudio.getFirstPacketOrderAsLong());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataAudio.getFirstPacketOrderAsLocalDateTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataAudio.getFirstPacketOrderAsLocalTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataAudio.getFirstPacketOrderAsString());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataAudio.getFirstPacketOrderAsBoolean());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataAudio.getFirstPacketOrderAsBigInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataAudio.getFirstPacketOrderAsURL());
        System.out.println("Number of channels AS Integer === " + jMetaDataAudio.getChannelsAsInteger());
        System.out.println("Number of channels AS Long === " + jMetaDataAudio.getChannelsAsLong());
        System.out.println("Number of channels AS LocalDateTime === " + jMetaDataAudio.getChannelsAsLocalDateTime());
        System.out.println("Number of channels AS LocalTime === " + jMetaDataAudio.getChannelsAsLocalTime());
        System.out.println("Number of channels AS String === " + jMetaDataAudio.getChannelsAsString());
        System.out.println("Number of channels AS Boolean === " + jMetaDataAudio.getChannelsAsBoolean());
        System.out.println("Number of channels AS BigInteger === " + jMetaDataAudio.getChannelsAsBigInteger());
        System.out.println("Number of channels AS URL === " + jMetaDataAudio.getChannelsAsURL());
        System.out.println("Format_Settings_Endianness AS Integer === " + jMetaDataAudio.getFormatSettingsEndiannessAsInteger());
        System.out.println("Format_Settings_Endianness AS Long === " + jMetaDataAudio.getFormatSettingsEndiannessAsLong());
        System.out.println("Format_Settings_Endianness AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsEndiannessAsLocalDateTime());
        System.out.println("Format_Settings_Endianness AS LocalTime === " + jMetaDataAudio.getFormatSettingsEndiannessAsLocalTime());
        System.out.println("Format_Settings_Endianness AS String === " + jMetaDataAudio.getFormatSettingsEndiannessAsString());
        System.out.println("Format_Settings_Endianness AS Boolean === " + jMetaDataAudio.getFormatSettingsEndiannessAsBoolean());
        System.out.println("Format_Settings_Endianness AS BigInteger === " + jMetaDataAudio.getFormatSettingsEndiannessAsBigInteger());
        System.out.println("Format_Settings_Endianness AS URL === " + jMetaDataAudio.getFormatSettingsEndiannessAsURL());
        System.out.println("Video_Delay/String5 AS Integer === " + jMetaDataAudio.getVideoDelayString5AsInteger());
        System.out.println("Video_Delay/String5 AS Long === " + jMetaDataAudio.getVideoDelayString5AsLong());
        System.out.println("Video_Delay/String5 AS LocalDateTime === " + jMetaDataAudio.getVideoDelayString5AsLocalDateTime());
        System.out.println("Video_Delay/String5 AS LocalTime === " + jMetaDataAudio.getVideoDelayString5AsLocalTime());
        System.out.println("Video_Delay/String5 AS String === " + jMetaDataAudio.getVideoDelayString5AsString());
        System.out.println("Video_Delay/String5 AS Boolean === " + jMetaDataAudio.getVideoDelayString5AsBoolean());
        System.out.println("Video_Delay/String5 AS BigInteger === " + jMetaDataAudio.getVideoDelayString5AsBigInteger());
        System.out.println("Video_Delay/String5 AS URL === " + jMetaDataAudio.getVideoDelayString5AsURL());
        System.out.println("Video_Delay/String1 AS Integer === " + jMetaDataAudio.getVideoDelayString1AsInteger());
        System.out.println("Video_Delay/String1 AS Long === " + jMetaDataAudio.getVideoDelayString1AsLong());
        System.out.println("Video_Delay/String1 AS LocalDateTime === " + jMetaDataAudio.getVideoDelayString1AsLocalDateTime());
        System.out.println("Video_Delay/String1 AS LocalTime === " + jMetaDataAudio.getVideoDelayString1AsLocalTime());
        System.out.println("Video_Delay/String1 AS String === " + jMetaDataAudio.getVideoDelayString1AsString());
        System.out.println("Video_Delay/String1 AS Boolean === " + jMetaDataAudio.getVideoDelayString1AsBoolean());
        System.out.println("Video_Delay/String1 AS BigInteger === " + jMetaDataAudio.getVideoDelayString1AsBigInteger());
        System.out.println("Video_Delay/String1 AS URL === " + jMetaDataAudio.getVideoDelayString1AsURL());
        System.out.println("Video_Delay/String2 AS Integer === " + jMetaDataAudio.getVideoDelayString2AsInteger());
        System.out.println("Video_Delay/String2 AS Long === " + jMetaDataAudio.getVideoDelayString2AsLong());
        System.out.println("Video_Delay/String2 AS LocalDateTime === " + jMetaDataAudio.getVideoDelayString2AsLocalDateTime());
        System.out.println("Video_Delay/String2 AS LocalTime === " + jMetaDataAudio.getVideoDelayString2AsLocalTime());
        System.out.println("Video_Delay/String2 AS String === " + jMetaDataAudio.getVideoDelayString2AsString());
        System.out.println("Video_Delay/String2 AS Boolean === " + jMetaDataAudio.getVideoDelayString2AsBoolean());
        System.out.println("Video_Delay/String2 AS BigInteger === " + jMetaDataAudio.getVideoDelayString2AsBigInteger());
        System.out.println("Video_Delay/String2 AS URL === " + jMetaDataAudio.getVideoDelayString2AsURL());
        System.out.println("Video_Delay/String3 AS Integer === " + jMetaDataAudio.getVideoDelayString3AsInteger());
        System.out.println("Video_Delay/String3 AS Long === " + jMetaDataAudio.getVideoDelayString3AsLong());
        System.out.println("Video_Delay/String3 AS LocalDateTime === " + jMetaDataAudio.getVideoDelayString3AsLocalDateTime());
        System.out.println("Video_Delay/String3 AS LocalTime === " + jMetaDataAudio.getVideoDelayString3AsLocalTime());
        System.out.println("Video_Delay/String3 AS String === " + jMetaDataAudio.getVideoDelayString3AsString());
        System.out.println("Video_Delay/String3 AS Boolean === " + jMetaDataAudio.getVideoDelayString3AsBoolean());
        System.out.println("Video_Delay/String3 AS BigInteger === " + jMetaDataAudio.getVideoDelayString3AsBigInteger());
        System.out.println("Video_Delay/String3 AS URL === " + jMetaDataAudio.getVideoDelayString3AsURL());
        System.out.println("Video_Delay/String4 AS Integer === " + jMetaDataAudio.getVideoDelayString4AsInteger());
        System.out.println("Video_Delay/String4 AS Long === " + jMetaDataAudio.getVideoDelayString4AsLong());
        System.out.println("Video_Delay/String4 AS LocalDateTime === " + jMetaDataAudio.getVideoDelayString4AsLocalDateTime());
        System.out.println("Video_Delay/String4 AS LocalTime === " + jMetaDataAudio.getVideoDelayString4AsLocalTime());
        System.out.println("Video_Delay/String4 AS String === " + jMetaDataAudio.getVideoDelayString4AsString());
        System.out.println("Video_Delay/String4 AS Boolean === " + jMetaDataAudio.getVideoDelayString4AsBoolean());
        System.out.println("Video_Delay/String4 AS BigInteger === " + jMetaDataAudio.getVideoDelayString4AsBigInteger());
        System.out.println("Video_Delay/String4 AS URL === " + jMetaDataAudio.getVideoDelayString4AsURL());
        System.out.println("Nominal Bit rate (with measurement) AS Integer === " + jMetaDataAudio.getBitRateNominalStringAsInteger());
        System.out.println("Nominal Bit rate (with measurement) AS Long === " + jMetaDataAudio.getBitRateNominalStringAsLong());
        System.out.println("Nominal Bit rate (with measurement) AS LocalDateTime === " + jMetaDataAudio.getBitRateNominalStringAsLocalDateTime());
        System.out.println("Nominal Bit rate (with measurement) AS LocalTime === " + jMetaDataAudio.getBitRateNominalStringAsLocalTime());
        System.out.println("Nominal Bit rate (with measurement) AS String === " + jMetaDataAudio.getBitRateNominalStringAsString());
        System.out.println("Nominal Bit rate (with measurement) AS Boolean === " + jMetaDataAudio.getBitRateNominalStringAsBoolean());
        System.out.println("Nominal Bit rate (with measurement) AS BigInteger === " + jMetaDataAudio.getBitRateNominalStringAsBigInteger());
        System.out.println("Nominal Bit rate (with measurement) AS URL === " + jMetaDataAudio.getBitRateNominalStringAsURL());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS Integer === " + jMetaDataAudio.getBitDepthDetectedStringAsInteger());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS Long === " + jMetaDataAudio.getBitDepthDetectedStringAsLong());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS LocalDateTime === " + jMetaDataAudio.getBitDepthDetectedStringAsLocalDateTime());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS LocalTime === " + jMetaDataAudio.getBitDepthDetectedStringAsLocalTime());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS String === " + jMetaDataAudio.getBitDepthDetectedStringAsString());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS Boolean === " + jMetaDataAudio.getBitDepthDetectedStringAsBoolean());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS BigInteger === " + jMetaDataAudio.getBitDepthDetectedStringAsBigInteger());
        System.out.println("Detected (during scan of the input by the muxer) resolution in bits AS URL === " + jMetaDataAudio.getBitDepthDetectedStringAsURL());
        System.out.println("Format used AS Integer === " + jMetaDataAudio.getFormatAsInteger());
        System.out.println("Format used AS Long === " + jMetaDataAudio.getFormatAsLong());
        System.out.println("Format used AS LocalDateTime === " + jMetaDataAudio.getFormatAsLocalDateTime());
        System.out.println("Format used AS LocalTime === " + jMetaDataAudio.getFormatAsLocalTime());
        System.out.println("Format used AS String === " + jMetaDataAudio.getFormatAsString());
        System.out.println("Format used AS Boolean === " + jMetaDataAudio.getFormatAsBoolean());
        System.out.println("Format used AS BigInteger === " + jMetaDataAudio.getFormatAsBigInteger());
        System.out.println("Format used AS URL === " + jMetaDataAudio.getFormatAsURL());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS Integer === " + jMetaDataAudio.getBitDepthStoredAsInteger());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS Long === " + jMetaDataAudio.getBitDepthStoredAsLong());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS LocalDateTime === " + jMetaDataAudio.getBitDepthStoredAsLocalDateTime());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS LocalTime === " + jMetaDataAudio.getBitDepthStoredAsLocalTime());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS String === " + jMetaDataAudio.getBitDepthStoredAsString());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS Boolean === " + jMetaDataAudio.getBitDepthStoredAsBoolean());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS BigInteger === " + jMetaDataAudio.getBitDepthStoredAsBigInteger());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS URL === " + jMetaDataAudio.getBitDepthStoredAsURL());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS Integer === " + jMetaDataAudio.getBitDepthStoredStringAsInteger());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS Long === " + jMetaDataAudio.getBitDepthStoredStringAsLong());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS LocalDateTime === " + jMetaDataAudio.getBitDepthStoredStringAsLocalDateTime());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS LocalTime === " + jMetaDataAudio.getBitDepthStoredStringAsLocalTime());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS String === " + jMetaDataAudio.getBitDepthStoredStringAsString());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS Boolean === " + jMetaDataAudio.getBitDepthStoredStringAsBoolean());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS BigInteger === " + jMetaDataAudio.getBitDepthStoredStringAsBigInteger());
        System.out.println("Stored Resolution in bits (8, 16, 20, 24) AS URL === " + jMetaDataAudio.getBitDepthStoredStringAsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataAudio.getCodecIDStringAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataAudio.getCodecIDStringAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataAudio.getCodecIDStringAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataAudio.getCodecIDStringAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataAudio.getCodecIDStringAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataAudio.getCodecIDStringAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataAudio.getCodecIDStringAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataAudio.getCodecIDStringAsURL());
        System.out.println("Name of the company AS Integer === " + jMetaDataAudio.getEncodedLibraryCompanyNameAsInteger());
        System.out.println("Name of the company AS Long === " + jMetaDataAudio.getEncodedLibraryCompanyNameAsLong());
        System.out.println("Name of the company AS LocalDateTime === " + jMetaDataAudio.getEncodedLibraryCompanyNameAsLocalDateTime());
        System.out.println("Name of the company AS LocalTime === " + jMetaDataAudio.getEncodedLibraryCompanyNameAsLocalTime());
        System.out.println("Name of the company AS String === " + jMetaDataAudio.getEncodedLibraryCompanyNameAsString());
        System.out.println("Name of the company AS Boolean === " + jMetaDataAudio.getEncodedLibraryCompanyNameAsBoolean());
        System.out.println("Name of the company AS BigInteger === " + jMetaDataAudio.getEncodedLibraryCompanyNameAsBigInteger());
        System.out.println("Name of the company AS URL === " + jMetaDataAudio.getEncodedLibraryCompanyNameAsURL());
        System.out.println("Source Streamsize in bytes AS Integer === " + jMetaDataAudio.getSourceStreamSizeAsInteger());
        System.out.println("Source Streamsize in bytes AS Long === " + jMetaDataAudio.getSourceStreamSizeAsLong());
        System.out.println("Source Streamsize in bytes AS LocalDateTime === " + jMetaDataAudio.getSourceStreamSizeAsLocalDateTime());
        System.out.println("Source Streamsize in bytes AS LocalTime === " + jMetaDataAudio.getSourceStreamSizeAsLocalTime());
        System.out.println("Source Streamsize in bytes AS String === " + jMetaDataAudio.getSourceStreamSizeAsString());
        System.out.println("Source Streamsize in bytes AS Boolean === " + jMetaDataAudio.getSourceStreamSizeAsBoolean());
        System.out.println("Source Streamsize in bytes AS BigInteger === " + jMetaDataAudio.getSourceStreamSizeAsBigInteger());
        System.out.println("Source Streamsize in bytes AS URL === " + jMetaDataAudio.getSourceStreamSizeAsURL());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Integer === " + jMetaDataAudio.getFormatCommercialAsInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Long === " + jMetaDataAudio.getFormatCommercialAsLong());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalDateTime === " + jMetaDataAudio.getFormatCommercialAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalTime === " + jMetaDataAudio.getFormatCommercialAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS String === " + jMetaDataAudio.getFormatCommercialAsString());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Boolean === " + jMetaDataAudio.getFormatCommercialAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS BigInteger === " + jMetaDataAudio.getFormatCommercialAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS URL === " + jMetaDataAudio.getFormatCommercialAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataAudio.getDelaySourceStringAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataAudio.getDelaySourceStringAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataAudio.getDelaySourceStringAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataAudio.getDelaySourceStringAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataAudio.getDelaySourceStringAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataAudio.getDelaySourceStringAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataAudio.getDelaySourceStringAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataAudio.getDelaySourceStringAsURL());
        System.out.println("Nominal Bit rate in bps AS Integer === " + jMetaDataAudio.getBitRateNominalAsInteger());
        System.out.println("Nominal Bit rate in bps AS Long === " + jMetaDataAudio.getBitRateNominalAsLong());
        System.out.println("Nominal Bit rate in bps AS LocalDateTime === " + jMetaDataAudio.getBitRateNominalAsLocalDateTime());
        System.out.println("Nominal Bit rate in bps AS LocalTime === " + jMetaDataAudio.getBitRateNominalAsLocalTime());
        System.out.println("Nominal Bit rate in bps AS String === " + jMetaDataAudio.getBitRateNominalAsString());
        System.out.println("Nominal Bit rate in bps AS Boolean === " + jMetaDataAudio.getBitRateNominalAsBoolean());
        System.out.println("Nominal Bit rate in bps AS BigInteger === " + jMetaDataAudio.getBitRateNominalAsBigInteger());
        System.out.println("Nominal Bit rate in bps AS URL === " + jMetaDataAudio.getBitRateNominalAsURL());
        System.out.println("Minimum Bit rate in bps AS Integer === " + jMetaDataAudio.getBitRateMinimumAsInteger());
        System.out.println("Minimum Bit rate in bps AS Long === " + jMetaDataAudio.getBitRateMinimumAsLong());
        System.out.println("Minimum Bit rate in bps AS LocalDateTime === " + jMetaDataAudio.getBitRateMinimumAsLocalDateTime());
        System.out.println("Minimum Bit rate in bps AS LocalTime === " + jMetaDataAudio.getBitRateMinimumAsLocalTime());
        System.out.println("Minimum Bit rate in bps AS String === " + jMetaDataAudio.getBitRateMinimumAsString());
        System.out.println("Minimum Bit rate in bps AS Boolean === " + jMetaDataAudio.getBitRateMinimumAsBoolean());
        System.out.println("Minimum Bit rate in bps AS BigInteger === " + jMetaDataAudio.getBitRateMinimumAsBigInteger());
        System.out.println("Minimum Bit rate in bps AS URL === " + jMetaDataAudio.getBitRateMinimumAsURL());
        System.out.println("Format_Settings_SBR/String AS Integer === " + jMetaDataAudio.getFormatSettingsSBRStringAsInteger());
        System.out.println("Format_Settings_SBR/String AS Long === " + jMetaDataAudio.getFormatSettingsSBRStringAsLong());
        System.out.println("Format_Settings_SBR/String AS LocalDateTime === " + jMetaDataAudio.getFormatSettingsSBRStringAsLocalDateTime());
        System.out.println("Format_Settings_SBR/String AS LocalTime === " + jMetaDataAudio.getFormatSettingsSBRStringAsLocalTime());
        System.out.println("Format_Settings_SBR/String AS String === " + jMetaDataAudio.getFormatSettingsSBRStringAsString());
        System.out.println("Format_Settings_SBR/String AS Boolean === " + jMetaDataAudio.getFormatSettingsSBRStringAsBoolean());
        System.out.println("Format_Settings_SBR/String AS BigInteger === " + jMetaDataAudio.getFormatSettingsSBRStringAsBigInteger());
        System.out.println("Format_Settings_SBR/String AS URL === " + jMetaDataAudio.getFormatSettingsSBRStringAsURL());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataAudio.getSourceDurationStringAsInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataAudio.getSourceDurationStringAsLong());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataAudio.getSourceDurationStringAsLocalDateTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataAudio.getSourceDurationStringAsLocalTime());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataAudio.getSourceDurationStringAsString());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataAudio.getSourceDurationStringAsBoolean());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataAudio.getSourceDurationStringAsBigInteger());
        System.out.println("Source Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataAudio.getSourceDurationStringAsURL());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Integer === " + jMetaDataAudio.getBitRateEncodedStringAsInteger());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Long === " + jMetaDataAudio.getBitRateEncodedStringAsLong());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS LocalDateTime === " + jMetaDataAudio.getBitRateEncodedStringAsLocalDateTime());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS LocalTime === " + jMetaDataAudio.getBitRateEncodedStringAsLocalTime());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS String === " + jMetaDataAudio.getBitRateEncodedStringAsString());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS Boolean === " + jMetaDataAudio.getBitRateEncodedStringAsBoolean());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS BigInteger === " + jMetaDataAudio.getBitRateEncodedStringAsBigInteger());
        System.out.println("Encoded (with forced padding) bit rate (with measurement), if some container padding is present AS URL === " + jMetaDataAudio.getBitRateEncodedStringAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataAudio.getStreamKindStringAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataAudio.getStreamKindStringAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataAudio.getStreamKindStringAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataAudio.getStreamKindStringAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataAudio.getStreamKindStringAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataAudio.getStreamKindStringAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataAudio.getStreamKindStringAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataAudio.getStreamKindStringAsURL());
        System.out.println("Position of channels (x/y.z format) AS Integer === " + jMetaDataAudio.getChannelPositionsString2AsInteger());
        System.out.println("Position of channels (x/y.z format) AS Long === " + jMetaDataAudio.getChannelPositionsString2AsLong());
        System.out.println("Position of channels (x/y.z format) AS LocalDateTime === " + jMetaDataAudio.getChannelPositionsString2AsLocalDateTime());
        System.out.println("Position of channels (x/y.z format) AS LocalTime === " + jMetaDataAudio.getChannelPositionsString2AsLocalTime());
        System.out.println("Position of channels (x/y.z format) AS String === " + jMetaDataAudio.getChannelPositionsString2AsString());
        System.out.println("Position of channels (x/y.z format) AS Boolean === " + jMetaDataAudio.getChannelPositionsString2AsBoolean());
        System.out.println("Position of channels (x/y.z format) AS BigInteger === " + jMetaDataAudio.getChannelPositionsString2AsBigInteger());
        System.out.println("Position of channels (x/y.z format) AS URL === " + jMetaDataAudio.getChannelPositionsString2AsURL());
        System.out.println("Version of the product AS Integer === " + jMetaDataAudio.getEncodedApplicationVersionAsInteger());
        System.out.println("Version of the product AS Long === " + jMetaDataAudio.getEncodedApplicationVersionAsLong());
        System.out.println("Version of the product AS LocalDateTime === " + jMetaDataAudio.getEncodedApplicationVersionAsLocalDateTime());
        System.out.println("Version of the product AS LocalTime === " + jMetaDataAudio.getEncodedApplicationVersionAsLocalTime());
        System.out.println("Version of the product AS String === " + jMetaDataAudio.getEncodedApplicationVersionAsString());
        System.out.println("Version of the product AS Boolean === " + jMetaDataAudio.getEncodedApplicationVersionAsBoolean());
        System.out.println("Version of the product AS BigInteger === " + jMetaDataAudio.getEncodedApplicationVersionAsBigInteger());
        System.out.println("Version of the product AS URL === " + jMetaDataAudio.getEncodedApplicationVersionAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataAudio.getMenuIDAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataAudio.getMenuIDAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataAudio.getMenuIDAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataAudio.getMenuIDAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataAudio.getMenuIDAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataAudio.getMenuIDAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataAudio.getMenuIDAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataAudio.getMenuIDAsURL());
        System.out.println("Sampling rate AS Integer === " + jMetaDataAudio.getSamplesPerFrameAsInteger());
        System.out.println("Sampling rate AS Long === " + jMetaDataAudio.getSamplesPerFrameAsLong());
        System.out.println("Sampling rate AS LocalDateTime === " + jMetaDataAudio.getSamplesPerFrameAsLocalDateTime());
        System.out.println("Sampling rate AS LocalTime === " + jMetaDataAudio.getSamplesPerFrameAsLocalTime());
        System.out.println("Sampling rate AS String === " + jMetaDataAudio.getSamplesPerFrameAsString());
        System.out.println("Sampling rate AS Boolean === " + jMetaDataAudio.getSamplesPerFrameAsBoolean());
        System.out.println("Sampling rate AS BigInteger === " + jMetaDataAudio.getSamplesPerFrameAsBigInteger());
        System.out.println("Sampling rate AS URL === " + jMetaDataAudio.getSamplesPerFrameAsURL());
        System.out.println("Between how much time and video frames the stream is inserted (with measurement) AS Integer === " + jMetaDataAudio.getInterleaveDurationStringAsInteger());
        System.out.println("Between how much time and video frames the stream is inserted (with measurement) AS Long === " + jMetaDataAudio.getInterleaveDurationStringAsLong());
        System.out.println("Between how much time and video frames the stream is inserted (with measurement) AS LocalDateTime === " + jMetaDataAudio.getInterleaveDurationStringAsLocalDateTime());
        System.out.println("Between how much time and video frames the stream is inserted (with measurement) AS LocalTime === " + jMetaDataAudio.getInterleaveDurationStringAsLocalTime());
        System.out.println("Between how much time and video frames the stream is inserted (with measurement) AS String === " + jMetaDataAudio.getInterleaveDurationStringAsString());
        System.out.println("Between how much time and video frames the stream is inserted (with measurement) AS Boolean === " + jMetaDataAudio.getInterleaveDurationStringAsBoolean());
        System.out.println("Between how much time and video frames the stream is inserted (with measurement) AS BigInteger === " + jMetaDataAudio.getInterleaveDurationStringAsBigInteger());
        System.out.println("Between how much time and video frames the stream is inserted (with measurement) AS URL === " + jMetaDataAudio.getInterleaveDurationStringAsURL());
        System.out.println("Number of a group in order to provide versions of the same track AS Integer === " + jMetaDataAudio.getAlternateGroupStringAsInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS Long === " + jMetaDataAudio.getAlternateGroupStringAsLong());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalDateTime === " + jMetaDataAudio.getAlternateGroupStringAsLocalDateTime());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalTime === " + jMetaDataAudio.getAlternateGroupStringAsLocalTime());
        System.out.println("Number of a group in order to provide versions of the same track AS String === " + jMetaDataAudio.getAlternateGroupStringAsString());
        System.out.println("Number of a group in order to provide versions of the same track AS Boolean === " + jMetaDataAudio.getAlternateGroupStringAsBoolean());
        System.out.println("Number of a group in order to provide versions of the same track AS BigInteger === " + jMetaDataAudio.getAlternateGroupStringAsBigInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS URL === " + jMetaDataAudio.getAlternateGroupStringAsURL());
    }

}
