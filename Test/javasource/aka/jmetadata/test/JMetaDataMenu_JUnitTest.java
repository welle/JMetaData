package aka.jmetadata.test;

import org.eclipse.jdt.annotation.NonNull;

import aka.jmetadata.main.JMetaDataMenu;

/**
 * This class contains tests methods for Menu informations of a specific Menu stream.
 *
 * @author Welle Charlotte
 */
public final class JMetaDataMenu_JUnitTest {

   /**
    * Print Menu informations.
    * 
    * @param jMetaDataMenu to be printed
    */
    static void printJMetadataMenu(@NonNull final JMetaDataMenu jMetaDataMenu) {
        System.out.println("JMetaDataMenu");
        System.out.println("-------------------------------------------------------");
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataMenu.getUniqueIDAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataMenu.getUniqueIDAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataMenu.getUniqueIDAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataMenu.getUniqueIDAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataMenu.getUniqueIDAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataMenu.getUniqueIDAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataMenu.getUniqueIDAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataMenu.getUniqueIDAsURL());
        System.out.println("NetworkName AS Integer === " + jMetaDataMenu.getNetworkNameAsInteger());
        System.out.println("NetworkName AS Long === " + jMetaDataMenu.getNetworkNameAsLong());
        System.out.println("NetworkName AS LocalDateTime === " + jMetaDataMenu.getNetworkNameAsLocalDateTime());
        System.out.println("NetworkName AS LocalTime === " + jMetaDataMenu.getNetworkNameAsLocalTime());
        System.out.println("NetworkName AS String === " + jMetaDataMenu.getNetworkNameAsString());
        System.out.println("NetworkName AS Boolean === " + jMetaDataMenu.getNetworkNameAsBoolean());
        System.out.println("NetworkName AS BigInteger === " + jMetaDataMenu.getNetworkNameAsBigInteger());
        System.out.println("NetworkName AS URL === " + jMetaDataMenu.getNetworkNameAsURL());
        System.out.println("TimeZones AS Integer === " + jMetaDataMenu.getTimeZonesAsInteger());
        System.out.println("TimeZones AS Long === " + jMetaDataMenu.getTimeZonesAsLong());
        System.out.println("TimeZones AS LocalDateTime === " + jMetaDataMenu.getTimeZonesAsLocalDateTime());
        System.out.println("TimeZones AS LocalTime === " + jMetaDataMenu.getTimeZonesAsLocalTime());
        System.out.println("TimeZones AS String === " + jMetaDataMenu.getTimeZonesAsString());
        System.out.println("TimeZones AS Boolean === " + jMetaDataMenu.getTimeZonesAsBoolean());
        System.out.println("TimeZones AS BigInteger === " + jMetaDataMenu.getTimeZonesAsBigInteger());
        System.out.println("TimeZones AS URL === " + jMetaDataMenu.getTimeZonesAsURL());
        System.out.println("Language (full) AS Integer === " + jMetaDataMenu.getLanguageStringAsInteger());
        System.out.println("Language (full) AS Long === " + jMetaDataMenu.getLanguageStringAsLong());
        System.out.println("Language (full) AS LocalDateTime === " + jMetaDataMenu.getLanguageStringAsLocalDateTime());
        System.out.println("Language (full) AS LocalTime === " + jMetaDataMenu.getLanguageStringAsLocalTime());
        System.out.println("Language (full) AS String === " + jMetaDataMenu.getLanguageStringAsString());
        System.out.println("Language (full) AS Boolean === " + jMetaDataMenu.getLanguageStringAsBoolean());
        System.out.println("Language (full) AS BigInteger === " + jMetaDataMenu.getLanguageStringAsBigInteger());
        System.out.println("Language (full) AS URL === " + jMetaDataMenu.getLanguageStringAsURL());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Integer === " + jMetaDataMenu.getDelayString3AsInteger());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Long === " + jMetaDataMenu.getDelayString3AsLong());
        System.out.println("Delay in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataMenu.getDelayString3AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataMenu.getDelayString3AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.MMM AS String === " + jMetaDataMenu.getDelayString3AsString());
        System.out.println("Delay in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataMenu.getDelayString3AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataMenu.getDelayString3AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.MMM AS URL === " + jMetaDataMenu.getDelayString3AsURL());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataMenu.getDelayString4AsInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataMenu.getDelayString4AsLong());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataMenu.getDelayString4AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataMenu.getDelayString4AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataMenu.getDelayString4AsString());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataMenu.getDelayString4AsBoolean());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataMenu.getDelayString4AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataMenu.getDelayString4AsURL());
        System.out.println("Countries AS Integer === " + jMetaDataMenu.getCountriesAsInteger());
        System.out.println("Countries AS Long === " + jMetaDataMenu.getCountriesAsLong());
        System.out.println("Countries AS LocalDateTime === " + jMetaDataMenu.getCountriesAsLocalDateTime());
        System.out.println("Countries AS LocalTime === " + jMetaDataMenu.getCountriesAsLocalTime());
        System.out.println("Countries AS String === " + jMetaDataMenu.getCountriesAsString());
        System.out.println("Countries AS Boolean === " + jMetaDataMenu.getCountriesAsBoolean());
        System.out.println("Countries AS BigInteger === " + jMetaDataMenu.getCountriesAsBigInteger());
        System.out.println("Countries AS URL === " + jMetaDataMenu.getCountriesAsURL());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataMenu.getStreamOrderAsInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataMenu.getStreamOrderAsLong());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataMenu.getStreamOrderAsLocalDateTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataMenu.getStreamOrderAsLocalTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataMenu.getStreamOrderAsString());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataMenu.getStreamOrderAsBoolean());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataMenu.getStreamOrderAsBigInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataMenu.getStreamOrderAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataMenu.getDelayString1AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataMenu.getDelayString1AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataMenu.getDelayString1AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataMenu.getDelayString1AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataMenu.getDelayString1AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataMenu.getDelayString1AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataMenu.getDelayString1AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataMenu.getDelayString1AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataMenu.getDelayString2AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataMenu.getDelayString2AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataMenu.getDelayString2AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataMenu.getDelayString2AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataMenu.getDelayString2AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataMenu.getDelayString2AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataMenu.getDelayString2AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataMenu.getDelayString2AsURL());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataMenu.getDelayString5AsInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataMenu.getDelayString5AsLong());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataMenu.getDelayString5AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataMenu.getDelayString5AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataMenu.getDelayString5AsString());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataMenu.getDelayString5AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataMenu.getDelayString5AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataMenu.getDelayString5AsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataMenu.getForcedStringAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataMenu.getForcedStringAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataMenu.getForcedStringAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataMenu.getForcedStringAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataMenu.getForcedStringAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataMenu.getForcedStringAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataMenu.getForcedStringAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataMenu.getForcedStringAsURL());
        System.out.println("Count of objects available in this stream AS Integer === " + jMetaDataMenu.getCountAsInteger());
        System.out.println("Count of objects available in this stream AS Long === " + jMetaDataMenu.getCountAsLong());
        System.out.println("Count of objects available in this stream AS LocalDateTime === " + jMetaDataMenu.getCountAsLocalDateTime());
        System.out.println("Count of objects available in this stream AS LocalTime === " + jMetaDataMenu.getCountAsLocalTime());
        System.out.println("Count of objects available in this stream AS String === " + jMetaDataMenu.getCountAsString());
        System.out.println("Count of objects available in this stream AS Boolean === " + jMetaDataMenu.getCountAsBoolean());
        System.out.println("Count of objects available in this stream AS BigInteger === " + jMetaDataMenu.getCountAsBigInteger());
        System.out.println("Count of objects available in this stream AS URL === " + jMetaDataMenu.getCountAsURL());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Integer === " + jMetaDataMenu.getDelayAsInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Long === " + jMetaDataMenu.getDelayAsLong());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalDateTime === " + jMetaDataMenu.getDelayAsLocalDateTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalTime === " + jMetaDataMenu.getDelayAsLocalTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS String === " + jMetaDataMenu.getDelayAsString());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Boolean === " + jMetaDataMenu.getDelayAsBoolean());
        System.out.println("Delay fixed in the stream (relative) IN MS AS BigInteger === " + jMetaDataMenu.getDelayAsBigInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS URL === " + jMetaDataMenu.getDelayAsURL());
        System.out.println("Count of streams of that kind available AS Integer === " + jMetaDataMenu.getStreamCountAsInteger());
        System.out.println("Count of streams of that kind available AS Long === " + jMetaDataMenu.getStreamCountAsLong());
        System.out.println("Count of streams of that kind available AS LocalDateTime === " + jMetaDataMenu.getStreamCountAsLocalDateTime());
        System.out.println("Count of streams of that kind available AS LocalTime === " + jMetaDataMenu.getStreamCountAsLocalTime());
        System.out.println("Count of streams of that kind available AS String === " + jMetaDataMenu.getStreamCountAsString());
        System.out.println("Count of streams of that kind available AS Boolean === " + jMetaDataMenu.getStreamCountAsBoolean());
        System.out.println("Count of streams of that kind available AS BigInteger === " + jMetaDataMenu.getStreamCountAsBigInteger());
        System.out.println("Count of streams of that kind available AS URL === " + jMetaDataMenu.getStreamCountAsURL());
        System.out.println("Used by third-party developers to know about the end of the chapters list (this position excluded) AS Integer === " + jMetaDataMenu.getChaptersPosEndAsInteger());
        System.out.println("Used by third-party developers to know about the end of the chapters list (this position excluded) AS Long === " + jMetaDataMenu.getChaptersPosEndAsLong());
        System.out.println("Used by third-party developers to know about the end of the chapters list (this position excluded) AS LocalDateTime === " + jMetaDataMenu.getChaptersPosEndAsLocalDateTime());
        System.out.println("Used by third-party developers to know about the end of the chapters list (this position excluded) AS LocalTime === " + jMetaDataMenu.getChaptersPosEndAsLocalTime());
        System.out.println("Used by third-party developers to know about the end of the chapters list (this position excluded) AS String === " + jMetaDataMenu.getChaptersPosEndAsString());
        System.out.println("Used by third-party developers to know about the end of the chapters list (this position excluded) AS Boolean === " + jMetaDataMenu.getChaptersPosEndAsBoolean());
        System.out.println("Used by third-party developers to know about the end of the chapters list (this position excluded) AS BigInteger === " + jMetaDataMenu.getChaptersPosEndAsBigInteger());
        System.out.println("Used by third-party developers to know about the end of the chapters list (this position excluded) AS URL === " + jMetaDataMenu.getChaptersPosEndAsURL());
        System.out.println("Version of this format AS Integer === " + jMetaDataMenu.getFormatVersionAsInteger());
        System.out.println("Version of this format AS Long === " + jMetaDataMenu.getFormatVersionAsLong());
        System.out.println("Version of this format AS LocalDateTime === " + jMetaDataMenu.getFormatVersionAsLocalDateTime());
        System.out.println("Version of this format AS LocalTime === " + jMetaDataMenu.getFormatVersionAsLocalTime());
        System.out.println("Version of this format AS String === " + jMetaDataMenu.getFormatVersionAsString());
        System.out.println("Version of this format AS Boolean === " + jMetaDataMenu.getFormatVersionAsBoolean());
        System.out.println("Version of this format AS BigInteger === " + jMetaDataMenu.getFormatVersionAsBigInteger());
        System.out.println("Version of this format AS URL === " + jMetaDataMenu.getFormatVersionAsURL());
        System.out.println("When multiple streams, number of the stream (base=1) AS Integer === " + jMetaDataMenu.getStreamKindPosAsInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS Long === " + jMetaDataMenu.getStreamKindPosAsLong());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalDateTime === " + jMetaDataMenu.getStreamKindPosAsLocalDateTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalTime === " + jMetaDataMenu.getStreamKindPosAsLocalTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS String === " + jMetaDataMenu.getStreamKindPosAsString());
        System.out.println("When multiple streams, number of the stream (base=1) AS Boolean === " + jMetaDataMenu.getStreamKindPosAsBoolean());
        System.out.println("When multiple streams, number of the stream (base=1) AS BigInteger === " + jMetaDataMenu.getStreamKindPosAsBigInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS URL === " + jMetaDataMenu.getStreamKindPosAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataMenu.getOriginalSourceMediumIDAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataMenu.getOriginalSourceMediumIDAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataMenu.getOriginalSourceMediumIDAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataMenu.getOriginalSourceMediumIDAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataMenu.getOriginalSourceMediumIDAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataMenu.getOriginalSourceMediumIDAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataMenu.getOriginalSourceMediumIDAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataMenu.getOriginalSourceMediumIDAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataMenu.getDurationStringAsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataMenu.getDurationStringAsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataMenu.getDurationStringAsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataMenu.getDurationStringAsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataMenu.getDurationStringAsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataMenu.getDurationStringAsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataMenu.getDurationStringAsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataMenu.getDurationStringAsURL());
        System.out.println("ServiceType AS Integer === " + jMetaDataMenu.getServiceTypeAsInteger());
        System.out.println("ServiceType AS Long === " + jMetaDataMenu.getServiceTypeAsLong());
        System.out.println("ServiceType AS LocalDateTime === " + jMetaDataMenu.getServiceTypeAsLocalDateTime());
        System.out.println("ServiceType AS LocalTime === " + jMetaDataMenu.getServiceTypeAsLocalTime());
        System.out.println("ServiceType AS String === " + jMetaDataMenu.getServiceTypeAsString());
        System.out.println("ServiceType AS Boolean === " + jMetaDataMenu.getServiceTypeAsBoolean());
        System.out.println("ServiceType AS BigInteger === " + jMetaDataMenu.getServiceTypeAsBigInteger());
        System.out.println("ServiceType AS URL === " + jMetaDataMenu.getServiceTypeAsURL());
        System.out.println("Compression method used AS Integer === " + jMetaDataMenu.getFormatCompressionAsInteger());
        System.out.println("Compression method used AS Long === " + jMetaDataMenu.getFormatCompressionAsLong());
        System.out.println("Compression method used AS LocalDateTime === " + jMetaDataMenu.getFormatCompressionAsLocalDateTime());
        System.out.println("Compression method used AS LocalTime === " + jMetaDataMenu.getFormatCompressionAsLocalTime());
        System.out.println("Compression method used AS String === " + jMetaDataMenu.getFormatCompressionAsString());
        System.out.println("Compression method used AS Boolean === " + jMetaDataMenu.getFormatCompressionAsBoolean());
        System.out.println("Compression method used AS BigInteger === " + jMetaDataMenu.getFormatCompressionAsBigInteger());
        System.out.println("Compression method used AS URL === " + jMetaDataMenu.getFormatCompressionAsURL());
        System.out.println("List of programs available AS Integer === " + jMetaDataMenu.getListAsInteger());
        System.out.println("List of programs available AS Long === " + jMetaDataMenu.getListAsLong());
        System.out.println("List of programs available AS LocalDateTime === " + jMetaDataMenu.getListAsLocalDateTime());
        System.out.println("List of programs available AS LocalTime === " + jMetaDataMenu.getListAsLocalTime());
        System.out.println("List of programs available AS String === " + jMetaDataMenu.getListAsString());
        System.out.println("List of programs available AS Boolean === " + jMetaDataMenu.getListAsBoolean());
        System.out.println("List of programs available AS BigInteger === " + jMetaDataMenu.getListAsBigInteger());
        System.out.println("List of programs available AS URL === " + jMetaDataMenu.getListAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataMenu.getIDAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataMenu.getIDAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataMenu.getIDAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataMenu.getIDAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataMenu.getIDAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataMenu.getIDAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataMenu.getIDAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataMenu.getIDAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataMenu.getDelayStringAsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataMenu.getDelayStringAsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataMenu.getDelayStringAsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataMenu.getDelayStringAsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataMenu.getDelayStringAsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataMenu.getDelayStringAsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataMenu.getDelayStringAsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataMenu.getDelayStringAsURL());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS Integer === " + jMetaDataMenu.getLawRatingAsInteger());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS Long === " + jMetaDataMenu.getLawRatingAsLong());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS LocalDateTime === " + jMetaDataMenu.getLawRatingAsLocalDateTime());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS LocalTime === " + jMetaDataMenu.getLawRatingAsLocalTime());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS String === " + jMetaDataMenu.getLawRatingAsString());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS Boolean === " + jMetaDataMenu.getLawRatingAsBoolean());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS BigInteger === " + jMetaDataMenu.getLawRatingAsBigInteger());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS URL === " + jMetaDataMenu.getLawRatingAsURL());
        System.out.println("Set if that track should not be used AS Integer === " + jMetaDataMenu.getDisabledAsInteger());
        System.out.println("Set if that track should not be used AS Long === " + jMetaDataMenu.getDisabledAsLong());
        System.out.println("Set if that track should not be used AS LocalDateTime === " + jMetaDataMenu.getDisabledAsLocalDateTime());
        System.out.println("Set if that track should not be used AS LocalTime === " + jMetaDataMenu.getDisabledAsLocalTime());
        System.out.println("Set if that track should not be used AS String === " + jMetaDataMenu.getDisabledAsString());
        System.out.println("Set if that track should not be used AS Boolean === " + jMetaDataMenu.getDisabledAsBoolean());
        System.out.println("Set if that track should not be used AS BigInteger === " + jMetaDataMenu.getDisabledAsBigInteger());
        System.out.println("Set if that track should not be used AS URL === " + jMetaDataMenu.getDisabledAsURL());
        System.out.println("List of programs available AS Integer === " + jMetaDataMenu.getListStreamKindAsInteger());
        System.out.println("List of programs available AS Long === " + jMetaDataMenu.getListStreamKindAsLong());
        System.out.println("List of programs available AS LocalDateTime === " + jMetaDataMenu.getListStreamKindAsLocalDateTime());
        System.out.println("List of programs available AS LocalTime === " + jMetaDataMenu.getListStreamKindAsLocalTime());
        System.out.println("List of programs available AS String === " + jMetaDataMenu.getListStreamKindAsString());
        System.out.println("List of programs available AS Boolean === " + jMetaDataMenu.getListStreamKindAsBoolean());
        System.out.println("List of programs available AS BigInteger === " + jMetaDataMenu.getListStreamKindAsBigInteger());
        System.out.println("List of programs available AS URL === " + jMetaDataMenu.getListStreamKindAsURL());
        System.out.println("Manual description given by the container AS Integer === " + jMetaDataMenu.getCodecIDDescriptionAsInteger());
        System.out.println("Manual description given by the container AS Long === " + jMetaDataMenu.getCodecIDDescriptionAsLong());
        System.out.println("Manual description given by the container AS LocalDateTime === " + jMetaDataMenu.getCodecIDDescriptionAsLocalDateTime());
        System.out.println("Manual description given by the container AS LocalTime === " + jMetaDataMenu.getCodecIDDescriptionAsLocalTime());
        System.out.println("Manual description given by the container AS String === " + jMetaDataMenu.getCodecIDDescriptionAsString());
        System.out.println("Manual description given by the container AS Boolean === " + jMetaDataMenu.getCodecIDDescriptionAsBoolean());
        System.out.println("Manual description given by the container AS BigInteger === " + jMetaDataMenu.getCodecIDDescriptionAsBigInteger());
        System.out.println("Manual description given by the container AS URL === " + jMetaDataMenu.getCodecIDDescriptionAsURL());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Integer === " + jMetaDataMenu.getStatusAsInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Long === " + jMetaDataMenu.getStatusAsLong());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalDateTime === " + jMetaDataMenu.getStatusAsLocalDateTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalTime === " + jMetaDataMenu.getStatusAsLocalTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS String === " + jMetaDataMenu.getStatusAsString());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Boolean === " + jMetaDataMenu.getStatusAsBoolean());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS BigInteger === " + jMetaDataMenu.getStatusAsBigInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS URL === " + jMetaDataMenu.getStatusAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataMenu.getMenuIDStringAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataMenu.getMenuIDStringAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataMenu.getMenuIDStringAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataMenu.getMenuIDStringAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataMenu.getMenuIDStringAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataMenu.getMenuIDStringAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataMenu.getMenuIDStringAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataMenu.getMenuIDStringAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataMenu.getDurationString2AsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataMenu.getDurationString2AsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataMenu.getDurationString2AsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataMenu.getDurationString2AsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataMenu.getDurationString2AsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataMenu.getDurationString2AsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataMenu.getDurationString2AsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataMenu.getDurationString2AsURL());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Integer === " + jMetaDataMenu.getDurationString3AsInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Long === " + jMetaDataMenu.getDurationString3AsLong());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataMenu.getDurationString3AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataMenu.getDurationString3AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS String === " + jMetaDataMenu.getDurationString3AsString());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataMenu.getDurationString3AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataMenu.getDurationString3AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS URL === " + jMetaDataMenu.getDurationString3AsURL());
        System.out.println("More info about Language (e.g. Director's Comment) AS Integer === " + jMetaDataMenu.getLanguageMoreAsInteger());
        System.out.println("More info about Language (e.g. Director's Comment) AS Long === " + jMetaDataMenu.getLanguageMoreAsLong());
        System.out.println("More info about Language (e.g. Director's Comment) AS LocalDateTime === " + jMetaDataMenu.getLanguageMoreAsLocalDateTime());
        System.out.println("More info about Language (e.g. Director's Comment) AS LocalTime === " + jMetaDataMenu.getLanguageMoreAsLocalTime());
        System.out.println("More info about Language (e.g. Director's Comment) AS String === " + jMetaDataMenu.getLanguageMoreAsString());
        System.out.println("More info about Language (e.g. Director's Comment) AS Boolean === " + jMetaDataMenu.getLanguageMoreAsBoolean());
        System.out.println("More info about Language (e.g. Director's Comment) AS BigInteger === " + jMetaDataMenu.getLanguageMoreAsBigInteger());
        System.out.println("More info about Language (e.g. Director's Comment) AS URL === " + jMetaDataMenu.getLanguageMoreAsURL());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataMenu.getDurationString1AsInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataMenu.getDurationString1AsLong());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataMenu.getDurationString1AsLocalDateTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataMenu.getDurationString1AsLocalTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataMenu.getDurationString1AsString());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataMenu.getDurationString1AsBoolean());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataMenu.getDurationString1AsBigInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataMenu.getDurationString1AsURL());
        System.out.println("Play time of the stream in ms AS Integer === " + jMetaDataMenu.getDurationAsInteger());
        System.out.println("Play time of the stream in ms AS Long === " + jMetaDataMenu.getDurationAsLong());
        System.out.println("Play time of the stream in ms AS LocalDateTime === " + jMetaDataMenu.getDurationAsLocalDateTime());
        System.out.println("Play time of the stream in ms AS LocalTime === " + jMetaDataMenu.getDurationAsLocalTime());
        System.out.println("Play time of the stream in ms AS String === " + jMetaDataMenu.getDurationAsString());
        System.out.println("Play time of the stream in ms AS Boolean === " + jMetaDataMenu.getDurationAsBoolean());
        System.out.println("Play time of the stream in ms AS BigInteger === " + jMetaDataMenu.getDurationAsBigInteger());
        System.out.println("Play time of the stream in ms AS URL === " + jMetaDataMenu.getDurationAsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataMenu.getDurationString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataMenu.getDurationString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataMenu.getDurationString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataMenu.getDurationString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataMenu.getDurationString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataMenu.getDurationString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataMenu.getDurationString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataMenu.getDurationString4AsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataMenu.getDurationString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataMenu.getDurationString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataMenu.getDurationString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataMenu.getDurationString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataMenu.getDurationString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataMenu.getDurationString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataMenu.getDurationString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataMenu.getDurationString5AsURL());
        System.out.println("Duration_Start AS Integer === " + jMetaDataMenu.getDurationStartAsInteger());
        System.out.println("Duration_Start AS Long === " + jMetaDataMenu.getDurationStartAsLong());
        System.out.println("Duration_Start AS LocalDateTime === " + jMetaDataMenu.getDurationStartAsLocalDateTime());
        System.out.println("Duration_Start AS LocalTime === " + jMetaDataMenu.getDurationStartAsLocalTime());
        System.out.println("Duration_Start AS String === " + jMetaDataMenu.getDurationStartAsString());
        System.out.println("Duration_Start AS Boolean === " + jMetaDataMenu.getDurationStartAsBoolean());
        System.out.println("Duration_Start AS BigInteger === " + jMetaDataMenu.getDurationStartAsBigInteger());
        System.out.println("Duration_Start AS URL === " + jMetaDataMenu.getDurationStartAsURL());
        System.out.println("A hint/popular name for this codec AS Integer === " + jMetaDataMenu.getCodecIDHintAsInteger());
        System.out.println("A hint/popular name for this codec AS Long === " + jMetaDataMenu.getCodecIDHintAsLong());
        System.out.println("A hint/popular name for this codec AS LocalDateTime === " + jMetaDataMenu.getCodecIDHintAsLocalDateTime());
        System.out.println("A hint/popular name for this codec AS LocalTime === " + jMetaDataMenu.getCodecIDHintAsLocalTime());
        System.out.println("A hint/popular name for this codec AS String === " + jMetaDataMenu.getCodecIDHintAsString());
        System.out.println("A hint/popular name for this codec AS Boolean === " + jMetaDataMenu.getCodecIDHintAsBoolean());
        System.out.println("A hint/popular name for this codec AS BigInteger === " + jMetaDataMenu.getCodecIDHintAsBigInteger());
        System.out.println("A hint/popular name for this codec AS URL === " + jMetaDataMenu.getCodecIDHintAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataMenu.getDelaySourceAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataMenu.getDelaySourceAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataMenu.getDelaySourceAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataMenu.getDelaySourceAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataMenu.getDelaySourceAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataMenu.getDelaySourceAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataMenu.getDelaySourceAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataMenu.getDelaySourceAsURL());
        System.out.println("Delay settings (in case of timecode for example) AS Integer === " + jMetaDataMenu.getDelaySettingsAsInteger());
        System.out.println("Delay settings (in case of timecode for example) AS Long === " + jMetaDataMenu.getDelaySettingsAsLong());
        System.out.println("Delay settings (in case of timecode for example) AS LocalDateTime === " + jMetaDataMenu.getDelaySettingsAsLocalDateTime());
        System.out.println("Delay settings (in case of timecode for example) AS LocalTime === " + jMetaDataMenu.getDelaySettingsAsLocalTime());
        System.out.println("Delay settings (in case of timecode for example) AS String === " + jMetaDataMenu.getDelaySettingsAsString());
        System.out.println("Delay settings (in case of timecode for example) AS Boolean === " + jMetaDataMenu.getDelaySettingsAsBoolean());
        System.out.println("Delay settings (in case of timecode for example) AS BigInteger === " + jMetaDataMenu.getDelaySettingsAsBigInteger());
        System.out.println("Delay settings (in case of timecode for example) AS URL === " + jMetaDataMenu.getDelaySettingsAsURL());
        System.out.println("Service/Url AS Integer === " + jMetaDataMenu.getServiceUrlAsInteger());
        System.out.println("Service/Url AS Long === " + jMetaDataMenu.getServiceUrlAsLong());
        System.out.println("Service/Url AS LocalDateTime === " + jMetaDataMenu.getServiceUrlAsLocalDateTime());
        System.out.println("Service/Url AS LocalTime === " + jMetaDataMenu.getServiceUrlAsLocalTime());
        System.out.println("Service/Url AS String === " + jMetaDataMenu.getServiceUrlAsString());
        System.out.println("Service/Url AS Boolean === " + jMetaDataMenu.getServiceUrlAsBoolean());
        System.out.println("Service/Url AS BigInteger === " + jMetaDataMenu.getServiceUrlAsBigInteger());
        System.out.println("Service/Url AS URL === " + jMetaDataMenu.getServiceUrlAsURL());
        System.out.println("List of programs available AS Integer === " + jMetaDataMenu.getListStreamPosAsInteger());
        System.out.println("List of programs available AS Long === " + jMetaDataMenu.getListStreamPosAsLong());
        System.out.println("List of programs available AS LocalDateTime === " + jMetaDataMenu.getListStreamPosAsLocalDateTime());
        System.out.println("List of programs available AS LocalTime === " + jMetaDataMenu.getListStreamPosAsLocalTime());
        System.out.println("List of programs available AS String === " + jMetaDataMenu.getListStreamPosAsString());
        System.out.println("List of programs available AS Boolean === " + jMetaDataMenu.getListStreamPosAsBoolean());
        System.out.println("List of programs available AS BigInteger === " + jMetaDataMenu.getListStreamPosAsBigInteger());
        System.out.println("List of programs available AS URL === " + jMetaDataMenu.getListStreamPosAsURL());
        System.out.println("ServiceName AS Integer === " + jMetaDataMenu.getServiceNameAsInteger());
        System.out.println("ServiceName AS Long === " + jMetaDataMenu.getServiceNameAsLong());
        System.out.println("ServiceName AS LocalDateTime === " + jMetaDataMenu.getServiceNameAsLocalDateTime());
        System.out.println("ServiceName AS LocalTime === " + jMetaDataMenu.getServiceNameAsLocalTime());
        System.out.println("ServiceName AS String === " + jMetaDataMenu.getServiceNameAsString());
        System.out.println("ServiceName AS Boolean === " + jMetaDataMenu.getServiceNameAsBoolean());
        System.out.println("ServiceName AS BigInteger === " + jMetaDataMenu.getServiceNameAsBigInteger());
        System.out.println("ServiceName AS URL === " + jMetaDataMenu.getServiceNameAsURL());
        System.out.println("ServiceProvider AS Integer === " + jMetaDataMenu.getServiceProviderAsInteger());
        System.out.println("ServiceProvider AS Long === " + jMetaDataMenu.getServiceProviderAsLong());
        System.out.println("ServiceProvider AS LocalDateTime === " + jMetaDataMenu.getServiceProviderAsLocalDateTime());
        System.out.println("ServiceProvider AS LocalTime === " + jMetaDataMenu.getServiceProviderAsLocalTime());
        System.out.println("ServiceProvider AS String === " + jMetaDataMenu.getServiceProviderAsString());
        System.out.println("ServiceProvider AS Boolean === " + jMetaDataMenu.getServiceProviderAsBoolean());
        System.out.println("ServiceProvider AS BigInteger === " + jMetaDataMenu.getServiceProviderAsBigInteger());
        System.out.println("ServiceProvider AS URL === " + jMetaDataMenu.getServiceProviderAsURL());
        System.out.println("Used by third-party developers to know about the beginning of the chapters list, to be used by Get(Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End AS Integer === " + jMetaDataMenu.getChaptersPosBeginAsInteger());
        System.out.println("Used by third-party developers to know about the beginning of the chapters list, to be used by Get(Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End AS Long === " + jMetaDataMenu.getChaptersPosBeginAsLong());
        System.out.println("Used by third-party developers to know about the beginning of the chapters list, to be used by Get(Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End AS LocalDateTime === " + jMetaDataMenu.getChaptersPosBeginAsLocalDateTime());
        System.out.println("Used by third-party developers to know about the beginning of the chapters list, to be used by Get(Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End AS LocalTime === " + jMetaDataMenu.getChaptersPosBeginAsLocalTime());
        System.out.println("Used by third-party developers to know about the beginning of the chapters list, to be used by Get(Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End AS String === " + jMetaDataMenu.getChaptersPosBeginAsString());
        System.out.println("Used by third-party developers to know about the beginning of the chapters list, to be used by Get(Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End AS Boolean === " + jMetaDataMenu.getChaptersPosBeginAsBoolean());
        System.out.println("Used by third-party developers to know about the beginning of the chapters list, to be used by Get(Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End AS BigInteger === " + jMetaDataMenu.getChaptersPosBeginAsBigInteger());
        System.out.println("Used by third-party developers to know about the beginning of the chapters list, to be used by Get(Stream_Menu, x, Pos), where Pos is an Integer between Chapters_Pos_Begin and Chapters_Pos_End AS URL === " + jMetaDataMenu.getChaptersPosBeginAsURL());
        System.out.println("ServiceProviderr/Url AS Integer === " + jMetaDataMenu.getServiceProviderrUrlAsInteger());
        System.out.println("ServiceProviderr/Url AS Long === " + jMetaDataMenu.getServiceProviderrUrlAsLong());
        System.out.println("ServiceProviderr/Url AS LocalDateTime === " + jMetaDataMenu.getServiceProviderrUrlAsLocalDateTime());
        System.out.println("ServiceProviderr/Url AS LocalTime === " + jMetaDataMenu.getServiceProviderrUrlAsLocalTime());
        System.out.println("ServiceProviderr/Url AS String === " + jMetaDataMenu.getServiceProviderrUrlAsString());
        System.out.println("ServiceProviderr/Url AS Boolean === " + jMetaDataMenu.getServiceProviderrUrlAsBoolean());
        System.out.println("ServiceProviderr/Url AS BigInteger === " + jMetaDataMenu.getServiceProviderrUrlAsBigInteger());
        System.out.println("ServiceProviderr/Url AS URL === " + jMetaDataMenu.getServiceProviderrUrlAsURL());
        System.out.println("Settings needed for decoder used AS Integer === " + jMetaDataMenu.getFormatSettingsAsInteger());
        System.out.println("Settings needed for decoder used AS Long === " + jMetaDataMenu.getFormatSettingsAsLong());
        System.out.println("Settings needed for decoder used AS LocalDateTime === " + jMetaDataMenu.getFormatSettingsAsLocalDateTime());
        System.out.println("Settings needed for decoder used AS LocalTime === " + jMetaDataMenu.getFormatSettingsAsLocalTime());
        System.out.println("Settings needed for decoder used AS String === " + jMetaDataMenu.getFormatSettingsAsString());
        System.out.println("Settings needed for decoder used AS Boolean === " + jMetaDataMenu.getFormatSettingsAsBoolean());
        System.out.println("Settings needed for decoder used AS BigInteger === " + jMetaDataMenu.getFormatSettingsAsBigInteger());
        System.out.println("Settings needed for decoder used AS URL === " + jMetaDataMenu.getFormatSettingsAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataMenu.getForcedAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataMenu.getForcedAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataMenu.getForcedAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataMenu.getForcedAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataMenu.getForcedAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataMenu.getForcedAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataMenu.getForcedAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataMenu.getForcedAsURL());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataMenu.getFirstPacketOrderAsInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataMenu.getFirstPacketOrderAsLong());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataMenu.getFirstPacketOrderAsLocalDateTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataMenu.getFirstPacketOrderAsLocalTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataMenu.getFirstPacketOrderAsString());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataMenu.getFirstPacketOrderAsBoolean());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataMenu.getFirstPacketOrderAsBigInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataMenu.getFirstPacketOrderAsURL());
        System.out.println("Duration_End AS Integer === " + jMetaDataMenu.getDurationEndAsInteger());
        System.out.println("Duration_End AS Long === " + jMetaDataMenu.getDurationEndAsLong());
        System.out.println("Duration_End AS LocalDateTime === " + jMetaDataMenu.getDurationEndAsLocalDateTime());
        System.out.println("Duration_End AS LocalTime === " + jMetaDataMenu.getDurationEndAsLocalTime());
        System.out.println("Duration_End AS String === " + jMetaDataMenu.getDurationEndAsString());
        System.out.println("Duration_End AS Boolean === " + jMetaDataMenu.getDurationEndAsBoolean());
        System.out.println("Duration_End AS BigInteger === " + jMetaDataMenu.getDurationEndAsBigInteger());
        System.out.println("Duration_End AS URL === " + jMetaDataMenu.getDurationEndAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataMenu.getStreamKindAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataMenu.getStreamKindAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataMenu.getStreamKindAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataMenu.getStreamKindAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataMenu.getStreamKindAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataMenu.getStreamKindAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataMenu.getStreamKindAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataMenu.getStreamKindAsURL());
        System.out.println("Last **Inform** call AS Integer === " + jMetaDataMenu.getInformAsInteger());
        System.out.println("Last **Inform** call AS Long === " + jMetaDataMenu.getInformAsLong());
        System.out.println("Last **Inform** call AS LocalDateTime === " + jMetaDataMenu.getInformAsLocalDateTime());
        System.out.println("Last **Inform** call AS LocalTime === " + jMetaDataMenu.getInformAsLocalTime());
        System.out.println("Last **Inform** call AS String === " + jMetaDataMenu.getInformAsString());
        System.out.println("Last **Inform** call AS Boolean === " + jMetaDataMenu.getInformAsBoolean());
        System.out.println("Last **Inform** call AS BigInteger === " + jMetaDataMenu.getInformAsBigInteger());
        System.out.println("Last **Inform** call AS URL === " + jMetaDataMenu.getInformAsURL());
        System.out.println("Language (full) AS Integer === " + jMetaDataMenu.getLanguageString1AsInteger());
        System.out.println("Language (full) AS Long === " + jMetaDataMenu.getLanguageString1AsLong());
        System.out.println("Language (full) AS LocalDateTime === " + jMetaDataMenu.getLanguageString1AsLocalDateTime());
        System.out.println("Language (full) AS LocalTime === " + jMetaDataMenu.getLanguageString1AsLocalTime());
        System.out.println("Language (full) AS String === " + jMetaDataMenu.getLanguageString1AsString());
        System.out.println("Language (full) AS Boolean === " + jMetaDataMenu.getLanguageString1AsBoolean());
        System.out.println("Language (full) AS BigInteger === " + jMetaDataMenu.getLanguageString1AsBigInteger());
        System.out.println("Language (full) AS URL === " + jMetaDataMenu.getLanguageString1AsURL());
        System.out.println("Reason for the law rating AS Integer === " + jMetaDataMenu.getLawRatingReasonAsInteger());
        System.out.println("Reason for the law rating AS Long === " + jMetaDataMenu.getLawRatingReasonAsLong());
        System.out.println("Reason for the law rating AS LocalDateTime === " + jMetaDataMenu.getLawRatingReasonAsLocalDateTime());
        System.out.println("Reason for the law rating AS LocalTime === " + jMetaDataMenu.getLawRatingReasonAsLocalTime());
        System.out.println("Reason for the law rating AS String === " + jMetaDataMenu.getLawRatingReasonAsString());
        System.out.println("Reason for the law rating AS Boolean === " + jMetaDataMenu.getLawRatingReasonAsBoolean());
        System.out.println("Reason for the law rating AS BigInteger === " + jMetaDataMenu.getLawRatingReasonAsBigInteger());
        System.out.println("Reason for the law rating AS URL === " + jMetaDataMenu.getLawRatingReasonAsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Integer === " + jMetaDataMenu.getLanguageString2AsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Long === " + jMetaDataMenu.getLanguageString2AsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS LocalDateTime === " + jMetaDataMenu.getLanguageString2AsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS LocalTime === " + jMetaDataMenu.getLanguageString2AsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS String === " + jMetaDataMenu.getLanguageString2AsString());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS Boolean === " + jMetaDataMenu.getLanguageString2AsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS BigInteger === " + jMetaDataMenu.getLanguageString2AsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else empty) AS URL === " + jMetaDataMenu.getLanguageString2AsURL());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Integer === " + jMetaDataMenu.getLanguageString3AsInteger());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Long === " + jMetaDataMenu.getLanguageString3AsLong());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS LocalDateTime === " + jMetaDataMenu.getLanguageString3AsLocalDateTime());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS LocalTime === " + jMetaDataMenu.getLanguageString3AsLocalTime());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS String === " + jMetaDataMenu.getLanguageString3AsString());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS Boolean === " + jMetaDataMenu.getLanguageString3AsBoolean());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS BigInteger === " + jMetaDataMenu.getLanguageString3AsBigInteger());
        System.out.println("Language (3-letter ISO 639-2 if exists, else empty) AS URL === " + jMetaDataMenu.getLanguageString3AsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Integer === " + jMetaDataMenu.getLanguageString4AsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Long === " + jMetaDataMenu.getLanguageString4AsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS LocalDateTime === " + jMetaDataMenu.getLanguageString4AsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS LocalTime === " + jMetaDataMenu.getLanguageString4AsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS String === " + jMetaDataMenu.getLanguageString4AsString());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS Boolean === " + jMetaDataMenu.getLanguageString4AsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS BigInteger === " + jMetaDataMenu.getLanguageString4AsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn, else empty) AS URL === " + jMetaDataMenu.getLanguageString4AsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataMenu.getCodecIDAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataMenu.getCodecIDAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataMenu.getCodecIDAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataMenu.getCodecIDAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataMenu.getCodecIDAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataMenu.getCodecIDAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataMenu.getCodecIDAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataMenu.getCodecIDAsURL());
        System.out.println("Number of a group in order to provide versions of the same track AS Integer === " + jMetaDataMenu.getAlternateGroupAsInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS Long === " + jMetaDataMenu.getAlternateGroupAsLong());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalDateTime === " + jMetaDataMenu.getAlternateGroupAsLocalDateTime());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalTime === " + jMetaDataMenu.getAlternateGroupAsLocalTime());
        System.out.println("Number of a group in order to provide versions of the same track AS String === " + jMetaDataMenu.getAlternateGroupAsString());
        System.out.println("Number of a group in order to provide versions of the same track AS Boolean === " + jMetaDataMenu.getAlternateGroupAsBoolean());
        System.out.println("Number of a group in order to provide versions of the same track AS BigInteger === " + jMetaDataMenu.getAlternateGroupAsBigInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS URL === " + jMetaDataMenu.getAlternateGroupAsURL());
        System.out.println("Number of the stream (base=0) AS Integer === " + jMetaDataMenu.getStreamKindIDAsInteger());
        System.out.println("Number of the stream (base=0) AS Long === " + jMetaDataMenu.getStreamKindIDAsLong());
        System.out.println("Number of the stream (base=0) AS LocalDateTime === " + jMetaDataMenu.getStreamKindIDAsLocalDateTime());
        System.out.println("Number of the stream (base=0) AS LocalTime === " + jMetaDataMenu.getStreamKindIDAsLocalTime());
        System.out.println("Number of the stream (base=0) AS String === " + jMetaDataMenu.getStreamKindIDAsString());
        System.out.println("Number of the stream (base=0) AS Boolean === " + jMetaDataMenu.getStreamKindIDAsBoolean());
        System.out.println("Number of the stream (base=0) AS BigInteger === " + jMetaDataMenu.getStreamKindIDAsBigInteger());
        System.out.println("Number of the stream (base=0) AS URL === " + jMetaDataMenu.getStreamKindIDAsURL());
        System.out.println("Format used AS Integer === " + jMetaDataMenu.getFormatAsInteger());
        System.out.println("Format used AS Long === " + jMetaDataMenu.getFormatAsLong());
        System.out.println("Format used AS LocalDateTime === " + jMetaDataMenu.getFormatAsLocalDateTime());
        System.out.println("Format used AS LocalTime === " + jMetaDataMenu.getFormatAsLocalTime());
        System.out.println("Format used AS String === " + jMetaDataMenu.getFormatAsString());
        System.out.println("Format used AS Boolean === " + jMetaDataMenu.getFormatAsBoolean());
        System.out.println("Format used AS BigInteger === " + jMetaDataMenu.getFormatAsBigInteger());
        System.out.println("Format used AS URL === " + jMetaDataMenu.getFormatAsURL());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Integer === " + jMetaDataMenu.getLanguageAsInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Long === " + jMetaDataMenu.getLanguageAsLong());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS LocalDateTime === " + jMetaDataMenu.getLanguageAsLocalDateTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS LocalTime === " + jMetaDataMenu.getLanguageAsLocalTime());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS String === " + jMetaDataMenu.getLanguageAsString());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS Boolean === " + jMetaDataMenu.getLanguageAsBoolean());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS BigInteger === " + jMetaDataMenu.getLanguageAsBigInteger());
        System.out.println("Language (2-letter ISO 639-1 if exists, else 3-letter ISO 639-2, and with optional ISO 3166-1 country separated by a dash if available, e.g. en, en-us, zh-cn) AS URL === " + jMetaDataMenu.getLanguageAsURL());
        System.out.println("Original/NetworkName AS Integer === " + jMetaDataMenu.getOriginalNetworkNameAsInteger());
        System.out.println("Original/NetworkName AS Long === " + jMetaDataMenu.getOriginalNetworkNameAsLong());
        System.out.println("Original/NetworkName AS LocalDateTime === " + jMetaDataMenu.getOriginalNetworkNameAsLocalDateTime());
        System.out.println("Original/NetworkName AS LocalTime === " + jMetaDataMenu.getOriginalNetworkNameAsLocalTime());
        System.out.println("Original/NetworkName AS String === " + jMetaDataMenu.getOriginalNetworkNameAsString());
        System.out.println("Original/NetworkName AS Boolean === " + jMetaDataMenu.getOriginalNetworkNameAsBoolean());
        System.out.println("Original/NetworkName AS BigInteger === " + jMetaDataMenu.getOriginalNetworkNameAsBigInteger());
        System.out.println("Original/NetworkName AS URL === " + jMetaDataMenu.getOriginalNetworkNameAsURL());
        System.out.println("Info about this codec AS Integer === " + jMetaDataMenu.getCodecIDInfoAsInteger());
        System.out.println("Info about this codec AS Long === " + jMetaDataMenu.getCodecIDInfoAsLong());
        System.out.println("Info about this codec AS LocalDateTime === " + jMetaDataMenu.getCodecIDInfoAsLocalDateTime());
        System.out.println("Info about this codec AS LocalTime === " + jMetaDataMenu.getCodecIDInfoAsLocalTime());
        System.out.println("Info about this codec AS String === " + jMetaDataMenu.getCodecIDInfoAsString());
        System.out.println("Info about this codec AS Boolean === " + jMetaDataMenu.getCodecIDInfoAsBoolean());
        System.out.println("Info about this codec AS BigInteger === " + jMetaDataMenu.getCodecIDInfoAsBigInteger());
        System.out.println("Info about this codec AS URL === " + jMetaDataMenu.getCodecIDInfoAsURL());
        System.out.println("Link AS Integer === " + jMetaDataMenu.getFormatUrlAsInteger());
        System.out.println("Link AS Long === " + jMetaDataMenu.getFormatUrlAsLong());
        System.out.println("Link AS LocalDateTime === " + jMetaDataMenu.getFormatUrlAsLocalDateTime());
        System.out.println("Link AS LocalTime === " + jMetaDataMenu.getFormatUrlAsLocalTime());
        System.out.println("Link AS String === " + jMetaDataMenu.getFormatUrlAsString());
        System.out.println("Link AS Boolean === " + jMetaDataMenu.getFormatUrlAsBoolean());
        System.out.println("Link AS BigInteger === " + jMetaDataMenu.getFormatUrlAsBigInteger());
        System.out.println("Link AS URL === " + jMetaDataMenu.getFormatUrlAsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataMenu.getCodecIDStringAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataMenu.getCodecIDStringAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataMenu.getCodecIDStringAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataMenu.getCodecIDStringAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataMenu.getCodecIDStringAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataMenu.getCodecIDStringAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataMenu.getCodecIDStringAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataMenu.getCodecIDStringAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataMenu.getDefaultStringAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataMenu.getDefaultStringAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataMenu.getDefaultStringAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataMenu.getDefaultStringAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataMenu.getDefaultStringAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataMenu.getDefaultStringAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataMenu.getDefaultStringAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataMenu.getDefaultStringAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataMenu.getOriginalSourceMediumIDStringAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataMenu.getOriginalSourceMediumIDStringAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataMenu.getOriginalSourceMediumIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataMenu.getOriginalSourceMediumIDStringAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataMenu.getOriginalSourceMediumIDStringAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataMenu.getOriginalSourceMediumIDStringAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataMenu.getOriginalSourceMediumIDStringAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataMenu.getOriginalSourceMediumIDStringAsURL());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Integer === " + jMetaDataMenu.getFormatCommercialAsInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Long === " + jMetaDataMenu.getFormatCommercialAsLong());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalDateTime === " + jMetaDataMenu.getFormatCommercialAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalTime === " + jMetaDataMenu.getFormatCommercialAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS String === " + jMetaDataMenu.getFormatCommercialAsString());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Boolean === " + jMetaDataMenu.getFormatCommercialAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS BigInteger === " + jMetaDataMenu.getFormatCommercialAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS URL === " + jMetaDataMenu.getFormatCommercialAsURL());
        System.out.println("Info about Format AS Integer === " + jMetaDataMenu.getFormatInfoAsInteger());
        System.out.println("Info about Format AS Long === " + jMetaDataMenu.getFormatInfoAsLong());
        System.out.println("Info about Format AS LocalDateTime === " + jMetaDataMenu.getFormatInfoAsLocalDateTime());
        System.out.println("Info about Format AS LocalTime === " + jMetaDataMenu.getFormatInfoAsLocalTime());
        System.out.println("Info about Format AS String === " + jMetaDataMenu.getFormatInfoAsString());
        System.out.println("Info about Format AS Boolean === " + jMetaDataMenu.getFormatInfoAsBoolean());
        System.out.println("Info about Format AS BigInteger === " + jMetaDataMenu.getFormatInfoAsBigInteger());
        System.out.println("Info about Format AS URL === " + jMetaDataMenu.getFormatInfoAsURL());
        System.out.println("A link to more details about this codec ID AS Integer === " + jMetaDataMenu.getCodecIDUrlAsInteger());
        System.out.println("A link to more details about this codec ID AS Long === " + jMetaDataMenu.getCodecIDUrlAsLong());
        System.out.println("A link to more details about this codec ID AS LocalDateTime === " + jMetaDataMenu.getCodecIDUrlAsLocalDateTime());
        System.out.println("A link to more details about this codec ID AS LocalTime === " + jMetaDataMenu.getCodecIDUrlAsLocalTime());
        System.out.println("A link to more details about this codec ID AS String === " + jMetaDataMenu.getCodecIDUrlAsString());
        System.out.println("A link to more details about this codec ID AS Boolean === " + jMetaDataMenu.getCodecIDUrlAsBoolean());
        System.out.println("A link to more details about this codec ID AS BigInteger === " + jMetaDataMenu.getCodecIDUrlAsBigInteger());
        System.out.println("A link to more details about this codec ID AS URL === " + jMetaDataMenu.getCodecIDUrlAsURL());
        System.out.println("Name of this menu AS Integer === " + jMetaDataMenu.getTitleAsInteger());
        System.out.println("Name of this menu AS Long === " + jMetaDataMenu.getTitleAsLong());
        System.out.println("Name of this menu AS LocalDateTime === " + jMetaDataMenu.getTitleAsLocalDateTime());
        System.out.println("Name of this menu AS LocalTime === " + jMetaDataMenu.getTitleAsLocalTime());
        System.out.println("Name of this menu AS String === " + jMetaDataMenu.getTitleAsString());
        System.out.println("Name of this menu AS Boolean === " + jMetaDataMenu.getTitleAsBoolean());
        System.out.println("Name of this menu AS BigInteger === " + jMetaDataMenu.getTitleAsBigInteger());
        System.out.println("Name of this menu AS URL === " + jMetaDataMenu.getTitleAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataMenu.getStreamKindStringAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataMenu.getStreamKindStringAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataMenu.getStreamKindStringAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataMenu.getStreamKindStringAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataMenu.getStreamKindStringAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataMenu.getStreamKindStringAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataMenu.getStreamKindStringAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataMenu.getStreamKindStringAsURL());
        System.out.println("List of programs available AS Integer === " + jMetaDataMenu.getListStringAsInteger());
        System.out.println("List of programs available AS Long === " + jMetaDataMenu.getListStringAsLong());
        System.out.println("List of programs available AS LocalDateTime === " + jMetaDataMenu.getListStringAsLocalDateTime());
        System.out.println("List of programs available AS LocalTime === " + jMetaDataMenu.getListStringAsLocalTime());
        System.out.println("List of programs available AS String === " + jMetaDataMenu.getListStringAsString());
        System.out.println("List of programs available AS Boolean === " + jMetaDataMenu.getListStringAsBoolean());
        System.out.println("List of programs available AS BigInteger === " + jMetaDataMenu.getListStringAsBigInteger());
        System.out.println("List of programs available AS URL === " + jMetaDataMenu.getListStringAsURL());
        System.out.println("Delay drop frame AS Integer === " + jMetaDataMenu.getDelayDropFrameAsInteger());
        System.out.println("Delay drop frame AS Long === " + jMetaDataMenu.getDelayDropFrameAsLong());
        System.out.println("Delay drop frame AS LocalDateTime === " + jMetaDataMenu.getDelayDropFrameAsLocalDateTime());
        System.out.println("Delay drop frame AS LocalTime === " + jMetaDataMenu.getDelayDropFrameAsLocalTime());
        System.out.println("Delay drop frame AS String === " + jMetaDataMenu.getDelayDropFrameAsString());
        System.out.println("Delay drop frame AS Boolean === " + jMetaDataMenu.getDelayDropFrameAsBoolean());
        System.out.println("Delay drop frame AS BigInteger === " + jMetaDataMenu.getDelayDropFrameAsBigInteger());
        System.out.println("Delay drop frame AS URL === " + jMetaDataMenu.getDelayDropFrameAsURL());
        System.out.println("Set if that track should not be used AS Integer === " + jMetaDataMenu.getDisabledStringAsInteger());
        System.out.println("Set if that track should not be used AS Long === " + jMetaDataMenu.getDisabledStringAsLong());
        System.out.println("Set if that track should not be used AS LocalDateTime === " + jMetaDataMenu.getDisabledStringAsLocalDateTime());
        System.out.println("Set if that track should not be used AS LocalTime === " + jMetaDataMenu.getDisabledStringAsLocalTime());
        System.out.println("Set if that track should not be used AS String === " + jMetaDataMenu.getDisabledStringAsString());
        System.out.println("Set if that track should not be used AS Boolean === " + jMetaDataMenu.getDisabledStringAsBoolean());
        System.out.println("Set if that track should not be used AS BigInteger === " + jMetaDataMenu.getDisabledStringAsBigInteger());
        System.out.println("Set if that track should not be used AS URL === " + jMetaDataMenu.getDisabledStringAsURL());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Integer === " + jMetaDataMenu.getDefaultAsInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Long === " + jMetaDataMenu.getDefaultAsLong());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalDateTime === " + jMetaDataMenu.getDefaultAsLocalDateTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS LocalTime === " + jMetaDataMenu.getDefaultAsLocalTime());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS String === " + jMetaDataMenu.getDefaultAsString());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS Boolean === " + jMetaDataMenu.getDefaultAsBoolean());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS BigInteger === " + jMetaDataMenu.getDefaultAsBigInteger());
        System.out.println("Set if that track should be used if no language found matches the user preference. AS URL === " + jMetaDataMenu.getDefaultAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataMenu.getMenuIDAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataMenu.getMenuIDAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataMenu.getMenuIDAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataMenu.getMenuIDAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataMenu.getMenuIDAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataMenu.getMenuIDAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataMenu.getMenuIDAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataMenu.getMenuIDAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataMenu.getUniqueIDStringAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataMenu.getUniqueIDStringAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataMenu.getUniqueIDStringAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataMenu.getUniqueIDStringAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataMenu.getUniqueIDStringAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataMenu.getUniqueIDStringAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataMenu.getUniqueIDStringAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataMenu.getUniqueIDStringAsURL());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Integer === " + jMetaDataMenu.getFormatCommercialIfAnyAsInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Long === " + jMetaDataMenu.getFormatCommercialIfAnyAsLong());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalDateTime === " + jMetaDataMenu.getFormatCommercialIfAnyAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalTime === " + jMetaDataMenu.getFormatCommercialIfAnyAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS String === " + jMetaDataMenu.getFormatCommercialIfAnyAsString());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Boolean === " + jMetaDataMenu.getFormatCommercialIfAnyAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS BigInteger === " + jMetaDataMenu.getFormatCommercialIfAnyAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS URL === " + jMetaDataMenu.getFormatCommercialIfAnyAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataMenu.getIDStringAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataMenu.getIDStringAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataMenu.getIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataMenu.getIDStringAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataMenu.getIDStringAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataMenu.getIDStringAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataMenu.getIDStringAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataMenu.getIDStringAsURL());
        System.out.println("Number of a group in order to provide versions of the same track AS Integer === " + jMetaDataMenu.getAlternateGroupStringAsInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS Long === " + jMetaDataMenu.getAlternateGroupStringAsLong());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalDateTime === " + jMetaDataMenu.getAlternateGroupStringAsLocalDateTime());
        System.out.println("Number of a group in order to provide versions of the same track AS LocalTime === " + jMetaDataMenu.getAlternateGroupStringAsLocalTime());
        System.out.println("Number of a group in order to provide versions of the same track AS String === " + jMetaDataMenu.getAlternateGroupStringAsString());
        System.out.println("Number of a group in order to provide versions of the same track AS Boolean === " + jMetaDataMenu.getAlternateGroupStringAsBoolean());
        System.out.println("Number of a group in order to provide versions of the same track AS BigInteger === " + jMetaDataMenu.getAlternateGroupStringAsBigInteger());
        System.out.println("Number of a group in order to provide versions of the same track AS URL === " + jMetaDataMenu.getAlternateGroupStringAsURL());
        System.out.println("Profile of the Format AS Integer === " + jMetaDataMenu.getFormatProfileAsInteger());
        System.out.println("Profile of the Format AS Long === " + jMetaDataMenu.getFormatProfileAsLong());
        System.out.println("Profile of the Format AS LocalDateTime === " + jMetaDataMenu.getFormatProfileAsLocalDateTime());
        System.out.println("Profile of the Format AS LocalTime === " + jMetaDataMenu.getFormatProfileAsLocalTime());
        System.out.println("Profile of the Format AS String === " + jMetaDataMenu.getFormatProfileAsString());
        System.out.println("Profile of the Format AS Boolean === " + jMetaDataMenu.getFormatProfileAsBoolean());
        System.out.println("Profile of the Format AS BigInteger === " + jMetaDataMenu.getFormatProfileAsBigInteger());
        System.out.println("Profile of the Format AS URL === " + jMetaDataMenu.getFormatProfileAsURL());
        System.out.println("ServiceChannel AS Integer === " + jMetaDataMenu.getServiceChannelAsInteger());
        System.out.println("ServiceChannel AS Long === " + jMetaDataMenu.getServiceChannelAsLong());
        System.out.println("ServiceChannel AS LocalDateTime === " + jMetaDataMenu.getServiceChannelAsLocalDateTime());
        System.out.println("ServiceChannel AS LocalTime === " + jMetaDataMenu.getServiceChannelAsLocalTime());
        System.out.println("ServiceChannel AS String === " + jMetaDataMenu.getServiceChannelAsString());
        System.out.println("ServiceChannel AS Boolean === " + jMetaDataMenu.getServiceChannelAsBoolean());
        System.out.println("ServiceChannel AS BigInteger === " + jMetaDataMenu.getServiceChannelAsBigInteger());
        System.out.println("ServiceChannel AS URL === " + jMetaDataMenu.getServiceChannelAsURL());
    }

}
