package aka.jmetadata.test;

import org.eclipse.jdt.annotation.NonNull;

import aka.jmetadata.main.JMetaDataGeneral;

/**
 * This class contains tests methods for General informations of a specific General stream.
 *
 * @author Welle Charlotte
 */
public final class JMetaDataGeneral_JUnitTest {

   /**
    * Print General informations.
    * 
    * @param jMetaDataGeneral to be printed
    */
    static void printJMetadataGeneral(@NonNull final JMetaDataGeneral jMetaDataGeneral) {
        System.out.println("JMetaDataGeneral");
        System.out.println("-------------------------------------------------------");
        System.out.println("Library of Congress Control Number. AS Integer === " + jMetaDataGeneral.getLCCNAsInteger());
        System.out.println("Library of Congress Control Number. AS Long === " + jMetaDataGeneral.getLCCNAsLong());
        System.out.println("Library of Congress Control Number. AS LocalDateTime === " + jMetaDataGeneral.getLCCNAsLocalDateTime());
        System.out.println("Library of Congress Control Number. AS LocalTime === " + jMetaDataGeneral.getLCCNAsLocalTime());
        System.out.println("Library of Congress Control Number. AS String === " + jMetaDataGeneral.getLCCNAsString());
        System.out.println("Library of Congress Control Number. AS Boolean === " + jMetaDataGeneral.getLCCNAsBoolean());
        System.out.println("Library of Congress Control Number. AS BigInteger === " + jMetaDataGeneral.getLCCNAsBigInteger());
        System.out.println("Library of Congress Control Number. AS URL === " + jMetaDataGeneral.getLCCNAsURL());
        System.out.println("Owner of the file AS Integer === " + jMetaDataGeneral.getOwnerAsInteger());
        System.out.println("Owner of the file AS Long === " + jMetaDataGeneral.getOwnerAsLong());
        System.out.println("Owner of the file AS LocalDateTime === " + jMetaDataGeneral.getOwnerAsLocalDateTime());
        System.out.println("Owner of the file AS LocalTime === " + jMetaDataGeneral.getOwnerAsLocalTime());
        System.out.println("Owner of the file AS String === " + jMetaDataGeneral.getOwnerAsString());
        System.out.println("Owner of the file AS Boolean === " + jMetaDataGeneral.getOwnerAsBoolean());
        System.out.println("Owner of the file AS BigInteger === " + jMetaDataGeneral.getOwnerAsBigInteger());
        System.out.println("Owner of the file AS URL === " + jMetaDataGeneral.getOwnerAsURL());
        System.out.println("NetworkName AS Integer === " + jMetaDataGeneral.getNetworkNameAsInteger());
        System.out.println("NetworkName AS Long === " + jMetaDataGeneral.getNetworkNameAsLong());
        System.out.println("NetworkName AS LocalDateTime === " + jMetaDataGeneral.getNetworkNameAsLocalDateTime());
        System.out.println("NetworkName AS LocalTime === " + jMetaDataGeneral.getNetworkNameAsLocalTime());
        System.out.println("NetworkName AS String === " + jMetaDataGeneral.getNetworkNameAsString());
        System.out.println("NetworkName AS Boolean === " + jMetaDataGeneral.getNetworkNameAsBoolean());
        System.out.println("NetworkName AS BigInteger === " + jMetaDataGeneral.getNetworkNameAsBigInteger());
        System.out.println("NetworkName AS URL === " + jMetaDataGeneral.getNetworkNameAsURL());
        System.out.println("Text Codecs in this file, separated by / AS Integer === " + jMetaDataGeneral.getTextFormatListAsInteger());
        System.out.println("Text Codecs in this file, separated by / AS Long === " + jMetaDataGeneral.getTextFormatListAsLong());
        System.out.println("Text Codecs in this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getTextFormatListAsLocalDateTime());
        System.out.println("Text Codecs in this file, separated by / AS LocalTime === " + jMetaDataGeneral.getTextFormatListAsLocalTime());
        System.out.println("Text Codecs in this file, separated by / AS String === " + jMetaDataGeneral.getTextFormatListAsString());
        System.out.println("Text Codecs in this file, separated by / AS Boolean === " + jMetaDataGeneral.getTextFormatListAsBoolean());
        System.out.println("Text Codecs in this file, separated by / AS BigInteger === " + jMetaDataGeneral.getTextFormatListAsBigInteger());
        System.out.println("Text Codecs in this file, separated by / AS URL === " + jMetaDataGeneral.getTextFormatListAsURL());
        System.out.println("iTunes compilation AS Integer === " + jMetaDataGeneral.getCompilationAsInteger());
        System.out.println("iTunes compilation AS Long === " + jMetaDataGeneral.getCompilationAsLong());
        System.out.println("iTunes compilation AS LocalDateTime === " + jMetaDataGeneral.getCompilationAsLocalDateTime());
        System.out.println("iTunes compilation AS LocalTime === " + jMetaDataGeneral.getCompilationAsLocalTime());
        System.out.println("iTunes compilation AS String === " + jMetaDataGeneral.getCompilationAsString());
        System.out.println("iTunes compilation AS Boolean === " + jMetaDataGeneral.getCompilationAsBoolean());
        System.out.println("iTunes compilation AS BigInteger === " + jMetaDataGeneral.getCompilationAsBigInteger());
        System.out.println("iTunes compilation AS URL === " + jMetaDataGeneral.getCompilationAsURL());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataGeneral.getStreamOrderAsInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataGeneral.getStreamOrderAsLong());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataGeneral.getStreamOrderAsLocalDateTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataGeneral.getStreamOrderAsLocalTime());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataGeneral.getStreamOrderAsString());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataGeneral.getStreamOrderAsBoolean());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataGeneral.getStreamOrderAsBigInteger());
        System.out.println("Stream order in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataGeneral.getStreamOrderAsURL());
        System.out.println("Name of the the encoding-software AS Integer === " + jMetaDataGeneral.getEncodedLibraryNameAsInteger());
        System.out.println("Name of the the encoding-software AS Long === " + jMetaDataGeneral.getEncodedLibraryNameAsLong());
        System.out.println("Name of the the encoding-software AS LocalDateTime === " + jMetaDataGeneral.getEncodedLibraryNameAsLocalDateTime());
        System.out.println("Name of the the encoding-software AS LocalTime === " + jMetaDataGeneral.getEncodedLibraryNameAsLocalTime());
        System.out.println("Name of the the encoding-software AS String === " + jMetaDataGeneral.getEncodedLibraryNameAsString());
        System.out.println("Name of the the encoding-software AS Boolean === " + jMetaDataGeneral.getEncodedLibraryNameAsBoolean());
        System.out.println("Name of the the encoding-software AS BigInteger === " + jMetaDataGeneral.getEncodedLibraryNameAsBigInteger());
        System.out.println("Name of the the encoding-software AS URL === " + jMetaDataGeneral.getEncodedLibraryNameAsURL());
        System.out.println("(Generic)More info about the title of file AS Integer === " + jMetaDataGeneral.getTitleMoreAsInteger());
        System.out.println("(Generic)More info about the title of file AS Long === " + jMetaDataGeneral.getTitleMoreAsLong());
        System.out.println("(Generic)More info about the title of file AS LocalDateTime === " + jMetaDataGeneral.getTitleMoreAsLocalDateTime());
        System.out.println("(Generic)More info about the title of file AS LocalTime === " + jMetaDataGeneral.getTitleMoreAsLocalTime());
        System.out.println("(Generic)More info about the title of file AS String === " + jMetaDataGeneral.getTitleMoreAsString());
        System.out.println("(Generic)More info about the title of file AS Boolean === " + jMetaDataGeneral.getTitleMoreAsBoolean());
        System.out.println("(Generic)More info about the title of file AS BigInteger === " + jMetaDataGeneral.getTitleMoreAsBigInteger());
        System.out.println("(Generic)More info about the title of file AS URL === " + jMetaDataGeneral.getTitleMoreAsURL());
        System.out.println("Describes the changes in lightness settings on the digitizer required to produce the file AS Integer === " + jMetaDataGeneral.getLightnessAsInteger());
        System.out.println("Describes the changes in lightness settings on the digitizer required to produce the file AS Long === " + jMetaDataGeneral.getLightnessAsLong());
        System.out.println("Describes the changes in lightness settings on the digitizer required to produce the file AS LocalDateTime === " + jMetaDataGeneral.getLightnessAsLocalDateTime());
        System.out.println("Describes the changes in lightness settings on the digitizer required to produce the file AS LocalTime === " + jMetaDataGeneral.getLightnessAsLocalTime());
        System.out.println("Describes the changes in lightness settings on the digitizer required to produce the file AS String === " + jMetaDataGeneral.getLightnessAsString());
        System.out.println("Describes the changes in lightness settings on the digitizer required to produce the file AS Boolean === " + jMetaDataGeneral.getLightnessAsBoolean());
        System.out.println("Describes the changes in lightness settings on the digitizer required to produce the file AS BigInteger === " + jMetaDataGeneral.getLightnessAsBigInteger());
        System.out.println("Describes the changes in lightness settings on the digitizer required to produce the file AS URL === " + jMetaDataGeneral.getLightnessAsURL());
        System.out.println("Identifies the changes in sharpness for the digitizer requiered to produce the file AS Integer === " + jMetaDataGeneral.getOriginalSourceFormSharpnessAsInteger());
        System.out.println("Identifies the changes in sharpness for the digitizer requiered to produce the file AS Long === " + jMetaDataGeneral.getOriginalSourceFormSharpnessAsLong());
        System.out.println("Identifies the changes in sharpness for the digitizer requiered to produce the file AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceFormSharpnessAsLocalDateTime());
        System.out.println("Identifies the changes in sharpness for the digitizer requiered to produce the file AS LocalTime === " + jMetaDataGeneral.getOriginalSourceFormSharpnessAsLocalTime());
        System.out.println("Identifies the changes in sharpness for the digitizer requiered to produce the file AS String === " + jMetaDataGeneral.getOriginalSourceFormSharpnessAsString());
        System.out.println("Identifies the changes in sharpness for the digitizer requiered to produce the file AS Boolean === " + jMetaDataGeneral.getOriginalSourceFormSharpnessAsBoolean());
        System.out.println("Identifies the changes in sharpness for the digitizer requiered to produce the file AS BigInteger === " + jMetaDataGeneral.getOriginalSourceFormSharpnessAsBigInteger());
        System.out.println("Identifies the changes in sharpness for the digitizer requiered to produce the file AS URL === " + jMetaDataGeneral.getOriginalSourceFormSharpnessAsURL());
        System.out.println("File extension only AS Integer === " + jMetaDataGeneral.getFileExtensionAsInteger());
        System.out.println("File extension only AS Long === " + jMetaDataGeneral.getFileExtensionAsLong());
        System.out.println("File extension only AS LocalDateTime === " + jMetaDataGeneral.getFileExtensionAsLocalDateTime());
        System.out.println("File extension only AS LocalTime === " + jMetaDataGeneral.getFileExtensionAsLocalTime());
        System.out.println("File extension only AS String === " + jMetaDataGeneral.getFileExtensionAsString());
        System.out.println("File extension only AS Boolean === " + jMetaDataGeneral.getFileExtensionAsBoolean());
        System.out.println("File extension only AS BigInteger === " + jMetaDataGeneral.getFileExtensionAsBigInteger());
        System.out.println("File extension only AS URL === " + jMetaDataGeneral.getFileExtensionAsURL());
        System.out.println("Real name of an actor or actress playing a role in the movie. AS Integer === " + jMetaDataGeneral.getActorAsInteger());
        System.out.println("Real name of an actor or actress playing a role in the movie. AS Long === " + jMetaDataGeneral.getActorAsLong());
        System.out.println("Real name of an actor or actress playing a role in the movie. AS LocalDateTime === " + jMetaDataGeneral.getActorAsLocalDateTime());
        System.out.println("Real name of an actor or actress playing a role in the movie. AS LocalTime === " + jMetaDataGeneral.getActorAsLocalTime());
        System.out.println("Real name of an actor or actress playing a role in the movie. AS String === " + jMetaDataGeneral.getActorAsString());
        System.out.println("Real name of an actor or actress playing a role in the movie. AS Boolean === " + jMetaDataGeneral.getActorAsBoolean());
        System.out.println("Real name of an actor or actress playing a role in the movie. AS BigInteger === " + jMetaDataGeneral.getActorAsBigInteger());
        System.out.println("Real name of an actor or actress playing a role in the movie. AS URL === " + jMetaDataGeneral.getActorAsURL());
        System.out.println("name of the person or organization that commissioned the subject of the file AS Integer === " + jMetaDataGeneral.getCommissionedByAsInteger());
        System.out.println("name of the person or organization that commissioned the subject of the file AS Long === " + jMetaDataGeneral.getCommissionedByAsLong());
        System.out.println("name of the person or organization that commissioned the subject of the file AS LocalDateTime === " + jMetaDataGeneral.getCommissionedByAsLocalDateTime());
        System.out.println("name of the person or organization that commissioned the subject of the file AS LocalTime === " + jMetaDataGeneral.getCommissionedByAsLocalTime());
        System.out.println("name of the person or organization that commissioned the subject of the file AS String === " + jMetaDataGeneral.getCommissionedByAsString());
        System.out.println("name of the person or organization that commissioned the subject of the file AS Boolean === " + jMetaDataGeneral.getCommissionedByAsBoolean());
        System.out.println("name of the person or organization that commissioned the subject of the file AS BigInteger === " + jMetaDataGeneral.getCommissionedByAsBigInteger());
        System.out.println("name of the person or organization that commissioned the subject of the file AS URL === " + jMetaDataGeneral.getCommissionedByAsURL());
        System.out.println("Compression method used AS Integer === " + jMetaDataGeneral.getFormatCompressionAsInteger());
        System.out.println("Compression method used AS Long === " + jMetaDataGeneral.getFormatCompressionAsLong());
        System.out.println("Compression method used AS LocalDateTime === " + jMetaDataGeneral.getFormatCompressionAsLocalDateTime());
        System.out.println("Compression method used AS LocalTime === " + jMetaDataGeneral.getFormatCompressionAsLocalTime());
        System.out.println("Compression method used AS String === " + jMetaDataGeneral.getFormatCompressionAsString());
        System.out.println("Compression method used AS Boolean === " + jMetaDataGeneral.getFormatCompressionAsBoolean());
        System.out.println("Compression method used AS BigInteger === " + jMetaDataGeneral.getFormatCompressionAsBigInteger());
        System.out.println("Compression method used AS URL === " + jMetaDataGeneral.getFormatCompressionAsURL());
        System.out.println("Band/orchestra/accompaniment/musician. AS Integer === " + jMetaDataGeneral.getAccompanimentAsInteger());
        System.out.println("Band/orchestra/accompaniment/musician. AS Long === " + jMetaDataGeneral.getAccompanimentAsLong());
        System.out.println("Band/orchestra/accompaniment/musician. AS LocalDateTime === " + jMetaDataGeneral.getAccompanimentAsLocalDateTime());
        System.out.println("Band/orchestra/accompaniment/musician. AS LocalTime === " + jMetaDataGeneral.getAccompanimentAsLocalTime());
        System.out.println("Band/orchestra/accompaniment/musician. AS String === " + jMetaDataGeneral.getAccompanimentAsString());
        System.out.println("Band/orchestra/accompaniment/musician. AS Boolean === " + jMetaDataGeneral.getAccompanimentAsBoolean());
        System.out.println("Band/orchestra/accompaniment/musician. AS BigInteger === " + jMetaDataGeneral.getAccompanimentAsBigInteger());
        System.out.println("Band/orchestra/accompaniment/musician. AS URL === " + jMetaDataGeneral.getAccompanimentAsURL());
        System.out.println("Cover, in binary format encoded BASE64 AS Integer === " + jMetaDataGeneral.getCoverDataAsInteger());
        System.out.println("Cover, in binary format encoded BASE64 AS Long === " + jMetaDataGeneral.getCoverDataAsLong());
        System.out.println("Cover, in binary format encoded BASE64 AS LocalDateTime === " + jMetaDataGeneral.getCoverDataAsLocalDateTime());
        System.out.println("Cover, in binary format encoded BASE64 AS LocalTime === " + jMetaDataGeneral.getCoverDataAsLocalTime());
        System.out.println("Cover, in binary format encoded BASE64 AS String === " + jMetaDataGeneral.getCoverDataAsString());
        System.out.println("Cover, in binary format encoded BASE64 AS Boolean === " + jMetaDataGeneral.getCoverDataAsBoolean());
        System.out.println("Cover, in binary format encoded BASE64 AS BigInteger === " + jMetaDataGeneral.getCoverDataAsBigInteger());
        System.out.println("Cover, in binary format encoded BASE64 AS URL === " + jMetaDataGeneral.getCoverDataAsURL());
        System.out.println("Video Codecs in this file, separated by / AS Integer === " + jMetaDataGeneral.getVideoFormatListAsInteger());
        System.out.println("Video Codecs in this file, separated by / AS Long === " + jMetaDataGeneral.getVideoFormatListAsLong());
        System.out.println("Video Codecs in this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getVideoFormatListAsLocalDateTime());
        System.out.println("Video Codecs in this file, separated by / AS LocalTime === " + jMetaDataGeneral.getVideoFormatListAsLocalTime());
        System.out.println("Video Codecs in this file, separated by / AS String === " + jMetaDataGeneral.getVideoFormatListAsString());
        System.out.println("Video Codecs in this file, separated by / AS Boolean === " + jMetaDataGeneral.getVideoFormatListAsBoolean());
        System.out.println("Video Codecs in this file, separated by / AS BigInteger === " + jMetaDataGeneral.getVideoFormatListAsBigInteger());
        System.out.println("Video Codecs in this file, separated by / AS URL === " + jMetaDataGeneral.getVideoFormatListAsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataGeneral.getDelayStringAsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataGeneral.getDelayStringAsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataGeneral.getDelayStringAsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataGeneral.getDelayStringAsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataGeneral.getDelayStringAsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataGeneral.getDelayStringAsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataGeneral.getDelayStringAsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataGeneral.getDelayStringAsURL());
        System.out.println("The date/year that the item was released. AS Integer === " + jMetaDataGeneral.getReleasedDateAsInteger());
        System.out.println("The date/year that the item was released. AS Long === " + jMetaDataGeneral.getReleasedDateAsLong());
        System.out.println("The date/year that the item was released. AS LocalDateTime === " + jMetaDataGeneral.getReleasedDateAsLocalDateTime());
        System.out.println("The date/year that the item was released. AS LocalTime === " + jMetaDataGeneral.getReleasedDateAsLocalTime());
        System.out.println("The date/year that the item was released. AS String === " + jMetaDataGeneral.getReleasedDateAsString());
        System.out.println("The date/year that the item was released. AS Boolean === " + jMetaDataGeneral.getReleasedDateAsBoolean());
        System.out.println("The date/year that the item was released. AS BigInteger === " + jMetaDataGeneral.getReleasedDateAsBigInteger());
        System.out.println("The date/year that the item was released. AS URL === " + jMetaDataGeneral.getReleasedDateAsURL());
        System.out.println("Manual description given by the container AS Integer === " + jMetaDataGeneral.getCodecIDDescriptionAsInteger());
        System.out.println("Manual description given by the container AS Long === " + jMetaDataGeneral.getCodecIDDescriptionAsLong());
        System.out.println("Manual description given by the container AS LocalDateTime === " + jMetaDataGeneral.getCodecIDDescriptionAsLocalDateTime());
        System.out.println("Manual description given by the container AS LocalTime === " + jMetaDataGeneral.getCodecIDDescriptionAsLocalTime());
        System.out.println("Manual description given by the container AS String === " + jMetaDataGeneral.getCodecIDDescriptionAsString());
        System.out.println("Manual description given by the container AS Boolean === " + jMetaDataGeneral.getCodecIDDescriptionAsBoolean());
        System.out.println("Manual description given by the container AS BigInteger === " + jMetaDataGeneral.getCodecIDDescriptionAsBigInteger());
        System.out.println("Manual description given by the container AS URL === " + jMetaDataGeneral.getCodecIDDescriptionAsURL());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Integer === " + jMetaDataGeneral.getStatusAsInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Long === " + jMetaDataGeneral.getStatusAsLong());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalDateTime === " + jMetaDataGeneral.getStatusAsLocalDateTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS LocalTime === " + jMetaDataGeneral.getStatusAsLocalTime());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS String === " + jMetaDataGeneral.getStatusAsString());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS Boolean === " + jMetaDataGeneral.getStatusAsBoolean());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS BigInteger === " + jMetaDataGeneral.getStatusAsBigInteger());
        System.out.println("bit field (0=IsAccepted, 1=IsFilled, 2=IsUpdated, 3=IsFinished) AS URL === " + jMetaDataGeneral.getStatusAsURL());
        System.out.println("File size (with measure, 2 digit mini) AS Integer === " + jMetaDataGeneral.getFileSizeString2AsInteger());
        System.out.println("File size (with measure, 2 digit mini) AS Long === " + jMetaDataGeneral.getFileSizeString2AsLong());
        System.out.println("File size (with measure, 2 digit mini) AS LocalDateTime === " + jMetaDataGeneral.getFileSizeString2AsLocalDateTime());
        System.out.println("File size (with measure, 2 digit mini) AS LocalTime === " + jMetaDataGeneral.getFileSizeString2AsLocalTime());
        System.out.println("File size (with measure, 2 digit mini) AS String === " + jMetaDataGeneral.getFileSizeString2AsString());
        System.out.println("File size (with measure, 2 digit mini) AS Boolean === " + jMetaDataGeneral.getFileSizeString2AsBoolean());
        System.out.println("File size (with measure, 2 digit mini) AS BigInteger === " + jMetaDataGeneral.getFileSizeString2AsBigInteger());
        System.out.println("File size (with measure, 2 digit mini) AS URL === " + jMetaDataGeneral.getFileSizeString2AsURL());
        System.out.println("Original name of the track in the original support AS Integer === " + jMetaDataGeneral.getOriginalTrackAsInteger());
        System.out.println("Original name of the track in the original support AS Long === " + jMetaDataGeneral.getOriginalTrackAsLong());
        System.out.println("Original name of the track in the original support AS LocalDateTime === " + jMetaDataGeneral.getOriginalTrackAsLocalDateTime());
        System.out.println("Original name of the track in the original support AS LocalTime === " + jMetaDataGeneral.getOriginalTrackAsLocalTime());
        System.out.println("Original name of the track in the original support AS String === " + jMetaDataGeneral.getOriginalTrackAsString());
        System.out.println("Original name of the track in the original support AS Boolean === " + jMetaDataGeneral.getOriginalTrackAsBoolean());
        System.out.println("Original name of the track in the original support AS BigInteger === " + jMetaDataGeneral.getOriginalTrackAsBigInteger());
        System.out.println("Original name of the track in the original support AS URL === " + jMetaDataGeneral.getOriginalTrackAsURL());
        System.out.println("File size (with measure, 1 digit mini) AS Integer === " + jMetaDataGeneral.getFileSizeString1AsInteger());
        System.out.println("File size (with measure, 1 digit mini) AS Long === " + jMetaDataGeneral.getFileSizeString1AsLong());
        System.out.println("File size (with measure, 1 digit mini) AS LocalDateTime === " + jMetaDataGeneral.getFileSizeString1AsLocalDateTime());
        System.out.println("File size (with measure, 1 digit mini) AS LocalTime === " + jMetaDataGeneral.getFileSizeString1AsLocalTime());
        System.out.println("File size (with measure, 1 digit mini) AS String === " + jMetaDataGeneral.getFileSizeString1AsString());
        System.out.println("File size (with measure, 1 digit mini) AS Boolean === " + jMetaDataGeneral.getFileSizeString1AsBoolean());
        System.out.println("File size (with measure, 1 digit mini) AS BigInteger === " + jMetaDataGeneral.getFileSizeString1AsBigInteger());
        System.out.println("File size (with measure, 1 digit mini) AS URL === " + jMetaDataGeneral.getFileSizeString1AsURL());
        System.out.println("Frames per second AS Integer === " + jMetaDataGeneral.getFrameRateAsInteger());
        System.out.println("Frames per second AS Long === " + jMetaDataGeneral.getFrameRateAsLong());
        System.out.println("Frames per second AS LocalDateTime === " + jMetaDataGeneral.getFrameRateAsLocalDateTime());
        System.out.println("Frames per second AS LocalTime === " + jMetaDataGeneral.getFrameRateAsLocalTime());
        System.out.println("Frames per second AS String === " + jMetaDataGeneral.getFrameRateAsString());
        System.out.println("Frames per second AS Boolean === " + jMetaDataGeneral.getFrameRateAsBoolean());
        System.out.println("Frames per second AS BigInteger === " + jMetaDataGeneral.getFrameRateAsBigInteger());
        System.out.println("Frames per second AS URL === " + jMetaDataGeneral.getFrameRateAsURL());
        System.out.println("Number of this track AS Integer === " + jMetaDataGeneral.getTrackPositionAsInteger());
        System.out.println("Number of this track AS Long === " + jMetaDataGeneral.getTrackPositionAsLong());
        System.out.println("Number of this track AS LocalDateTime === " + jMetaDataGeneral.getTrackPositionAsLocalDateTime());
        System.out.println("Number of this track AS LocalTime === " + jMetaDataGeneral.getTrackPositionAsLocalTime());
        System.out.println("Number of this track AS String === " + jMetaDataGeneral.getTrackPositionAsString());
        System.out.println("Number of this track AS Boolean === " + jMetaDataGeneral.getTrackPositionAsBoolean());
        System.out.println("Number of this track AS BigInteger === " + jMetaDataGeneral.getTrackPositionAsBigInteger());
        System.out.println("Number of this track AS URL === " + jMetaDataGeneral.getTrackPositionAsURL());
        System.out.println("Name of the assistant director. AS Integer === " + jMetaDataGeneral.getAssistantDirectorAsInteger());
        System.out.println("Name of the assistant director. AS Long === " + jMetaDataGeneral.getAssistantDirectorAsLong());
        System.out.println("Name of the assistant director. AS LocalDateTime === " + jMetaDataGeneral.getAssistantDirectorAsLocalDateTime());
        System.out.println("Name of the assistant director. AS LocalTime === " + jMetaDataGeneral.getAssistantDirectorAsLocalTime());
        System.out.println("Name of the assistant director. AS String === " + jMetaDataGeneral.getAssistantDirectorAsString());
        System.out.println("Name of the assistant director. AS Boolean === " + jMetaDataGeneral.getAssistantDirectorAsBoolean());
        System.out.println("Name of the assistant director. AS BigInteger === " + jMetaDataGeneral.getAssistantDirectorAsBigInteger());
        System.out.println("Name of the assistant director. AS URL === " + jMetaDataGeneral.getAssistantDirectorAsURL());
        System.out.println("Version of the CodecID AS Integer === " + jMetaDataGeneral.getCodecIDVersionAsInteger());
        System.out.println("Version of the CodecID AS Long === " + jMetaDataGeneral.getCodecIDVersionAsLong());
        System.out.println("Version of the CodecID AS LocalDateTime === " + jMetaDataGeneral.getCodecIDVersionAsLocalDateTime());
        System.out.println("Version of the CodecID AS LocalTime === " + jMetaDataGeneral.getCodecIDVersionAsLocalTime());
        System.out.println("Version of the CodecID AS String === " + jMetaDataGeneral.getCodecIDVersionAsString());
        System.out.println("Version of the CodecID AS Boolean === " + jMetaDataGeneral.getCodecIDVersionAsBoolean());
        System.out.println("Version of the CodecID AS BigInteger === " + jMetaDataGeneral.getCodecIDVersionAsBigInteger());
        System.out.println("Version of the CodecID AS URL === " + jMetaDataGeneral.getCodecIDVersionAsURL());
        System.out.println("Video languagesin this file, full names, separated by / AS Integer === " + jMetaDataGeneral.getVideoLanguageListAsInteger());
        System.out.println("Video languagesin this file, full names, separated by / AS Long === " + jMetaDataGeneral.getVideoLanguageListAsLong());
        System.out.println("Video languagesin this file, full names, separated by / AS LocalDateTime === " + jMetaDataGeneral.getVideoLanguageListAsLocalDateTime());
        System.out.println("Video languagesin this file, full names, separated by / AS LocalTime === " + jMetaDataGeneral.getVideoLanguageListAsLocalTime());
        System.out.println("Video languagesin this file, full names, separated by / AS String === " + jMetaDataGeneral.getVideoLanguageListAsString());
        System.out.println("Video languagesin this file, full names, separated by / AS Boolean === " + jMetaDataGeneral.getVideoLanguageListAsBoolean());
        System.out.println("Video languagesin this file, full names, separated by / AS BigInteger === " + jMetaDataGeneral.getVideoLanguageListAsBigInteger());
        System.out.println("Video languagesin this file, full names, separated by / AS URL === " + jMetaDataGeneral.getVideoLanguageListAsURL());
        System.out.println("Encryption_Format AS Integer === " + jMetaDataGeneral.getEncryptionFormatAsInteger());
        System.out.println("Encryption_Format AS Long === " + jMetaDataGeneral.getEncryptionFormatAsLong());
        System.out.println("Encryption_Format AS LocalDateTime === " + jMetaDataGeneral.getEncryptionFormatAsLocalDateTime());
        System.out.println("Encryption_Format AS LocalTime === " + jMetaDataGeneral.getEncryptionFormatAsLocalTime());
        System.out.println("Encryption_Format AS String === " + jMetaDataGeneral.getEncryptionFormatAsString());
        System.out.println("Encryption_Format AS Boolean === " + jMetaDataGeneral.getEncryptionFormatAsBoolean());
        System.out.println("Encryption_Format AS BigInteger === " + jMetaDataGeneral.getEncryptionFormatAsBigInteger());
        System.out.println("Encryption_Format AS URL === " + jMetaDataGeneral.getEncryptionFormatAsURL());
        System.out.println("Original name of album, serie... AS Integer === " + jMetaDataGeneral.getOriginalAlbumAsInteger());
        System.out.println("Original name of album, serie... AS Long === " + jMetaDataGeneral.getOriginalAlbumAsLong());
        System.out.println("Original name of album, serie... AS LocalDateTime === " + jMetaDataGeneral.getOriginalAlbumAsLocalDateTime());
        System.out.println("Original name of album, serie... AS LocalTime === " + jMetaDataGeneral.getOriginalAlbumAsLocalTime());
        System.out.println("Original name of album, serie... AS String === " + jMetaDataGeneral.getOriginalAlbumAsString());
        System.out.println("Original name of album, serie... AS Boolean === " + jMetaDataGeneral.getOriginalAlbumAsBoolean());
        System.out.println("Original name of album, serie... AS BigInteger === " + jMetaDataGeneral.getOriginalAlbumAsBigInteger());
        System.out.println("Original name of album, serie... AS URL === " + jMetaDataGeneral.getOriginalAlbumAsURL());
        System.out.println("Original form of the material, e.g. slide, paper, map AS Integer === " + jMetaDataGeneral.getOriginalSourceFormAsInteger());
        System.out.println("Original form of the material, e.g. slide, paper, map AS Long === " + jMetaDataGeneral.getOriginalSourceFormAsLong());
        System.out.println("Original form of the material, e.g. slide, paper, map AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceFormAsLocalDateTime());
        System.out.println("Original form of the material, e.g. slide, paper, map AS LocalTime === " + jMetaDataGeneral.getOriginalSourceFormAsLocalTime());
        System.out.println("Original form of the material, e.g. slide, paper, map AS String === " + jMetaDataGeneral.getOriginalSourceFormAsString());
        System.out.println("Original form of the material, e.g. slide, paper, map AS Boolean === " + jMetaDataGeneral.getOriginalSourceFormAsBoolean());
        System.out.println("Original form of the material, e.g. slide, paper, map AS BigInteger === " + jMetaDataGeneral.getOriginalSourceFormAsBigInteger());
        System.out.println("Original form of the material, e.g. slide, paper, map AS URL === " + jMetaDataGeneral.getOriginalSourceFormAsURL());
        System.out.println("Delay settings (in case of timecode for example) AS Integer === " + jMetaDataGeneral.getDelaySettingsAsInteger());
        System.out.println("Delay settings (in case of timecode for example) AS Long === " + jMetaDataGeneral.getDelaySettingsAsLong());
        System.out.println("Delay settings (in case of timecode for example) AS LocalDateTime === " + jMetaDataGeneral.getDelaySettingsAsLocalDateTime());
        System.out.println("Delay settings (in case of timecode for example) AS LocalTime === " + jMetaDataGeneral.getDelaySettingsAsLocalTime());
        System.out.println("Delay settings (in case of timecode for example) AS String === " + jMetaDataGeneral.getDelaySettingsAsString());
        System.out.println("Delay settings (in case of timecode for example) AS Boolean === " + jMetaDataGeneral.getDelaySettingsAsBoolean());
        System.out.println("Delay settings (in case of timecode for example) AS BigInteger === " + jMetaDataGeneral.getDelaySettingsAsBigInteger());
        System.out.println("Delay settings (in case of timecode for example) AS URL === " + jMetaDataGeneral.getDelaySettingsAsURL());
        System.out.println("TimeZone AS Integer === " + jMetaDataGeneral.getTimeZoneAsInteger());
        System.out.println("TimeZone AS Long === " + jMetaDataGeneral.getTimeZoneAsLong());
        System.out.println("TimeZone AS LocalDateTime === " + jMetaDataGeneral.getTimeZoneAsLocalDateTime());
        System.out.println("TimeZone AS LocalTime === " + jMetaDataGeneral.getTimeZoneAsLocalTime());
        System.out.println("TimeZone AS String === " + jMetaDataGeneral.getTimeZoneAsString());
        System.out.println("TimeZone AS Boolean === " + jMetaDataGeneral.getTimeZoneAsBoolean());
        System.out.println("TimeZone AS BigInteger === " + jMetaDataGeneral.getTimeZoneAsBigInteger());
        System.out.println("TimeZone AS URL === " + jMetaDataGeneral.getTimeZoneAsURL());
        System.out.println("Image Codecs in this file, separated by / AS Integer === " + jMetaDataGeneral.getImageFormatListAsInteger());
        System.out.println("Image Codecs in this file, separated by / AS Long === " + jMetaDataGeneral.getImageFormatListAsLong());
        System.out.println("Image Codecs in this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getImageFormatListAsLocalDateTime());
        System.out.println("Image Codecs in this file, separated by / AS LocalTime === " + jMetaDataGeneral.getImageFormatListAsLocalTime());
        System.out.println("Image Codecs in this file, separated by / AS String === " + jMetaDataGeneral.getImageFormatListAsString());
        System.out.println("Image Codecs in this file, separated by / AS Boolean === " + jMetaDataGeneral.getImageFormatListAsBoolean());
        System.out.println("Image Codecs in this file, separated by / AS BigInteger === " + jMetaDataGeneral.getImageFormatListAsBigInteger());
        System.out.println("Image Codecs in this file, separated by / AS URL === " + jMetaDataGeneral.getImageFormatListAsURL());
        System.out.println("Number of menu streams AS Integer === " + jMetaDataGeneral.getMenuCountAsInteger());
        System.out.println("Number of menu streams AS Long === " + jMetaDataGeneral.getMenuCountAsLong());
        System.out.println("Number of menu streams AS LocalDateTime === " + jMetaDataGeneral.getMenuCountAsLocalDateTime());
        System.out.println("Number of menu streams AS LocalTime === " + jMetaDataGeneral.getMenuCountAsLocalTime());
        System.out.println("Number of menu streams AS String === " + jMetaDataGeneral.getMenuCountAsString());
        System.out.println("Number of menu streams AS Boolean === " + jMetaDataGeneral.getMenuCountAsBoolean());
        System.out.println("Number of menu streams AS BigInteger === " + jMetaDataGeneral.getMenuCountAsBigInteger());
        System.out.println("Number of menu streams AS URL === " + jMetaDataGeneral.getMenuCountAsURL());
        System.out.println("Image Codecs in this file with popular name (hint), separated by / AS Integer === " + jMetaDataGeneral.getImageFormatWithHintListAsInteger());
        System.out.println("Image Codecs in this file with popular name (hint), separated by / AS Long === " + jMetaDataGeneral.getImageFormatWithHintListAsLong());
        System.out.println("Image Codecs in this file with popular name (hint), separated by / AS LocalDateTime === " + jMetaDataGeneral.getImageFormatWithHintListAsLocalDateTime());
        System.out.println("Image Codecs in this file with popular name (hint), separated by / AS LocalTime === " + jMetaDataGeneral.getImageFormatWithHintListAsLocalTime());
        System.out.println("Image Codecs in this file with popular name (hint), separated by / AS String === " + jMetaDataGeneral.getImageFormatWithHintListAsString());
        System.out.println("Image Codecs in this file with popular name (hint), separated by / AS Boolean === " + jMetaDataGeneral.getImageFormatWithHintListAsBoolean());
        System.out.println("Image Codecs in this file with popular name (hint), separated by / AS BigInteger === " + jMetaDataGeneral.getImageFormatWithHintListAsBigInteger());
        System.out.println("Image Codecs in this file with popular name (hint), separated by / AS URL === " + jMetaDataGeneral.getImageFormatWithHintListAsURL());
        System.out.println("Name of the part. e.g. CD1, CD2 AS Integer === " + jMetaDataGeneral.getPartAsInteger());
        System.out.println("Name of the part. e.g. CD1, CD2 AS Long === " + jMetaDataGeneral.getPartAsLong());
        System.out.println("Name of the part. e.g. CD1, CD2 AS LocalDateTime === " + jMetaDataGeneral.getPartAsLocalDateTime());
        System.out.println("Name of the part. e.g. CD1, CD2 AS LocalTime === " + jMetaDataGeneral.getPartAsLocalTime());
        System.out.println("Name of the part. e.g. CD1, CD2 AS String === " + jMetaDataGeneral.getPartAsString());
        System.out.println("Name of the part. e.g. CD1, CD2 AS Boolean === " + jMetaDataGeneral.getPartAsBoolean());
        System.out.println("Name of the part. e.g. CD1, CD2 AS BigInteger === " + jMetaDataGeneral.getPartAsBigInteger());
        System.out.println("Name of the part. e.g. CD1, CD2 AS URL === " + jMetaDataGeneral.getPartAsURL());
        System.out.println("Bit rate mode of all streams (Variable, Constant) AS Integer === " + jMetaDataGeneral.getOverallBitRateModeStringAsInteger());
        System.out.println("Bit rate mode of all streams (Variable, Constant) AS Long === " + jMetaDataGeneral.getOverallBitRateModeStringAsLong());
        System.out.println("Bit rate mode of all streams (Variable, Constant) AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateModeStringAsLocalDateTime());
        System.out.println("Bit rate mode of all streams (Variable, Constant) AS LocalTime === " + jMetaDataGeneral.getOverallBitRateModeStringAsLocalTime());
        System.out.println("Bit rate mode of all streams (Variable, Constant) AS String === " + jMetaDataGeneral.getOverallBitRateModeStringAsString());
        System.out.println("Bit rate mode of all streams (Variable, Constant) AS Boolean === " + jMetaDataGeneral.getOverallBitRateModeStringAsBoolean());
        System.out.println("Bit rate mode of all streams (Variable, Constant) AS BigInteger === " + jMetaDataGeneral.getOverallBitRateModeStringAsBigInteger());
        System.out.println("Bit rate mode of all streams (Variable, Constant) AS URL === " + jMetaDataGeneral.getOverallBitRateModeStringAsURL());
        System.out.println("Place of the part e.g. 2 of 3 AS Integer === " + jMetaDataGeneral.getPartPositionTotalAsInteger());
        System.out.println("Place of the part e.g. 2 of 3 AS Long === " + jMetaDataGeneral.getPartPositionTotalAsLong());
        System.out.println("Place of the part e.g. 2 of 3 AS LocalDateTime === " + jMetaDataGeneral.getPartPositionTotalAsLocalDateTime());
        System.out.println("Place of the part e.g. 2 of 3 AS LocalTime === " + jMetaDataGeneral.getPartPositionTotalAsLocalTime());
        System.out.println("Place of the part e.g. 2 of 3 AS String === " + jMetaDataGeneral.getPartPositionTotalAsString());
        System.out.println("Place of the part e.g. 2 of 3 AS Boolean === " + jMetaDataGeneral.getPartPositionTotalAsBoolean());
        System.out.println("Place of the part e.g. 2 of 3 AS BigInteger === " + jMetaDataGeneral.getPartPositionTotalAsBigInteger());
        System.out.println("Place of the part e.g. 2 of 3 AS URL === " + jMetaDataGeneral.getPartPositionTotalAsURL());
        System.out.println("Original name of the movie AS Integer === " + jMetaDataGeneral.getOriginalMovieAsInteger());
        System.out.println("Original name of the movie AS Long === " + jMetaDataGeneral.getOriginalMovieAsLong());
        System.out.println("Original name of the movie AS LocalDateTime === " + jMetaDataGeneral.getOriginalMovieAsLocalDateTime());
        System.out.println("Original name of the movie AS LocalTime === " + jMetaDataGeneral.getOriginalMovieAsLocalTime());
        System.out.println("Original name of the movie AS String === " + jMetaDataGeneral.getOriginalMovieAsString());
        System.out.println("Original name of the movie AS Boolean === " + jMetaDataGeneral.getOriginalMovieAsBoolean());
        System.out.println("Original name of the movie AS BigInteger === " + jMetaDataGeneral.getOriginalMovieAsBigInteger());
        System.out.println("Original name of the movie AS URL === " + jMetaDataGeneral.getOriginalMovieAsURL());
        System.out.println("The maximum absolute peak value of the item AS Integer === " + jMetaDataGeneral.getAlbumReplayGainPeakAsInteger());
        System.out.println("The maximum absolute peak value of the item AS Long === " + jMetaDataGeneral.getAlbumReplayGainPeakAsLong());
        System.out.println("The maximum absolute peak value of the item AS LocalDateTime === " + jMetaDataGeneral.getAlbumReplayGainPeakAsLocalDateTime());
        System.out.println("The maximum absolute peak value of the item AS LocalTime === " + jMetaDataGeneral.getAlbumReplayGainPeakAsLocalTime());
        System.out.println("The maximum absolute peak value of the item AS String === " + jMetaDataGeneral.getAlbumReplayGainPeakAsString());
        System.out.println("The maximum absolute peak value of the item AS Boolean === " + jMetaDataGeneral.getAlbumReplayGainPeakAsBoolean());
        System.out.println("The maximum absolute peak value of the item AS BigInteger === " + jMetaDataGeneral.getAlbumReplayGainPeakAsBigInteger());
        System.out.println("The maximum absolute peak value of the item AS URL === " + jMetaDataGeneral.getAlbumReplayGainPeakAsURL());
        System.out.println("File size (with measure, 4 digit mini) AS Integer === " + jMetaDataGeneral.getFileSizeString4AsInteger());
        System.out.println("File size (with measure, 4 digit mini) AS Long === " + jMetaDataGeneral.getFileSizeString4AsLong());
        System.out.println("File size (with measure, 4 digit mini) AS LocalDateTime === " + jMetaDataGeneral.getFileSizeString4AsLocalDateTime());
        System.out.println("File size (with measure, 4 digit mini) AS LocalTime === " + jMetaDataGeneral.getFileSizeString4AsLocalTime());
        System.out.println("File size (with measure, 4 digit mini) AS String === " + jMetaDataGeneral.getFileSizeString4AsString());
        System.out.println("File size (with measure, 4 digit mini) AS Boolean === " + jMetaDataGeneral.getFileSizeString4AsBoolean());
        System.out.println("File size (with measure, 4 digit mini) AS BigInteger === " + jMetaDataGeneral.getFileSizeString4AsBigInteger());
        System.out.println("File size (with measure, 4 digit mini) AS URL === " + jMetaDataGeneral.getFileSizeString4AsURL());
        System.out.println("File size (with measure, 3 digit mini) AS Integer === " + jMetaDataGeneral.getFileSizeString3AsInteger());
        System.out.println("File size (with measure, 3 digit mini) AS Long === " + jMetaDataGeneral.getFileSizeString3AsLong());
        System.out.println("File size (with measure, 3 digit mini) AS LocalDateTime === " + jMetaDataGeneral.getFileSizeString3AsLocalDateTime());
        System.out.println("File size (with measure, 3 digit mini) AS LocalTime === " + jMetaDataGeneral.getFileSizeString3AsLocalTime());
        System.out.println("File size (with measure, 3 digit mini) AS String === " + jMetaDataGeneral.getFileSizeString3AsString());
        System.out.println("File size (with measure, 3 digit mini) AS Boolean === " + jMetaDataGeneral.getFileSizeString3AsBoolean());
        System.out.println("File size (with measure, 3 digit mini) AS BigInteger === " + jMetaDataGeneral.getFileSizeString3AsBigInteger());
        System.out.println("File size (with measure, 3 digit mini) AS URL === " + jMetaDataGeneral.getFileSizeString3AsURL());
        System.out.println("Name of the artist(s), that interpreted, remixed, or otherwise modified the item. AS Integer === " + jMetaDataGeneral.getRemixedByAsInteger());
        System.out.println("Name of the artist(s), that interpreted, remixed, or otherwise modified the item. AS Long === " + jMetaDataGeneral.getRemixedByAsLong());
        System.out.println("Name of the artist(s), that interpreted, remixed, or otherwise modified the item. AS LocalDateTime === " + jMetaDataGeneral.getRemixedByAsLocalDateTime());
        System.out.println("Name of the artist(s), that interpreted, remixed, or otherwise modified the item. AS LocalTime === " + jMetaDataGeneral.getRemixedByAsLocalTime());
        System.out.println("Name of the artist(s), that interpreted, remixed, or otherwise modified the item. AS String === " + jMetaDataGeneral.getRemixedByAsString());
        System.out.println("Name of the artist(s), that interpreted, remixed, or otherwise modified the item. AS Boolean === " + jMetaDataGeneral.getRemixedByAsBoolean());
        System.out.println("Name of the artist(s), that interpreted, remixed, or otherwise modified the item. AS BigInteger === " + jMetaDataGeneral.getRemixedByAsBigInteger());
        System.out.println("Name of the artist(s), that interpreted, remixed, or otherwise modified the item. AS URL === " + jMetaDataGeneral.getRemixedByAsURL());
        System.out.println("Name of the subtrack. AS Integer === " + jMetaDataGeneral.getSubTrackAsInteger());
        System.out.println("Name of the subtrack. AS Long === " + jMetaDataGeneral.getSubTrackAsLong());
        System.out.println("Name of the subtrack. AS LocalDateTime === " + jMetaDataGeneral.getSubTrackAsLocalDateTime());
        System.out.println("Name of the subtrack. AS LocalTime === " + jMetaDataGeneral.getSubTrackAsLocalTime());
        System.out.println("Name of the subtrack. AS String === " + jMetaDataGeneral.getSubTrackAsString());
        System.out.println("Name of the subtrack. AS Boolean === " + jMetaDataGeneral.getSubTrackAsBoolean());
        System.out.println("Name of the subtrack. AS BigInteger === " + jMetaDataGeneral.getSubTrackAsBigInteger());
        System.out.println("Name of the subtrack. AS URL === " + jMetaDataGeneral.getSubTrackAsURL());
        System.out.println("Package name i.e. technical flavor of the content AS Integer === " + jMetaDataGeneral.getPackageNameAsInteger());
        System.out.println("Package name i.e. technical flavor of the content AS Long === " + jMetaDataGeneral.getPackageNameAsLong());
        System.out.println("Package name i.e. technical flavor of the content AS LocalDateTime === " + jMetaDataGeneral.getPackageNameAsLocalDateTime());
        System.out.println("Package name i.e. technical flavor of the content AS LocalTime === " + jMetaDataGeneral.getPackageNameAsLocalTime());
        System.out.println("Package name i.e. technical flavor of the content AS String === " + jMetaDataGeneral.getPackageNameAsString());
        System.out.println("Package name i.e. technical flavor of the content AS Boolean === " + jMetaDataGeneral.getPackageNameAsBoolean());
        System.out.println("Package name i.e. technical flavor of the content AS BigInteger === " + jMetaDataGeneral.getPackageNameAsBigInteger());
        System.out.println("Package name i.e. technical flavor of the content AS URL === " + jMetaDataGeneral.getPackageNameAsURL());
        System.out.println("Original medium of the material, e.g. vinyl, Audio-CD, Super8 or BetaMax AS Integer === " + jMetaDataGeneral.getOriginalSourceMediumAsInteger());
        System.out.println("Original medium of the material, e.g. vinyl, Audio-CD, Super8 or BetaMax AS Long === " + jMetaDataGeneral.getOriginalSourceMediumAsLong());
        System.out.println("Original medium of the material, e.g. vinyl, Audio-CD, Super8 or BetaMax AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceMediumAsLocalDateTime());
        System.out.println("Original medium of the material, e.g. vinyl, Audio-CD, Super8 or BetaMax AS LocalTime === " + jMetaDataGeneral.getOriginalSourceMediumAsLocalTime());
        System.out.println("Original medium of the material, e.g. vinyl, Audio-CD, Super8 or BetaMax AS String === " + jMetaDataGeneral.getOriginalSourceMediumAsString());
        System.out.println("Original medium of the material, e.g. vinyl, Audio-CD, Super8 or BetaMax AS Boolean === " + jMetaDataGeneral.getOriginalSourceMediumAsBoolean());
        System.out.println("Original medium of the material, e.g. vinyl, Audio-CD, Super8 or BetaMax AS BigInteger === " + jMetaDataGeneral.getOriginalSourceMediumAsBigInteger());
        System.out.println("Original medium of the material, e.g. vinyl, Audio-CD, Super8 or BetaMax AS URL === " + jMetaDataGeneral.getOriginalSourceMediumAsURL());
        System.out.println("File name only AS Integer === " + jMetaDataGeneral.getFileNameAsInteger());
        System.out.println("File name only AS Long === " + jMetaDataGeneral.getFileNameAsLong());
        System.out.println("File name only AS LocalDateTime === " + jMetaDataGeneral.getFileNameAsLocalDateTime());
        System.out.println("File name only AS LocalTime === " + jMetaDataGeneral.getFileNameAsLocalTime());
        System.out.println("File name only AS String === " + jMetaDataGeneral.getFileNameAsString());
        System.out.println("File name only AS Boolean === " + jMetaDataGeneral.getFileNameAsBoolean());
        System.out.println("File name only AS BigInteger === " + jMetaDataGeneral.getFileNameAsBigInteger());
        System.out.println("File name only AS URL === " + jMetaDataGeneral.getFileNameAsURL());
        System.out.println("Comic/Position_Total AS Integer === " + jMetaDataGeneral.getComicPositionTotalAsInteger());
        System.out.println("Comic/Position_Total AS Long === " + jMetaDataGeneral.getComicPositionTotalAsLong());
        System.out.println("Comic/Position_Total AS LocalDateTime === " + jMetaDataGeneral.getComicPositionTotalAsLocalDateTime());
        System.out.println("Comic/Position_Total AS LocalTime === " + jMetaDataGeneral.getComicPositionTotalAsLocalTime());
        System.out.println("Comic/Position_Total AS String === " + jMetaDataGeneral.getComicPositionTotalAsString());
        System.out.println("Comic/Position_Total AS Boolean === " + jMetaDataGeneral.getComicPositionTotalAsBoolean());
        System.out.println("Comic/Position_Total AS BigInteger === " + jMetaDataGeneral.getComicPositionTotalAsBigInteger());
        System.out.println("Comic/Position_Total AS URL === " + jMetaDataGeneral.getComicPositionTotalAsURL());
        System.out.println("Main music-artist for a movie AS Integer === " + jMetaDataGeneral.getMusicByAsInteger());
        System.out.println("Main music-artist for a movie AS Long === " + jMetaDataGeneral.getMusicByAsLong());
        System.out.println("Main music-artist for a movie AS LocalDateTime === " + jMetaDataGeneral.getMusicByAsLocalDateTime());
        System.out.println("Main music-artist for a movie AS LocalTime === " + jMetaDataGeneral.getMusicByAsLocalTime());
        System.out.println("Main music-artist for a movie AS String === " + jMetaDataGeneral.getMusicByAsString());
        System.out.println("Main music-artist for a movie AS Boolean === " + jMetaDataGeneral.getMusicByAsBoolean());
        System.out.println("Main music-artist for a movie AS BigInteger === " + jMetaDataGeneral.getMusicByAsBigInteger());
        System.out.println("Main music-artist for a movie AS URL === " + jMetaDataGeneral.getMusicByAsURL());
        System.out.println("The time/date/year that the composition of the music/script began. AS Integer === " + jMetaDataGeneral.getWrittenDateAsInteger());
        System.out.println("The time/date/year that the composition of the music/script began. AS Long === " + jMetaDataGeneral.getWrittenDateAsLong());
        System.out.println("The time/date/year that the composition of the music/script began. AS LocalDateTime === " + jMetaDataGeneral.getWrittenDateAsLocalDateTime());
        System.out.println("The time/date/year that the composition of the music/script began. AS LocalTime === " + jMetaDataGeneral.getWrittenDateAsLocalTime());
        System.out.println("The time/date/year that the composition of the music/script began. AS String === " + jMetaDataGeneral.getWrittenDateAsString());
        System.out.println("The time/date/year that the composition of the music/script began. AS Boolean === " + jMetaDataGeneral.getWrittenDateAsBoolean());
        System.out.println("The time/date/year that the composition of the music/script began. AS BigInteger === " + jMetaDataGeneral.getWrittenDateAsBigInteger());
        System.out.println("The time/date/year that the composition of the music/script began. AS URL === " + jMetaDataGeneral.getWrittenDateAsURL());
        System.out.println("The time that the file was modified on the file system AS Integer === " + jMetaDataGeneral.getFileModifiedDateAsInteger());
        System.out.println("The time that the file was modified on the file system AS Long === " + jMetaDataGeneral.getFileModifiedDateAsLong());
        System.out.println("The time that the file was modified on the file system AS LocalDateTime === " + jMetaDataGeneral.getFileModifiedDateAsLocalDateTime());
        System.out.println("The time that the file was modified on the file system AS LocalTime === " + jMetaDataGeneral.getFileModifiedDateAsLocalTime());
        System.out.println("The time that the file was modified on the file system AS String === " + jMetaDataGeneral.getFileModifiedDateAsString());
        System.out.println("The time that the file was modified on the file system AS Boolean === " + jMetaDataGeneral.getFileModifiedDateAsBoolean());
        System.out.println("The time that the file was modified on the file system AS BigInteger === " + jMetaDataGeneral.getFileModifiedDateAsBigInteger());
        System.out.println("The time that the file was modified on the file system AS URL === " + jMetaDataGeneral.getFileModifiedDateAsURL());
        System.out.println("Version of encoding-software AS Integer === " + jMetaDataGeneral.getEncodedLibraryVersionAsInteger());
        System.out.println("Version of encoding-software AS Long === " + jMetaDataGeneral.getEncodedLibraryVersionAsLong());
        System.out.println("Version of encoding-software AS LocalDateTime === " + jMetaDataGeneral.getEncodedLibraryVersionAsLocalDateTime());
        System.out.println("Version of encoding-software AS LocalTime === " + jMetaDataGeneral.getEncodedLibraryVersionAsLocalTime());
        System.out.println("Version of encoding-software AS String === " + jMetaDataGeneral.getEncodedLibraryVersionAsString());
        System.out.println("Version of encoding-software AS Boolean === " + jMetaDataGeneral.getEncodedLibraryVersionAsBoolean());
        System.out.println("Version of encoding-software AS BigInteger === " + jMetaDataGeneral.getEncodedLibraryVersionAsBigInteger());
        System.out.println("Version of encoding-software AS URL === " + jMetaDataGeneral.getEncodedLibraryVersionAsURL());
        System.out.println("Info about this codec AS Integer === " + jMetaDataGeneral.getCodecIDInfoAsInteger());
        System.out.println("Info about this codec AS Long === " + jMetaDataGeneral.getCodecIDInfoAsLong());
        System.out.println("Info about this codec AS LocalDateTime === " + jMetaDataGeneral.getCodecIDInfoAsLocalDateTime());
        System.out.println("Info about this codec AS LocalTime === " + jMetaDataGeneral.getCodecIDInfoAsLocalTime());
        System.out.println("Info about this codec AS String === " + jMetaDataGeneral.getCodecIDInfoAsString());
        System.out.println("Info about this codec AS Boolean === " + jMetaDataGeneral.getCodecIDInfoAsBoolean());
        System.out.println("Info about this codec AS BigInteger === " + jMetaDataGeneral.getCodecIDInfoAsBigInteger());
        System.out.println("Info about this codec AS URL === " + jMetaDataGeneral.getCodecIDInfoAsURL());
        System.out.println("Stream size in bytes AS Integer === " + jMetaDataGeneral.getStreamSizeAsInteger());
        System.out.println("Stream size in bytes AS Long === " + jMetaDataGeneral.getStreamSizeAsLong());
        System.out.println("Stream size in bytes AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeAsLocalDateTime());
        System.out.println("Stream size in bytes AS LocalTime === " + jMetaDataGeneral.getStreamSizeAsLocalTime());
        System.out.println("Stream size in bytes AS String === " + jMetaDataGeneral.getStreamSizeAsString());
        System.out.println("Stream size in bytes AS Boolean === " + jMetaDataGeneral.getStreamSizeAsBoolean());
        System.out.println("Stream size in bytes AS BigInteger === " + jMetaDataGeneral.getStreamSizeAsBigInteger());
        System.out.println("Stream size in bytes AS URL === " + jMetaDataGeneral.getStreamSizeAsURL());
        System.out.println("Name of the season, e.g. Strawars first Trilogy, Season 1 AS Integer === " + jMetaDataGeneral.getSeasonAsInteger());
        System.out.println("Name of the season, e.g. Strawars first Trilogy, Season 1 AS Long === " + jMetaDataGeneral.getSeasonAsLong());
        System.out.println("Name of the season, e.g. Strawars first Trilogy, Season 1 AS LocalDateTime === " + jMetaDataGeneral.getSeasonAsLocalDateTime());
        System.out.println("Name of the season, e.g. Strawars first Trilogy, Season 1 AS LocalTime === " + jMetaDataGeneral.getSeasonAsLocalTime());
        System.out.println("Name of the season, e.g. Strawars first Trilogy, Season 1 AS String === " + jMetaDataGeneral.getSeasonAsString());
        System.out.println("Name of the season, e.g. Strawars first Trilogy, Season 1 AS Boolean === " + jMetaDataGeneral.getSeasonAsBoolean());
        System.out.println("Name of the season, e.g. Strawars first Trilogy, Season 1 AS BigInteger === " + jMetaDataGeneral.getSeasonAsBigInteger());
        System.out.println("Name of the season, e.g. Strawars first Trilogy, Season 1 AS URL === " + jMetaDataGeneral.getSeasonAsURL());
        System.out.println("The name of the costume designer. AS Integer === " + jMetaDataGeneral.getCostumeDesignerAsInteger());
        System.out.println("The name of the costume designer. AS Long === " + jMetaDataGeneral.getCostumeDesignerAsLong());
        System.out.println("The name of the costume designer. AS LocalDateTime === " + jMetaDataGeneral.getCostumeDesignerAsLocalDateTime());
        System.out.println("The name of the costume designer. AS LocalTime === " + jMetaDataGeneral.getCostumeDesignerAsLocalTime());
        System.out.println("The name of the costume designer. AS String === " + jMetaDataGeneral.getCostumeDesignerAsString());
        System.out.println("The name of the costume designer. AS Boolean === " + jMetaDataGeneral.getCostumeDesignerAsBoolean());
        System.out.println("The name of the costume designer. AS BigInteger === " + jMetaDataGeneral.getCostumeDesignerAsBigInteger());
        System.out.println("The name of the costume designer. AS URL === " + jMetaDataGeneral.getCostumeDesignerAsURL());
        System.out.println("Original artist(s)/performer(s). AS Integer === " + jMetaDataGeneral.getOriginalPerformerAsInteger());
        System.out.println("Original artist(s)/performer(s). AS Long === " + jMetaDataGeneral.getOriginalPerformerAsLong());
        System.out.println("Original artist(s)/performer(s). AS LocalDateTime === " + jMetaDataGeneral.getOriginalPerformerAsLocalDateTime());
        System.out.println("Original artist(s)/performer(s). AS LocalTime === " + jMetaDataGeneral.getOriginalPerformerAsLocalTime());
        System.out.println("Original artist(s)/performer(s). AS String === " + jMetaDataGeneral.getOriginalPerformerAsString());
        System.out.println("Original artist(s)/performer(s). AS Boolean === " + jMetaDataGeneral.getOriginalPerformerAsBoolean());
        System.out.println("Original artist(s)/performer(s). AS BigInteger === " + jMetaDataGeneral.getOriginalPerformerAsBigInteger());
        System.out.println("Original artist(s)/performer(s). AS URL === " + jMetaDataGeneral.getOriginalPerformerAsURL());
        System.out.println("Other formats in this file with popular name (hint), separated by / AS Integer === " + jMetaDataGeneral.getOtherFormatWithHintListAsInteger());
        System.out.println("Other formats in this file with popular name (hint), separated by / AS Long === " + jMetaDataGeneral.getOtherFormatWithHintListAsLong());
        System.out.println("Other formats in this file with popular name (hint), separated by / AS LocalDateTime === " + jMetaDataGeneral.getOtherFormatWithHintListAsLocalDateTime());
        System.out.println("Other formats in this file with popular name (hint), separated by / AS LocalTime === " + jMetaDataGeneral.getOtherFormatWithHintListAsLocalTime());
        System.out.println("Other formats in this file with popular name (hint), separated by / AS String === " + jMetaDataGeneral.getOtherFormatWithHintListAsString());
        System.out.println("Other formats in this file with popular name (hint), separated by / AS Boolean === " + jMetaDataGeneral.getOtherFormatWithHintListAsBoolean());
        System.out.println("Other formats in this file with popular name (hint), separated by / AS BigInteger === " + jMetaDataGeneral.getOtherFormatWithHintListAsBigInteger());
        System.out.println("Other formats in this file with popular name (hint), separated by / AS URL === " + jMetaDataGeneral.getOtherFormatWithHintListAsURL());
        System.out.println("Info about this Format AS Integer === " + jMetaDataGeneral.getFormatInfoAsInteger());
        System.out.println("Info about this Format AS Long === " + jMetaDataGeneral.getFormatInfoAsLong());
        System.out.println("Info about this Format AS LocalDateTime === " + jMetaDataGeneral.getFormatInfoAsLocalDateTime());
        System.out.println("Info about this Format AS LocalTime === " + jMetaDataGeneral.getFormatInfoAsLocalTime());
        System.out.println("Info about this Format AS String === " + jMetaDataGeneral.getFormatInfoAsString());
        System.out.println("Info about this Format AS Boolean === " + jMetaDataGeneral.getFormatInfoAsBoolean());
        System.out.println("Info about this Format AS BigInteger === " + jMetaDataGeneral.getFormatInfoAsBigInteger());
        System.out.println("Info about this Format AS URL === " + jMetaDataGeneral.getFormatInfoAsURL());
        System.out.println("If Audio and video are muxed AS Integer === " + jMetaDataGeneral.getInterleavedAsInteger());
        System.out.println("If Audio and video are muxed AS Long === " + jMetaDataGeneral.getInterleavedAsLong());
        System.out.println("If Audio and video are muxed AS LocalDateTime === " + jMetaDataGeneral.getInterleavedAsLocalDateTime());
        System.out.println("If Audio and video are muxed AS LocalTime === " + jMetaDataGeneral.getInterleavedAsLocalTime());
        System.out.println("If Audio and video are muxed AS String === " + jMetaDataGeneral.getInterleavedAsString());
        System.out.println("If Audio and video are muxed AS Boolean === " + jMetaDataGeneral.getInterleavedAsBoolean());
        System.out.println("If Audio and video are muxed AS BigInteger === " + jMetaDataGeneral.getInterleavedAsBigInteger());
        System.out.println("If Audio and video are muxed AS URL === " + jMetaDataGeneral.getInterleavedAsURL());
        System.out.println("A link to more details about this codec ID AS Integer === " + jMetaDataGeneral.getCodecIDUrlAsInteger());
        System.out.println("A link to more details about this codec ID AS Long === " + jMetaDataGeneral.getCodecIDUrlAsLong());
        System.out.println("A link to more details about this codec ID AS LocalDateTime === " + jMetaDataGeneral.getCodecIDUrlAsLocalDateTime());
        System.out.println("A link to more details about this codec ID AS LocalTime === " + jMetaDataGeneral.getCodecIDUrlAsLocalTime());
        System.out.println("A link to more details about this codec ID AS String === " + jMetaDataGeneral.getCodecIDUrlAsString());
        System.out.println("A link to more details about this codec ID AS Boolean === " + jMetaDataGeneral.getCodecIDUrlAsBoolean());
        System.out.println("A link to more details about this codec ID AS BigInteger === " + jMetaDataGeneral.getCodecIDUrlAsBigInteger());
        System.out.println("A link to more details about this codec ID AS URL === " + jMetaDataGeneral.getCodecIDUrlAsURL());
        System.out.println("Encryption_Mode AS Integer === " + jMetaDataGeneral.getEncryptionModeAsInteger());
        System.out.println("Encryption_Mode AS Long === " + jMetaDataGeneral.getEncryptionModeAsLong());
        System.out.println("Encryption_Mode AS LocalDateTime === " + jMetaDataGeneral.getEncryptionModeAsLocalDateTime());
        System.out.println("Encryption_Mode AS LocalTime === " + jMetaDataGeneral.getEncryptionModeAsLocalTime());
        System.out.println("Encryption_Mode AS String === " + jMetaDataGeneral.getEncryptionModeAsString());
        System.out.println("Encryption_Mode AS Boolean === " + jMetaDataGeneral.getEncryptionModeAsBoolean());
        System.out.println("Encryption_Mode AS BigInteger === " + jMetaDataGeneral.getEncryptionModeAsBigInteger());
        System.out.println("Encryption_Mode AS URL === " + jMetaDataGeneral.getEncryptionModeAsURL());
        System.out.println("Location that the item was originaly designed/written. Information should be stored in the following format: country code, state/province, city where the coutry code is the same 2 octets as in Internet domains, or possibly ISO-3166. e.g. US, Texas, Austin or US, , Austin. AS Integer === " + jMetaDataGeneral.getWrittenLocationAsInteger());
        System.out.println("Location that the item was originaly designed/written. Information should be stored in the following format: country code, state/province, city where the coutry code is the same 2 octets as in Internet domains, or possibly ISO-3166. e.g. US, Texas, Austin or US, , Austin. AS Long === " + jMetaDataGeneral.getWrittenLocationAsLong());
        System.out.println("Location that the item was originaly designed/written. Information should be stored in the following format: country code, state/province, city where the coutry code is the same 2 octets as in Internet domains, or possibly ISO-3166. e.g. US, Texas, Austin or US, , Austin. AS LocalDateTime === " + jMetaDataGeneral.getWrittenLocationAsLocalDateTime());
        System.out.println("Location that the item was originaly designed/written. Information should be stored in the following format: country code, state/province, city where the coutry code is the same 2 octets as in Internet domains, or possibly ISO-3166. e.g. US, Texas, Austin or US, , Austin. AS LocalTime === " + jMetaDataGeneral.getWrittenLocationAsLocalTime());
        System.out.println("Location that the item was originaly designed/written. Information should be stored in the following format: country code, state/province, city where the coutry code is the same 2 octets as in Internet domains, or possibly ISO-3166. e.g. US, Texas, Austin or US, , Austin. AS String === " + jMetaDataGeneral.getWrittenLocationAsString());
        System.out.println("Location that the item was originaly designed/written. Information should be stored in the following format: country code, state/province, city where the coutry code is the same 2 octets as in Internet domains, or possibly ISO-3166. e.g. US, Texas, Austin or US, , Austin. AS Boolean === " + jMetaDataGeneral.getWrittenLocationAsBoolean());
        System.out.println("Location that the item was originaly designed/written. Information should be stored in the following format: country code, state/province, city where the coutry code is the same 2 octets as in Internet domains, or possibly ISO-3166. e.g. US, Texas, Austin or US, , Austin. AS BigInteger === " + jMetaDataGeneral.getWrittenLocationAsBigInteger());
        System.out.println("Location that the item was originaly designed/written. Information should be stored in the following format: country code, state/province, city where the coutry code is the same 2 octets as in Internet domains, or possibly ISO-3166. e.g. US, Texas, Austin or US, , Austin. AS URL === " + jMetaDataGeneral.getWrittenLocationAsURL());
        System.out.println("Specifies the size of the original subject of the file. eg 8.5 in h, 11 in w AS Integer === " + jMetaDataGeneral.getDimensionsAsInteger());
        System.out.println("Specifies the size of the original subject of the file. eg 8.5 in h, 11 in w AS Long === " + jMetaDataGeneral.getDimensionsAsLong());
        System.out.println("Specifies the size of the original subject of the file. eg 8.5 in h, 11 in w AS LocalDateTime === " + jMetaDataGeneral.getDimensionsAsLocalDateTime());
        System.out.println("Specifies the size of the original subject of the file. eg 8.5 in h, 11 in w AS LocalTime === " + jMetaDataGeneral.getDimensionsAsLocalTime());
        System.out.println("Specifies the size of the original subject of the file. eg 8.5 in h, 11 in w AS String === " + jMetaDataGeneral.getDimensionsAsString());
        System.out.println("Specifies the size of the original subject of the file. eg 8.5 in h, 11 in w AS Boolean === " + jMetaDataGeneral.getDimensionsAsBoolean());
        System.out.println("Specifies the size of the original subject of the file. eg 8.5 in h, 11 in w AS BigInteger === " + jMetaDataGeneral.getDimensionsAsBigInteger());
        System.out.println("Specifies the size of the original subject of the file. eg 8.5 in h, 11 in w AS URL === " + jMetaDataGeneral.getDimensionsAsURL());
        System.out.println("Name of the organization publishing the album (i.e. the 'record label') or movie. AS Integer === " + jMetaDataGeneral.getPublisherAsInteger());
        System.out.println("Name of the organization publishing the album (i.e. the 'record label') or movie. AS Long === " + jMetaDataGeneral.getPublisherAsLong());
        System.out.println("Name of the organization publishing the album (i.e. the 'record label') or movie. AS LocalDateTime === " + jMetaDataGeneral.getPublisherAsLocalDateTime());
        System.out.println("Name of the organization publishing the album (i.e. the 'record label') or movie. AS LocalTime === " + jMetaDataGeneral.getPublisherAsLocalTime());
        System.out.println("Name of the organization publishing the album (i.e. the 'record label') or movie. AS String === " + jMetaDataGeneral.getPublisherAsString());
        System.out.println("Name of the organization publishing the album (i.e. the 'record label') or movie. AS Boolean === " + jMetaDataGeneral.getPublisherAsBoolean());
        System.out.println("Name of the organization publishing the album (i.e. the 'record label') or movie. AS BigInteger === " + jMetaDataGeneral.getPublisherAsBigInteger());
        System.out.println("Name of the organization publishing the album (i.e. the 'record label') or movie. AS URL === " + jMetaDataGeneral.getPublisherAsURL());
        System.out.println("Cover_Type AS Integer === " + jMetaDataGeneral.getCoverTypeAsInteger());
        System.out.println("Cover_Type AS Long === " + jMetaDataGeneral.getCoverTypeAsLong());
        System.out.println("Cover_Type AS LocalDateTime === " + jMetaDataGeneral.getCoverTypeAsLocalDateTime());
        System.out.println("Cover_Type AS LocalTime === " + jMetaDataGeneral.getCoverTypeAsLocalTime());
        System.out.println("Cover_Type AS String === " + jMetaDataGeneral.getCoverTypeAsString());
        System.out.println("Cover_Type AS Boolean === " + jMetaDataGeneral.getCoverTypeAsBoolean());
        System.out.println("Cover_Type AS BigInteger === " + jMetaDataGeneral.getCoverTypeAsBigInteger());
        System.out.println("Cover_Type AS URL === " + jMetaDataGeneral.getCoverTypeAsURL());
        System.out.println("Operating System of encoding-software AS Integer === " + jMetaDataGeneral.getEncodedOperatingSystemAsInteger());
        System.out.println("Operating System of encoding-software AS Long === " + jMetaDataGeneral.getEncodedOperatingSystemAsLong());
        System.out.println("Operating System of encoding-software AS LocalDateTime === " + jMetaDataGeneral.getEncodedOperatingSystemAsLocalDateTime());
        System.out.println("Operating System of encoding-software AS LocalTime === " + jMetaDataGeneral.getEncodedOperatingSystemAsLocalTime());
        System.out.println("Operating System of encoding-software AS String === " + jMetaDataGeneral.getEncodedOperatingSystemAsString());
        System.out.println("Operating System of encoding-software AS Boolean === " + jMetaDataGeneral.getEncodedOperatingSystemAsBoolean());
        System.out.println("Operating System of encoding-software AS BigInteger === " + jMetaDataGeneral.getEncodedOperatingSystemAsBigInteger());
        System.out.println("Operating System of encoding-software AS URL === " + jMetaDataGeneral.getEncodedOperatingSystemAsURL());
        System.out.println("Name of the company AS Integer === " + jMetaDataGeneral.getEncodedApplicationCompanyNameAsInteger());
        System.out.println("Name of the company AS Long === " + jMetaDataGeneral.getEncodedApplicationCompanyNameAsLong());
        System.out.println("Name of the company AS LocalDateTime === " + jMetaDataGeneral.getEncodedApplicationCompanyNameAsLocalDateTime());
        System.out.println("Name of the company AS LocalTime === " + jMetaDataGeneral.getEncodedApplicationCompanyNameAsLocalTime());
        System.out.println("Name of the company AS String === " + jMetaDataGeneral.getEncodedApplicationCompanyNameAsString());
        System.out.println("Name of the company AS Boolean === " + jMetaDataGeneral.getEncodedApplicationCompanyNameAsBoolean());
        System.out.println("Name of the company AS BigInteger === " + jMetaDataGeneral.getEncodedApplicationCompanyNameAsBigInteger());
        System.out.println("Name of the company AS URL === " + jMetaDataGeneral.getEncodedApplicationCompanyNameAsURL());
        System.out.println("Is there a cover AS Integer === " + jMetaDataGeneral.getCoverAsInteger());
        System.out.println("Is there a cover AS Long === " + jMetaDataGeneral.getCoverAsLong());
        System.out.println("Is there a cover AS LocalDateTime === " + jMetaDataGeneral.getCoverAsLocalDateTime());
        System.out.println("Is there a cover AS LocalTime === " + jMetaDataGeneral.getCoverAsLocalTime());
        System.out.println("Is there a cover AS String === " + jMetaDataGeneral.getCoverAsString());
        System.out.println("Is there a cover AS Boolean === " + jMetaDataGeneral.getCoverAsBoolean());
        System.out.println("Is there a cover AS BigInteger === " + jMetaDataGeneral.getCoverAsBigInteger());
        System.out.println("Is there a cover AS URL === " + jMetaDataGeneral.getCoverAsURL());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Integer === " + jMetaDataGeneral.getFormatCommercialIfAnyAsInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Long === " + jMetaDataGeneral.getFormatCommercialIfAnyAsLong());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalDateTime === " + jMetaDataGeneral.getFormatCommercialIfAnyAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS LocalTime === " + jMetaDataGeneral.getFormatCommercialIfAnyAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS String === " + jMetaDataGeneral.getFormatCommercialIfAnyAsString());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS Boolean === " + jMetaDataGeneral.getFormatCommercialIfAnyAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS BigInteger === " + jMetaDataGeneral.getFormatCommercialIfAnyAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings if there is one AS URL === " + jMetaDataGeneral.getFormatCommercialIfAnyAsURL());
        System.out.println("The time/date/year that the tags were done for this item. AS Integer === " + jMetaDataGeneral.getTaggedDateAsInteger());
        System.out.println("The time/date/year that the tags were done for this item. AS Long === " + jMetaDataGeneral.getTaggedDateAsLong());
        System.out.println("The time/date/year that the tags were done for this item. AS LocalDateTime === " + jMetaDataGeneral.getTaggedDateAsLocalDateTime());
        System.out.println("The time/date/year that the tags were done for this item. AS LocalTime === " + jMetaDataGeneral.getTaggedDateAsLocalTime());
        System.out.println("The time/date/year that the tags were done for this item. AS String === " + jMetaDataGeneral.getTaggedDateAsString());
        System.out.println("The time/date/year that the tags were done for this item. AS Boolean === " + jMetaDataGeneral.getTaggedDateAsBoolean());
        System.out.println("The time/date/year that the tags were done for this item. AS BigInteger === " + jMetaDataGeneral.getTaggedDateAsBigInteger());
        System.out.println("The time/date/year that the tags were done for this item. AS URL === " + jMetaDataGeneral.getTaggedDateAsURL());
        System.out.println("Name of the product the file was originally intended for AS Integer === " + jMetaDataGeneral.getOriginalSourceFormNameAsInteger());
        System.out.println("Name of the product the file was originally intended for AS Long === " + jMetaDataGeneral.getOriginalSourceFormNameAsLong());
        System.out.println("Name of the product the file was originally intended for AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceFormNameAsLocalDateTime());
        System.out.println("Name of the product the file was originally intended for AS LocalTime === " + jMetaDataGeneral.getOriginalSourceFormNameAsLocalTime());
        System.out.println("Name of the product the file was originally intended for AS String === " + jMetaDataGeneral.getOriginalSourceFormNameAsString());
        System.out.println("Name of the product the file was originally intended for AS Boolean === " + jMetaDataGeneral.getOriginalSourceFormNameAsBoolean());
        System.out.println("Name of the product the file was originally intended for AS BigInteger === " + jMetaDataGeneral.getOriginalSourceFormNameAsBigInteger());
        System.out.println("Name of the product the file was originally intended for AS URL === " + jMetaDataGeneral.getOriginalSourceFormNameAsURL());
        System.out.println("Album performer/artist of this file AS Integer === " + jMetaDataGeneral.getAlbumPerformerAsInteger());
        System.out.println("Album performer/artist of this file AS Long === " + jMetaDataGeneral.getAlbumPerformerAsLong());
        System.out.println("Album performer/artist of this file AS LocalDateTime === " + jMetaDataGeneral.getAlbumPerformerAsLocalDateTime());
        System.out.println("Album performer/artist of this file AS LocalTime === " + jMetaDataGeneral.getAlbumPerformerAsLocalTime());
        System.out.println("Album performer/artist of this file AS String === " + jMetaDataGeneral.getAlbumPerformerAsString());
        System.out.println("Album performer/artist of this file AS Boolean === " + jMetaDataGeneral.getAlbumPerformerAsBoolean());
        System.out.println("Album performer/artist of this file AS BigInteger === " + jMetaDataGeneral.getAlbumPerformerAsBigInteger());
        System.out.println("Album performer/artist of this file AS URL === " + jMetaDataGeneral.getAlbumPerformerAsURL());
        System.out.println("A very general tag for everyone else that wants to be listed. AS Integer === " + jMetaDataGeneral.getThanksToAsInteger());
        System.out.println("A very general tag for everyone else that wants to be listed. AS Long === " + jMetaDataGeneral.getThanksToAsLong());
        System.out.println("A very general tag for everyone else that wants to be listed. AS LocalDateTime === " + jMetaDataGeneral.getThanksToAsLocalDateTime());
        System.out.println("A very general tag for everyone else that wants to be listed. AS LocalTime === " + jMetaDataGeneral.getThanksToAsLocalTime());
        System.out.println("A very general tag for everyone else that wants to be listed. AS String === " + jMetaDataGeneral.getThanksToAsString());
        System.out.println("A very general tag for everyone else that wants to be listed. AS Boolean === " + jMetaDataGeneral.getThanksToAsBoolean());
        System.out.println("A very general tag for everyone else that wants to be listed. AS BigInteger === " + jMetaDataGeneral.getThanksToAsBigInteger());
        System.out.println("A very general tag for everyone else that wants to be listed. AS URL === " + jMetaDataGeneral.getThanksToAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataGeneral.getIDStringAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataGeneral.getIDStringAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataGeneral.getIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataGeneral.getIDStringAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataGeneral.getIDStringAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataGeneral.getIDStringAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataGeneral.getIDStringAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataGeneral.getIDStringAsURL());
        System.out.println("Comic_More AS Integer === " + jMetaDataGeneral.getComicMoreAsInteger());
        System.out.println("Comic_More AS Long === " + jMetaDataGeneral.getComicMoreAsLong());
        System.out.println("Comic_More AS LocalDateTime === " + jMetaDataGeneral.getComicMoreAsLocalDateTime());
        System.out.println("Comic_More AS LocalTime === " + jMetaDataGeneral.getComicMoreAsLocalTime());
        System.out.println("Comic_More AS String === " + jMetaDataGeneral.getComicMoreAsString());
        System.out.println("Comic_More AS Boolean === " + jMetaDataGeneral.getComicMoreAsBoolean());
        System.out.println("Comic_More AS BigInteger === " + jMetaDataGeneral.getComicMoreAsBigInteger());
        System.out.println("Comic_More AS URL === " + jMetaDataGeneral.getComicMoreAsURL());
        System.out.println("The person responsible for designing the Overall visual appearance of a movie. AS Integer === " + jMetaDataGeneral.getProductionDesignerAsInteger());
        System.out.println("The person responsible for designing the Overall visual appearance of a movie. AS Long === " + jMetaDataGeneral.getProductionDesignerAsLong());
        System.out.println("The person responsible for designing the Overall visual appearance of a movie. AS LocalDateTime === " + jMetaDataGeneral.getProductionDesignerAsLocalDateTime());
        System.out.println("The person responsible for designing the Overall visual appearance of a movie. AS LocalTime === " + jMetaDataGeneral.getProductionDesignerAsLocalTime());
        System.out.println("The person responsible for designing the Overall visual appearance of a movie. AS String === " + jMetaDataGeneral.getProductionDesignerAsString());
        System.out.println("The person responsible for designing the Overall visual appearance of a movie. AS Boolean === " + jMetaDataGeneral.getProductionDesignerAsBoolean());
        System.out.println("The person responsible for designing the Overall visual appearance of a movie. AS BigInteger === " + jMetaDataGeneral.getProductionDesignerAsBigInteger());
        System.out.println("The person responsible for designing the Overall visual appearance of a movie. AS URL === " + jMetaDataGeneral.getProductionDesignerAsURL());
        System.out.println("The time/date/year that the encoding of this item was completed began. AS Integer === " + jMetaDataGeneral.getEncodedDateAsInteger());
        System.out.println("The time/date/year that the encoding of this item was completed began. AS Long === " + jMetaDataGeneral.getEncodedDateAsLong());
        System.out.println("The time/date/year that the encoding of this item was completed began. AS LocalDateTime === " + jMetaDataGeneral.getEncodedDateAsLocalDateTime());
        System.out.println("The time/date/year that the encoding of this item was completed began. AS LocalTime === " + jMetaDataGeneral.getEncodedDateAsLocalTime());
        System.out.println("The time/date/year that the encoding of this item was completed began. AS String === " + jMetaDataGeneral.getEncodedDateAsString());
        System.out.println("The time/date/year that the encoding of this item was completed began. AS Boolean === " + jMetaDataGeneral.getEncodedDateAsBoolean());
        System.out.println("The time/date/year that the encoding of this item was completed began. AS BigInteger === " + jMetaDataGeneral.getEncodedDateAsBigInteger());
        System.out.println("The time/date/year that the encoding of this item was completed began. AS URL === " + jMetaDataGeneral.getEncodedDateAsURL());
        System.out.println("ServiceChannel AS Integer === " + jMetaDataGeneral.getServiceChannelAsInteger());
        System.out.println("ServiceChannel AS Long === " + jMetaDataGeneral.getServiceChannelAsLong());
        System.out.println("ServiceChannel AS LocalDateTime === " + jMetaDataGeneral.getServiceChannelAsLocalDateTime());
        System.out.println("ServiceChannel AS LocalTime === " + jMetaDataGeneral.getServiceChannelAsLocalTime());
        System.out.println("ServiceChannel AS String === " + jMetaDataGeneral.getServiceChannelAsString());
        System.out.println("ServiceChannel AS Boolean === " + jMetaDataGeneral.getServiceChannelAsBoolean());
        System.out.println("ServiceChannel AS BigInteger === " + jMetaDataGeneral.getServiceChannelAsBigInteger());
        System.out.println("ServiceChannel AS URL === " + jMetaDataGeneral.getServiceChannelAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataGeneral.getUniqueIDAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataGeneral.getUniqueIDAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataGeneral.getUniqueIDAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataGeneral.getUniqueIDAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataGeneral.getUniqueIDAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataGeneral.getUniqueIDAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataGeneral.getUniqueIDAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataGeneral.getUniqueIDAsURL());
        System.out.println("format : HH:MM:SS.MMM AS Integer === " + jMetaDataGeneral.getDelayString3AsInteger());
        System.out.println("format : HH:MM:SS.MMM AS Long === " + jMetaDataGeneral.getDelayString3AsLong());
        System.out.println("format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataGeneral.getDelayString3AsLocalDateTime());
        System.out.println("format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataGeneral.getDelayString3AsLocalTime());
        System.out.println("format : HH:MM:SS.MMM AS String === " + jMetaDataGeneral.getDelayString3AsString());
        System.out.println("format : HH:MM:SS.MMM AS Boolean === " + jMetaDataGeneral.getDelayString3AsBoolean());
        System.out.println("format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataGeneral.getDelayString3AsBigInteger());
        System.out.println("format : HH:MM:SS.MMM AS URL === " + jMetaDataGeneral.getDelayString3AsURL());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataGeneral.getDelayString4AsInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataGeneral.getDelayString4AsLong());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataGeneral.getDelayString4AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataGeneral.getDelayString4AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataGeneral.getDelayString4AsString());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataGeneral.getDelayString4AsBoolean());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataGeneral.getDelayString4AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataGeneral.getDelayString4AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataGeneral.getDelayString1AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataGeneral.getDelayString1AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataGeneral.getDelayString1AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataGeneral.getDelayString1AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataGeneral.getDelayString1AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataGeneral.getDelayString1AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataGeneral.getDelayString1AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataGeneral.getDelayString1AsURL());
        System.out.println("Delay with measurement AS Integer === " + jMetaDataGeneral.getDelayString2AsInteger());
        System.out.println("Delay with measurement AS Long === " + jMetaDataGeneral.getDelayString2AsLong());
        System.out.println("Delay with measurement AS LocalDateTime === " + jMetaDataGeneral.getDelayString2AsLocalDateTime());
        System.out.println("Delay with measurement AS LocalTime === " + jMetaDataGeneral.getDelayString2AsLocalTime());
        System.out.println("Delay with measurement AS String === " + jMetaDataGeneral.getDelayString2AsString());
        System.out.println("Delay with measurement AS Boolean === " + jMetaDataGeneral.getDelayString2AsBoolean());
        System.out.println("Delay with measurement AS BigInteger === " + jMetaDataGeneral.getDelayString2AsBigInteger());
        System.out.println("Delay with measurement AS URL === " + jMetaDataGeneral.getDelayString2AsURL());
        System.out.println("Brand or trademark associated with the marketing of music recordings and music videos. AS Integer === " + jMetaDataGeneral.getLabelAsInteger());
        System.out.println("Brand or trademark associated with the marketing of music recordings and music videos. AS Long === " + jMetaDataGeneral.getLabelAsLong());
        System.out.println("Brand or trademark associated with the marketing of music recordings and music videos. AS LocalDateTime === " + jMetaDataGeneral.getLabelAsLocalDateTime());
        System.out.println("Brand or trademark associated with the marketing of music recordings and music videos. AS LocalTime === " + jMetaDataGeneral.getLabelAsLocalTime());
        System.out.println("Brand or trademark associated with the marketing of music recordings and music videos. AS String === " + jMetaDataGeneral.getLabelAsString());
        System.out.println("Brand or trademark associated with the marketing of music recordings and music videos. AS Boolean === " + jMetaDataGeneral.getLabelAsBoolean());
        System.out.println("Brand or trademark associated with the marketing of music recordings and music videos. AS BigInteger === " + jMetaDataGeneral.getLabelAsBigInteger());
        System.out.println("Brand or trademark associated with the marketing of music recordings and music videos. AS URL === " + jMetaDataGeneral.getLabelAsURL());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataGeneral.getDelayString5AsInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataGeneral.getDelayString5AsLong());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataGeneral.getDelayString5AsLocalDateTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataGeneral.getDelayString5AsLocalTime());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataGeneral.getDelayString5AsString());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataGeneral.getDelayString5AsBoolean());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataGeneral.getDelayString5AsBigInteger());
        System.out.println("Delay in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataGeneral.getDelayString5AsURL());
        System.out.println("Link to a site about this track AS Integer === " + jMetaDataGeneral.getTrackUrlAsInteger());
        System.out.println("Link to a site about this track AS Long === " + jMetaDataGeneral.getTrackUrlAsLong());
        System.out.println("Link to a site about this track AS LocalDateTime === " + jMetaDataGeneral.getTrackUrlAsLocalDateTime());
        System.out.println("Link to a site about this track AS LocalTime === " + jMetaDataGeneral.getTrackUrlAsLocalTime());
        System.out.println("Link to a site about this track AS String === " + jMetaDataGeneral.getTrackUrlAsString());
        System.out.println("Link to a site about this track AS Boolean === " + jMetaDataGeneral.getTrackUrlAsBoolean());
        System.out.println("Link to a site about this track AS BigInteger === " + jMetaDataGeneral.getTrackUrlAsBigInteger());
        System.out.println("Link to a site about this track AS URL === " + jMetaDataGeneral.getTrackUrlAsURL());
        System.out.println("Original name of the part in the original support AS Integer === " + jMetaDataGeneral.getOriginalPartAsInteger());
        System.out.println("Original name of the part in the original support AS Long === " + jMetaDataGeneral.getOriginalPartAsLong());
        System.out.println("Original name of the part in the original support AS LocalDateTime === " + jMetaDataGeneral.getOriginalPartAsLocalDateTime());
        System.out.println("Original name of the part in the original support AS LocalTime === " + jMetaDataGeneral.getOriginalPartAsLocalTime());
        System.out.println("Original name of the part in the original support AS String === " + jMetaDataGeneral.getOriginalPartAsString());
        System.out.println("Original name of the part in the original support AS Boolean === " + jMetaDataGeneral.getOriginalPartAsBoolean());
        System.out.println("Original name of the part in the original support AS BigInteger === " + jMetaDataGeneral.getOriginalPartAsBigInteger());
        System.out.println("Original name of the part in the original support AS URL === " + jMetaDataGeneral.getOriginalPartAsURL());
        System.out.println("Encryption_Padding AS Integer === " + jMetaDataGeneral.getEncryptionPaddingAsInteger());
        System.out.println("Encryption_Padding AS Long === " + jMetaDataGeneral.getEncryptionPaddingAsLong());
        System.out.println("Encryption_Padding AS LocalDateTime === " + jMetaDataGeneral.getEncryptionPaddingAsLocalDateTime());
        System.out.println("Encryption_Padding AS LocalTime === " + jMetaDataGeneral.getEncryptionPaddingAsLocalTime());
        System.out.println("Encryption_Padding AS String === " + jMetaDataGeneral.getEncryptionPaddingAsString());
        System.out.println("Encryption_Padding AS Boolean === " + jMetaDataGeneral.getEncryptionPaddingAsBoolean());
        System.out.println("Encryption_Padding AS BigInteger === " + jMetaDataGeneral.getEncryptionPaddingAsBigInteger());
        System.out.println("Encryption_Padding AS URL === " + jMetaDataGeneral.getEncryptionPaddingAsURL());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Integer === " + jMetaDataGeneral.getDelayAsInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Long === " + jMetaDataGeneral.getDelayAsLong());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalDateTime === " + jMetaDataGeneral.getDelayAsLocalDateTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS LocalTime === " + jMetaDataGeneral.getDelayAsLocalTime());
        System.out.println("Delay fixed in the stream (relative) IN MS AS String === " + jMetaDataGeneral.getDelayAsString());
        System.out.println("Delay fixed in the stream (relative) IN MS AS Boolean === " + jMetaDataGeneral.getDelayAsBoolean());
        System.out.println("Delay fixed in the stream (relative) IN MS AS BigInteger === " + jMetaDataGeneral.getDelayAsBigInteger());
        System.out.println("Delay fixed in the stream (relative) IN MS AS URL === " + jMetaDataGeneral.getDelayAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Integer === " + jMetaDataGeneral.getEncodedApplicationUrlAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Long === " + jMetaDataGeneral.getEncodedApplicationUrlAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS LocalDateTime === " + jMetaDataGeneral.getEncodedApplicationUrlAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS LocalTime === " + jMetaDataGeneral.getEncodedApplicationUrlAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS String === " + jMetaDataGeneral.getEncodedApplicationUrlAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS Boolean === " + jMetaDataGeneral.getEncodedApplicationUrlAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS BigInteger === " + jMetaDataGeneral.getEncodedApplicationUrlAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit. AS URL === " + jMetaDataGeneral.getEncodedApplicationUrlAsURL());
        System.out.println("Cover_Mime AS Integer === " + jMetaDataGeneral.getCoverMimeAsInteger());
        System.out.println("Cover_Mime AS Long === " + jMetaDataGeneral.getCoverMimeAsLong());
        System.out.println("Cover_Mime AS LocalDateTime === " + jMetaDataGeneral.getCoverMimeAsLocalDateTime());
        System.out.println("Cover_Mime AS LocalTime === " + jMetaDataGeneral.getCoverMimeAsLocalTime());
        System.out.println("Cover_Mime AS String === " + jMetaDataGeneral.getCoverMimeAsString());
        System.out.println("Cover_Mime AS Boolean === " + jMetaDataGeneral.getCoverMimeAsBoolean());
        System.out.println("Cover_Mime AS BigInteger === " + jMetaDataGeneral.getCoverMimeAsBigInteger());
        System.out.println("Cover_Mime AS URL === " + jMetaDataGeneral.getCoverMimeAsURL());
        System.out.println("DataSize AS Integer === " + jMetaDataGeneral.getDataSizeAsInteger());
        System.out.println("DataSize AS Long === " + jMetaDataGeneral.getDataSizeAsLong());
        System.out.println("DataSize AS LocalDateTime === " + jMetaDataGeneral.getDataSizeAsLocalDateTime());
        System.out.println("DataSize AS LocalTime === " + jMetaDataGeneral.getDataSizeAsLocalTime());
        System.out.println("DataSize AS String === " + jMetaDataGeneral.getDataSizeAsString());
        System.out.println("DataSize AS Boolean === " + jMetaDataGeneral.getDataSizeAsBoolean());
        System.out.println("DataSize AS BigInteger === " + jMetaDataGeneral.getDataSizeAsBigInteger());
        System.out.println("DataSize AS URL === " + jMetaDataGeneral.getDataSizeAsURL());
        System.out.println("Software used to create the file AS Integer === " + jMetaDataGeneral.getEncodedLibraryAsInteger());
        System.out.println("Software used to create the file AS Long === " + jMetaDataGeneral.getEncodedLibraryAsLong());
        System.out.println("Software used to create the file AS LocalDateTime === " + jMetaDataGeneral.getEncodedLibraryAsLocalDateTime());
        System.out.println("Software used to create the file AS LocalTime === " + jMetaDataGeneral.getEncodedLibraryAsLocalTime());
        System.out.println("Software used to create the file AS String === " + jMetaDataGeneral.getEncodedLibraryAsString());
        System.out.println("Software used to create the file AS Boolean === " + jMetaDataGeneral.getEncodedLibraryAsBoolean());
        System.out.println("Software used to create the file AS BigInteger === " + jMetaDataGeneral.getEncodedLibraryAsBigInteger());
        System.out.println("Software used to create the file AS URL === " + jMetaDataGeneral.getEncodedLibraryAsURL());
        System.out.println("Number of the part AS Integer === " + jMetaDataGeneral.getPartPositionAsInteger());
        System.out.println("Number of the part AS Long === " + jMetaDataGeneral.getPartPositionAsLong());
        System.out.println("Number of the part AS LocalDateTime === " + jMetaDataGeneral.getPartPositionAsLocalDateTime());
        System.out.println("Number of the part AS LocalTime === " + jMetaDataGeneral.getPartPositionAsLocalTime());
        System.out.println("Number of the part AS String === " + jMetaDataGeneral.getPartPositionAsString());
        System.out.println("Number of the part AS Boolean === " + jMetaDataGeneral.getPartPositionAsBoolean());
        System.out.println("Number of the part AS BigInteger === " + jMetaDataGeneral.getPartPositionAsBigInteger());
        System.out.println("Number of the part AS URL === " + jMetaDataGeneral.getPartPositionAsURL());
        System.out.println("Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) AS Integer === " + jMetaDataGeneral.getCompleteNameLastAsInteger());
        System.out.println("Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) AS Long === " + jMetaDataGeneral.getCompleteNameLastAsLong());
        System.out.println("Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) AS LocalDateTime === " + jMetaDataGeneral.getCompleteNameLastAsLocalDateTime());
        System.out.println("Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) AS LocalTime === " + jMetaDataGeneral.getCompleteNameLastAsLocalTime());
        System.out.println("Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) AS String === " + jMetaDataGeneral.getCompleteNameLastAsString());
        System.out.println("Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) AS Boolean === " + jMetaDataGeneral.getCompleteNameLastAsBoolean());
        System.out.println("Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) AS BigInteger === " + jMetaDataGeneral.getCompleteNameLastAsBigInteger());
        System.out.println("Complete name (Folder+Name+Extension) of the last file (in the case of a sequence of files) AS URL === " + jMetaDataGeneral.getCompleteNameLastAsURL());
        System.out.println("Text of a song AS Integer === " + jMetaDataGeneral.getLyricsAsInteger());
        System.out.println("Text of a song AS Long === " + jMetaDataGeneral.getLyricsAsLong());
        System.out.println("Text of a song AS LocalDateTime === " + jMetaDataGeneral.getLyricsAsLocalDateTime());
        System.out.println("Text of a song AS LocalTime === " + jMetaDataGeneral.getLyricsAsLocalTime());
        System.out.println("Text of a song AS String === " + jMetaDataGeneral.getLyricsAsString());
        System.out.println("Text of a song AS Boolean === " + jMetaDataGeneral.getLyricsAsBoolean());
        System.out.println("Text of a song AS BigInteger === " + jMetaDataGeneral.getLyricsAsBigInteger());
        System.out.println("Text of a song AS URL === " + jMetaDataGeneral.getLyricsAsURL());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Integer === " + jMetaDataGeneral.getInternetMediaTypeAsInteger());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Long === " + jMetaDataGeneral.getInternetMediaTypeAsLong());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS LocalDateTime === " + jMetaDataGeneral.getInternetMediaTypeAsLocalDateTime());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS LocalTime === " + jMetaDataGeneral.getInternetMediaTypeAsLocalTime());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS String === " + jMetaDataGeneral.getInternetMediaTypeAsString());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS Boolean === " + jMetaDataGeneral.getInternetMediaTypeAsBoolean());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS BigInteger === " + jMetaDataGeneral.getInternetMediaTypeAsBigInteger());
        System.out.println("Internet Media Type (aka MIME Type, Content-Type) AS URL === " + jMetaDataGeneral.getInternetMediaTypeAsURL());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS Integer === " + jMetaDataGeneral.getLawRatingAsInteger());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS Long === " + jMetaDataGeneral.getLawRatingAsLong());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS LocalDateTime === " + jMetaDataGeneral.getLawRatingAsLocalDateTime());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS LocalTime === " + jMetaDataGeneral.getLawRatingAsLocalTime());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS String === " + jMetaDataGeneral.getLawRatingAsString());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS Boolean === " + jMetaDataGeneral.getLawRatingAsBoolean());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS BigInteger === " + jMetaDataGeneral.getLawRatingAsBigInteger());
        System.out.println("Depending on the country it's the format of the rating of a movie (P, R, X in the USA, an age in other countries or a URI defining a logo). AS URL === " + jMetaDataGeneral.getLawRatingAsURL());
        System.out.println("Frames per second, denominator AS Integer === " + jMetaDataGeneral.getFrameRateDenAsInteger());
        System.out.println("Frames per second, denominator AS Long === " + jMetaDataGeneral.getFrameRateDenAsLong());
        System.out.println("Frames per second, denominator AS LocalDateTime === " + jMetaDataGeneral.getFrameRateDenAsLocalDateTime());
        System.out.println("Frames per second, denominator AS LocalTime === " + jMetaDataGeneral.getFrameRateDenAsLocalTime());
        System.out.println("Frames per second, denominator AS String === " + jMetaDataGeneral.getFrameRateDenAsString());
        System.out.println("Frames per second, denominator AS Boolean === " + jMetaDataGeneral.getFrameRateDenAsBoolean());
        System.out.println("Frames per second, denominator AS BigInteger === " + jMetaDataGeneral.getFrameRateDenAsBigInteger());
        System.out.println("Frames per second, denominator AS URL === " + jMetaDataGeneral.getFrameRateDenAsURL());
        System.out.println("Encryption_Method AS Integer === " + jMetaDataGeneral.getEncryptionMethodAsInteger());
        System.out.println("Encryption_Method AS Long === " + jMetaDataGeneral.getEncryptionMethodAsLong());
        System.out.println("Encryption_Method AS LocalDateTime === " + jMetaDataGeneral.getEncryptionMethodAsLocalDateTime());
        System.out.println("Encryption_Method AS LocalTime === " + jMetaDataGeneral.getEncryptionMethodAsLocalTime());
        System.out.println("Encryption_Method AS String === " + jMetaDataGeneral.getEncryptionMethodAsString());
        System.out.println("Encryption_Method AS Boolean === " + jMetaDataGeneral.getEncryptionMethodAsBoolean());
        System.out.println("Encryption_Method AS BigInteger === " + jMetaDataGeneral.getEncryptionMethodAsBigInteger());
        System.out.println("Encryption_Method AS URL === " + jMetaDataGeneral.getEncryptionMethodAsURL());
        System.out.println("The name of the director of photography, also known as cinematographer. AS Integer === " + jMetaDataGeneral.getDirectorOfPhotographyAsInteger());
        System.out.println("The name of the director of photography, also known as cinematographer. AS Long === " + jMetaDataGeneral.getDirectorOfPhotographyAsLong());
        System.out.println("The name of the director of photography, also known as cinematographer. AS LocalDateTime === " + jMetaDataGeneral.getDirectorOfPhotographyAsLocalDateTime());
        System.out.println("The name of the director of photography, also known as cinematographer. AS LocalTime === " + jMetaDataGeneral.getDirectorOfPhotographyAsLocalTime());
        System.out.println("The name of the director of photography, also known as cinematographer. AS String === " + jMetaDataGeneral.getDirectorOfPhotographyAsString());
        System.out.println("The name of the director of photography, also known as cinematographer. AS Boolean === " + jMetaDataGeneral.getDirectorOfPhotographyAsBoolean());
        System.out.println("The name of the director of photography, also known as cinematographer. AS BigInteger === " + jMetaDataGeneral.getDirectorOfPhotographyAsBigInteger());
        System.out.println("The name of the director of photography, also known as cinematographer. AS URL === " + jMetaDataGeneral.getDirectorOfPhotographyAsURL());
        System.out.println("Audio Codecs in this file,separated by / AS Integer === " + jMetaDataGeneral.getAudioFormatListAsInteger());
        System.out.println("Audio Codecs in this file,separated by / AS Long === " + jMetaDataGeneral.getAudioFormatListAsLong());
        System.out.println("Audio Codecs in this file,separated by / AS LocalDateTime === " + jMetaDataGeneral.getAudioFormatListAsLocalDateTime());
        System.out.println("Audio Codecs in this file,separated by / AS LocalTime === " + jMetaDataGeneral.getAudioFormatListAsLocalTime());
        System.out.println("Audio Codecs in this file,separated by / AS String === " + jMetaDataGeneral.getAudioFormatListAsString());
        System.out.println("Audio Codecs in this file,separated by / AS Boolean === " + jMetaDataGeneral.getAudioFormatListAsBoolean());
        System.out.println("Audio Codecs in this file,separated by / AS BigInteger === " + jMetaDataGeneral.getAudioFormatListAsBigInteger());
        System.out.println("Audio Codecs in this file,separated by / AS URL === " + jMetaDataGeneral.getAudioFormatListAsURL());
        System.out.println("Other formats in this file, separated by / AS Integer === " + jMetaDataGeneral.getOtherFormatListAsInteger());
        System.out.println("Other formats in this file, separated by / AS Long === " + jMetaDataGeneral.getOtherFormatListAsLong());
        System.out.println("Other formats in this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getOtherFormatListAsLocalDateTime());
        System.out.println("Other formats in this file, separated by / AS LocalTime === " + jMetaDataGeneral.getOtherFormatListAsLocalTime());
        System.out.println("Other formats in this file, separated by / AS String === " + jMetaDataGeneral.getOtherFormatListAsString());
        System.out.println("Other formats in this file, separated by / AS Boolean === " + jMetaDataGeneral.getOtherFormatListAsBoolean());
        System.out.println("Other formats in this file, separated by / AS BigInteger === " + jMetaDataGeneral.getOtherFormatListAsBigInteger());
        System.out.println("Other formats in this file, separated by / AS URL === " + jMetaDataGeneral.getOtherFormatListAsURL());
        System.out.println("The person who arranged the piece. e.g. Ravel. AS Integer === " + jMetaDataGeneral.getArrangerAsInteger());
        System.out.println("The person who arranged the piece. e.g. Ravel. AS Long === " + jMetaDataGeneral.getArrangerAsLong());
        System.out.println("The person who arranged the piece. e.g. Ravel. AS LocalDateTime === " + jMetaDataGeneral.getArrangerAsLocalDateTime());
        System.out.println("The person who arranged the piece. e.g. Ravel. AS LocalTime === " + jMetaDataGeneral.getArrangerAsLocalTime());
        System.out.println("The person who arranged the piece. e.g. Ravel. AS String === " + jMetaDataGeneral.getArrangerAsString());
        System.out.println("The person who arranged the piece. e.g. Ravel. AS Boolean === " + jMetaDataGeneral.getArrangerAsBoolean());
        System.out.println("The person who arranged the piece. e.g. Ravel. AS BigInteger === " + jMetaDataGeneral.getArrangerAsBigInteger());
        System.out.println("The person who arranged the piece. e.g. Ravel. AS URL === " + jMetaDataGeneral.getArrangerAsURL());
        System.out.println("The person who oversees the artists and craftspeople who build the sets. AS Integer === " + jMetaDataGeneral.getArtDirectorAsInteger());
        System.out.println("The person who oversees the artists and craftspeople who build the sets. AS Long === " + jMetaDataGeneral.getArtDirectorAsLong());
        System.out.println("The person who oversees the artists and craftspeople who build the sets. AS LocalDateTime === " + jMetaDataGeneral.getArtDirectorAsLocalDateTime());
        System.out.println("The person who oversees the artists and craftspeople who build the sets. AS LocalTime === " + jMetaDataGeneral.getArtDirectorAsLocalTime());
        System.out.println("The person who oversees the artists and craftspeople who build the sets. AS String === " + jMetaDataGeneral.getArtDirectorAsString());
        System.out.println("The person who oversees the artists and craftspeople who build the sets. AS Boolean === " + jMetaDataGeneral.getArtDirectorAsBoolean());
        System.out.println("The person who oversees the artists and craftspeople who build the sets. AS BigInteger === " + jMetaDataGeneral.getArtDirectorAsBigInteger());
        System.out.println("The person who oversees the artists and craftspeople who build the sets. AS URL === " + jMetaDataGeneral.getArtDirectorAsURL());
        System.out.println("Number of the Season AS Integer === " + jMetaDataGeneral.getSeasonPositionAsInteger());
        System.out.println("Number of the Season AS Long === " + jMetaDataGeneral.getSeasonPositionAsLong());
        System.out.println("Number of the Season AS LocalDateTime === " + jMetaDataGeneral.getSeasonPositionAsLocalDateTime());
        System.out.println("Number of the Season AS LocalTime === " + jMetaDataGeneral.getSeasonPositionAsLocalTime());
        System.out.println("Number of the Season AS String === " + jMetaDataGeneral.getSeasonPositionAsString());
        System.out.println("Number of the Season AS Boolean === " + jMetaDataGeneral.getSeasonPositionAsBoolean());
        System.out.println("Number of the Season AS BigInteger === " + jMetaDataGeneral.getSeasonPositionAsBigInteger());
        System.out.println("Number of the Season AS URL === " + jMetaDataGeneral.getSeasonPositionAsURL());
        System.out.println("Number of colors requested when digitizing, e.g. 256 for images or 32 bit RGB for video AS Integer === " + jMetaDataGeneral.getOriginalSourceFormNumColorsAsInteger());
        System.out.println("Number of colors requested when digitizing, e.g. 256 for images or 32 bit RGB for video AS Long === " + jMetaDataGeneral.getOriginalSourceFormNumColorsAsLong());
        System.out.println("Number of colors requested when digitizing, e.g. 256 for images or 32 bit RGB for video AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceFormNumColorsAsLocalDateTime());
        System.out.println("Number of colors requested when digitizing, e.g. 256 for images or 32 bit RGB for video AS LocalTime === " + jMetaDataGeneral.getOriginalSourceFormNumColorsAsLocalTime());
        System.out.println("Number of colors requested when digitizing, e.g. 256 for images or 32 bit RGB for video AS String === " + jMetaDataGeneral.getOriginalSourceFormNumColorsAsString());
        System.out.println("Number of colors requested when digitizing, e.g. 256 for images or 32 bit RGB for video AS Boolean === " + jMetaDataGeneral.getOriginalSourceFormNumColorsAsBoolean());
        System.out.println("Number of colors requested when digitizing, e.g. 256 for images or 32 bit RGB for video AS BigInteger === " + jMetaDataGeneral.getOriginalSourceFormNumColorsAsBigInteger());
        System.out.println("Number of colors requested when digitizing, e.g. 256 for images or 32 bit RGB for video AS URL === " + jMetaDataGeneral.getOriginalSourceFormNumColorsAsURL());
        System.out.println("Play time of the stream in ms AS Integer === " + jMetaDataGeneral.getDurationAsInteger());
        System.out.println("Play time of the stream in ms AS Long === " + jMetaDataGeneral.getDurationAsLong());
        System.out.println("Play time of the stream in ms AS LocalDateTime === " + jMetaDataGeneral.getDurationAsLocalDateTime());
        System.out.println("Play time of the stream in ms AS LocalTime === " + jMetaDataGeneral.getDurationAsLocalTime());
        System.out.println("Play time of the stream in ms AS String === " + jMetaDataGeneral.getDurationAsString());
        System.out.println("Play time of the stream in ms AS Boolean === " + jMetaDataGeneral.getDurationAsBoolean());
        System.out.println("Play time of the stream in ms AS BigInteger === " + jMetaDataGeneral.getDurationAsBigInteger());
        System.out.println("Play time of the stream in ms AS URL === " + jMetaDataGeneral.getDurationAsURL());
        System.out.println("Nationality of the main composer of the item, mostly for classical music. AS Integer === " + jMetaDataGeneral.getComposerNationalityAsInteger());
        System.out.println("Nationality of the main composer of the item, mostly for classical music. AS Long === " + jMetaDataGeneral.getComposerNationalityAsLong());
        System.out.println("Nationality of the main composer of the item, mostly for classical music. AS LocalDateTime === " + jMetaDataGeneral.getComposerNationalityAsLocalDateTime());
        System.out.println("Nationality of the main composer of the item, mostly for classical music. AS LocalTime === " + jMetaDataGeneral.getComposerNationalityAsLocalTime());
        System.out.println("Nationality of the main composer of the item, mostly for classical music. AS String === " + jMetaDataGeneral.getComposerNationalityAsString());
        System.out.println("Nationality of the main composer of the item, mostly for classical music. AS Boolean === " + jMetaDataGeneral.getComposerNationalityAsBoolean());
        System.out.println("Nationality of the main composer of the item, mostly for classical music. AS BigInteger === " + jMetaDataGeneral.getComposerNationalityAsBigInteger());
        System.out.println("Nationality of the main composer of the item, mostly for classical music. AS URL === " + jMetaDataGeneral.getComposerNationalityAsURL());
        System.out.println("A hint/popular name for this codec AS Integer === " + jMetaDataGeneral.getCodecIDHintAsInteger());
        System.out.println("A hint/popular name for this codec AS Long === " + jMetaDataGeneral.getCodecIDHintAsLong());
        System.out.println("A hint/popular name for this codec AS LocalDateTime === " + jMetaDataGeneral.getCodecIDHintAsLocalDateTime());
        System.out.println("A hint/popular name for this codec AS LocalTime === " + jMetaDataGeneral.getCodecIDHintAsLocalTime());
        System.out.println("A hint/popular name for this codec AS String === " + jMetaDataGeneral.getCodecIDHintAsString());
        System.out.println("A hint/popular name for this codec AS Boolean === " + jMetaDataGeneral.getCodecIDHintAsBoolean());
        System.out.println("A hint/popular name for this codec AS BigInteger === " + jMetaDataGeneral.getCodecIDHintAsBigInteger());
        System.out.println("A hint/popular name for this codec AS URL === " + jMetaDataGeneral.getCodecIDHintAsURL());
        System.out.println("Service/Url AS Integer === " + jMetaDataGeneral.getServiceUrlAsInteger());
        System.out.println("Service/Url AS Long === " + jMetaDataGeneral.getServiceUrlAsLong());
        System.out.println("Service/Url AS LocalDateTime === " + jMetaDataGeneral.getServiceUrlAsLocalDateTime());
        System.out.println("Service/Url AS LocalTime === " + jMetaDataGeneral.getServiceUrlAsLocalTime());
        System.out.println("Service/Url AS String === " + jMetaDataGeneral.getServiceUrlAsString());
        System.out.println("Service/Url AS Boolean === " + jMetaDataGeneral.getServiceUrlAsBoolean());
        System.out.println("Service/Url AS BigInteger === " + jMetaDataGeneral.getServiceUrlAsBigInteger());
        System.out.println("Service/Url AS URL === " + jMetaDataGeneral.getServiceUrlAsURL());
        System.out.println("Name of the person or organisation that encoded/ripped the audio file. AS Integer === " + jMetaDataGeneral.getEncodedByAsInteger());
        System.out.println("Name of the person or organisation that encoded/ripped the audio file. AS Long === " + jMetaDataGeneral.getEncodedByAsLong());
        System.out.println("Name of the person or organisation that encoded/ripped the audio file. AS LocalDateTime === " + jMetaDataGeneral.getEncodedByAsLocalDateTime());
        System.out.println("Name of the person or organisation that encoded/ripped the audio file. AS LocalTime === " + jMetaDataGeneral.getEncodedByAsLocalTime());
        System.out.println("Name of the person or organisation that encoded/ripped the audio file. AS String === " + jMetaDataGeneral.getEncodedByAsString());
        System.out.println("Name of the person or organisation that encoded/ripped the audio file. AS Boolean === " + jMetaDataGeneral.getEncodedByAsBoolean());
        System.out.println("Name of the person or organisation that encoded/ripped the audio file. AS BigInteger === " + jMetaDataGeneral.getEncodedByAsBigInteger());
        System.out.println("Name of the person or organisation that encoded/ripped the audio file. AS URL === " + jMetaDataGeneral.getEncodedByAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Integer === " + jMetaDataGeneral.getEncodedApplicationAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Long === " + jMetaDataGeneral.getEncodedApplicationAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS LocalDateTime === " + jMetaDataGeneral.getEncodedApplicationAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS LocalTime === " + jMetaDataGeneral.getEncodedApplicationAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS String === " + jMetaDataGeneral.getEncodedApplicationAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS Boolean === " + jMetaDataGeneral.getEncodedApplicationAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS BigInteger === " + jMetaDataGeneral.getEncodedApplicationAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit AS URL === " + jMetaDataGeneral.getEncodedApplicationAsURL());
        System.out.println("ServiceName AS Integer === " + jMetaDataGeneral.getServiceNameAsInteger());
        System.out.println("ServiceName AS Long === " + jMetaDataGeneral.getServiceNameAsLong());
        System.out.println("ServiceName AS LocalDateTime === " + jMetaDataGeneral.getServiceNameAsLocalDateTime());
        System.out.println("ServiceName AS LocalTime === " + jMetaDataGeneral.getServiceNameAsLocalTime());
        System.out.println("ServiceName AS String === " + jMetaDataGeneral.getServiceNameAsString());
        System.out.println("ServiceName AS Boolean === " + jMetaDataGeneral.getServiceNameAsBoolean());
        System.out.println("ServiceName AS BigInteger === " + jMetaDataGeneral.getServiceNameAsBigInteger());
        System.out.println("ServiceName AS URL === " + jMetaDataGeneral.getServiceNameAsURL());
        System.out.println("ServiceProvider AS Integer === " + jMetaDataGeneral.getServiceProviderAsInteger());
        System.out.println("ServiceProvider AS Long === " + jMetaDataGeneral.getServiceProviderAsLong());
        System.out.println("ServiceProvider AS LocalDateTime === " + jMetaDataGeneral.getServiceProviderAsLocalDateTime());
        System.out.println("ServiceProvider AS LocalTime === " + jMetaDataGeneral.getServiceProviderAsLocalTime());
        System.out.println("ServiceProvider AS String === " + jMetaDataGeneral.getServiceProviderAsString());
        System.out.println("ServiceProvider AS Boolean === " + jMetaDataGeneral.getServiceProviderAsBoolean());
        System.out.println("ServiceProvider AS BigInteger === " + jMetaDataGeneral.getServiceProviderAsBigInteger());
        System.out.println("ServiceProvider AS URL === " + jMetaDataGeneral.getServiceProviderAsURL());
        System.out.println("Image languages in this file, separated by / AS Integer === " + jMetaDataGeneral.getImageLanguageListAsInteger());
        System.out.println("Image languages in this file, separated by / AS Long === " + jMetaDataGeneral.getImageLanguageListAsLong());
        System.out.println("Image languages in this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getImageLanguageListAsLocalDateTime());
        System.out.println("Image languages in this file, separated by / AS LocalTime === " + jMetaDataGeneral.getImageLanguageListAsLocalTime());
        System.out.println("Image languages in this file, separated by / AS String === " + jMetaDataGeneral.getImageLanguageListAsString());
        System.out.println("Image languages in this file, separated by / AS Boolean === " + jMetaDataGeneral.getImageLanguageListAsBoolean());
        System.out.println("Image languages in this file, separated by / AS BigInteger === " + jMetaDataGeneral.getImageLanguageListAsBigInteger());
        System.out.println("Image languages in this file, separated by / AS URL === " + jMetaDataGeneral.getImageLanguageListAsURL());
        System.out.println("StreamSize/String2 AS Integer === " + jMetaDataGeneral.getStreamSizeString2AsInteger());
        System.out.println("StreamSize/String2 AS Long === " + jMetaDataGeneral.getStreamSizeString2AsLong());
        System.out.println("StreamSize/String2 AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeString2AsLocalDateTime());
        System.out.println("StreamSize/String2 AS LocalTime === " + jMetaDataGeneral.getStreamSizeString2AsLocalTime());
        System.out.println("StreamSize/String2 AS String === " + jMetaDataGeneral.getStreamSizeString2AsString());
        System.out.println("StreamSize/String2 AS Boolean === " + jMetaDataGeneral.getStreamSizeString2AsBoolean());
        System.out.println("StreamSize/String2 AS BigInteger === " + jMetaDataGeneral.getStreamSizeString2AsBigInteger());
        System.out.println("StreamSize/String2 AS URL === " + jMetaDataGeneral.getStreamSizeString2AsURL());
        System.out.println("The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists. AS Integer === " + jMetaDataGeneral.getConductorAsInteger());
        System.out.println("The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists. AS Long === " + jMetaDataGeneral.getConductorAsLong());
        System.out.println("The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists. AS LocalDateTime === " + jMetaDataGeneral.getConductorAsLocalDateTime());
        System.out.println("The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists. AS LocalTime === " + jMetaDataGeneral.getConductorAsLocalTime());
        System.out.println("The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists. AS String === " + jMetaDataGeneral.getConductorAsString());
        System.out.println("The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists. AS Boolean === " + jMetaDataGeneral.getConductorAsBoolean());
        System.out.println("The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists. AS BigInteger === " + jMetaDataGeneral.getConductorAsBigInteger());
        System.out.println("The artist(s) who performed the work. In classical music this would be the conductor, orchestra, soloists. AS URL === " + jMetaDataGeneral.getConductorAsURL());
        System.out.println("The time that the file was created on the file system AS Integer === " + jMetaDataGeneral.getFileCreatedDateAsInteger());
        System.out.println("The time that the file was created on the file system AS Long === " + jMetaDataGeneral.getFileCreatedDateAsLong());
        System.out.println("The time that the file was created on the file system AS LocalDateTime === " + jMetaDataGeneral.getFileCreatedDateAsLocalDateTime());
        System.out.println("The time that the file was created on the file system AS LocalTime === " + jMetaDataGeneral.getFileCreatedDateAsLocalTime());
        System.out.println("The time that the file was created on the file system AS String === " + jMetaDataGeneral.getFileCreatedDateAsString());
        System.out.println("The time that the file was created on the file system AS Boolean === " + jMetaDataGeneral.getFileCreatedDateAsBoolean());
        System.out.println("The time that the file was created on the file system AS BigInteger === " + jMetaDataGeneral.getFileCreatedDateAsBigInteger());
        System.out.println("The time that the file was created on the file system AS URL === " + jMetaDataGeneral.getFileCreatedDateAsURL());
        System.out.println("Location, where an item is archived, e.eg. Louvre,Paris,France AS Integer === " + jMetaDataGeneral.getArchivalLocationAsInteger());
        System.out.println("Location, where an item is archived, e.eg. Louvre,Paris,France AS Long === " + jMetaDataGeneral.getArchivalLocationAsLong());
        System.out.println("Location, where an item is archived, e.eg. Louvre,Paris,France AS LocalDateTime === " + jMetaDataGeneral.getArchivalLocationAsLocalDateTime());
        System.out.println("Location, where an item is archived, e.eg. Louvre,Paris,France AS LocalTime === " + jMetaDataGeneral.getArchivalLocationAsLocalTime());
        System.out.println("Location, where an item is archived, e.eg. Louvre,Paris,France AS String === " + jMetaDataGeneral.getArchivalLocationAsString());
        System.out.println("Location, where an item is archived, e.eg. Louvre,Paris,France AS Boolean === " + jMetaDataGeneral.getArchivalLocationAsBoolean());
        System.out.println("Location, where an item is archived, e.eg. Louvre,Paris,France AS BigInteger === " + jMetaDataGeneral.getArchivalLocationAsBigInteger());
        System.out.println("Location, where an item is archived, e.eg. Louvre,Paris,France AS URL === " + jMetaDataGeneral.getArchivalLocationAsURL());
        System.out.println("ServiceProviderr/Url AS Integer === " + jMetaDataGeneral.getServiceProviderrUrlAsInteger());
        System.out.println("ServiceProviderr/Url AS Long === " + jMetaDataGeneral.getServiceProviderrUrlAsLong());
        System.out.println("ServiceProviderr/Url AS LocalDateTime === " + jMetaDataGeneral.getServiceProviderrUrlAsLocalDateTime());
        System.out.println("ServiceProviderr/Url AS LocalTime === " + jMetaDataGeneral.getServiceProviderrUrlAsLocalTime());
        System.out.println("ServiceProviderr/Url AS String === " + jMetaDataGeneral.getServiceProviderrUrlAsString());
        System.out.println("ServiceProviderr/Url AS Boolean === " + jMetaDataGeneral.getServiceProviderrUrlAsBoolean());
        System.out.println("ServiceProviderr/Url AS BigInteger === " + jMetaDataGeneral.getServiceProviderrUrlAsBigInteger());
        System.out.println("ServiceProviderr/Url AS URL === " + jMetaDataGeneral.getServiceProviderrUrlAsURL());
        System.out.println("StreamSize/String1 AS Integer === " + jMetaDataGeneral.getStreamSizeString1AsInteger());
        System.out.println("StreamSize/String1 AS Long === " + jMetaDataGeneral.getStreamSizeString1AsLong());
        System.out.println("StreamSize/String1 AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeString1AsLocalDateTime());
        System.out.println("StreamSize/String1 AS LocalTime === " + jMetaDataGeneral.getStreamSizeString1AsLocalTime());
        System.out.println("StreamSize/String1 AS String === " + jMetaDataGeneral.getStreamSizeString1AsString());
        System.out.println("StreamSize/String1 AS Boolean === " + jMetaDataGeneral.getStreamSizeString1AsBoolean());
        System.out.println("StreamSize/String1 AS BigInteger === " + jMetaDataGeneral.getStreamSizeString1AsBigInteger());
        System.out.println("StreamSize/String1 AS URL === " + jMetaDataGeneral.getStreamSizeString1AsURL());
        System.out.println("StreamSize/String4 AS Integer === " + jMetaDataGeneral.getStreamSizeString4AsInteger());
        System.out.println("StreamSize/String4 AS Long === " + jMetaDataGeneral.getStreamSizeString4AsLong());
        System.out.println("StreamSize/String4 AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeString4AsLocalDateTime());
        System.out.println("StreamSize/String4 AS LocalTime === " + jMetaDataGeneral.getStreamSizeString4AsLocalTime());
        System.out.println("StreamSize/String4 AS String === " + jMetaDataGeneral.getStreamSizeString4AsString());
        System.out.println("StreamSize/String4 AS Boolean === " + jMetaDataGeneral.getStreamSizeString4AsBoolean());
        System.out.println("StreamSize/String4 AS BigInteger === " + jMetaDataGeneral.getStreamSizeString4AsBigInteger());
        System.out.println("StreamSize/String4 AS URL === " + jMetaDataGeneral.getStreamSizeString4AsURL());
        System.out.println("Univers movies belong to, e.g. Starwars, Stargate, Buffy, Dragonballs AS Integer === " + jMetaDataGeneral.getDomainAsInteger());
        System.out.println("Univers movies belong to, e.g. Starwars, Stargate, Buffy, Dragonballs AS Long === " + jMetaDataGeneral.getDomainAsLong());
        System.out.println("Univers movies belong to, e.g. Starwars, Stargate, Buffy, Dragonballs AS LocalDateTime === " + jMetaDataGeneral.getDomainAsLocalDateTime());
        System.out.println("Univers movies belong to, e.g. Starwars, Stargate, Buffy, Dragonballs AS LocalTime === " + jMetaDataGeneral.getDomainAsLocalTime());
        System.out.println("Univers movies belong to, e.g. Starwars, Stargate, Buffy, Dragonballs AS String === " + jMetaDataGeneral.getDomainAsString());
        System.out.println("Univers movies belong to, e.g. Starwars, Stargate, Buffy, Dragonballs AS Boolean === " + jMetaDataGeneral.getDomainAsBoolean());
        System.out.println("Univers movies belong to, e.g. Starwars, Stargate, Buffy, Dragonballs AS BigInteger === " + jMetaDataGeneral.getDomainAsBigInteger());
        System.out.println("Univers movies belong to, e.g. Starwars, Stargate, Buffy, Dragonballs AS URL === " + jMetaDataGeneral.getDomainAsURL());
        System.out.println("Homepage of the performer/artist AS Integer === " + jMetaDataGeneral.getPerformerUrlAsInteger());
        System.out.println("Homepage of the performer/artist AS Long === " + jMetaDataGeneral.getPerformerUrlAsLong());
        System.out.println("Homepage of the performer/artist AS LocalDateTime === " + jMetaDataGeneral.getPerformerUrlAsLocalDateTime());
        System.out.println("Homepage of the performer/artist AS LocalTime === " + jMetaDataGeneral.getPerformerUrlAsLocalTime());
        System.out.println("Homepage of the performer/artist AS String === " + jMetaDataGeneral.getPerformerUrlAsString());
        System.out.println("Homepage of the performer/artist AS Boolean === " + jMetaDataGeneral.getPerformerUrlAsBoolean());
        System.out.println("Homepage of the performer/artist AS BigInteger === " + jMetaDataGeneral.getPerformerUrlAsBigInteger());
        System.out.println("Homepage of the performer/artist AS URL === " + jMetaDataGeneral.getPerformerUrlAsURL());
        System.out.println("Minimum Bit rate in bps AS Integer === " + jMetaDataGeneral.getOverallBitRateMinimumAsInteger());
        System.out.println("Minimum Bit rate in bps AS Long === " + jMetaDataGeneral.getOverallBitRateMinimumAsLong());
        System.out.println("Minimum Bit rate in bps AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateMinimumAsLocalDateTime());
        System.out.println("Minimum Bit rate in bps AS LocalTime === " + jMetaDataGeneral.getOverallBitRateMinimumAsLocalTime());
        System.out.println("Minimum Bit rate in bps AS String === " + jMetaDataGeneral.getOverallBitRateMinimumAsString());
        System.out.println("Minimum Bit rate in bps AS Boolean === " + jMetaDataGeneral.getOverallBitRateMinimumAsBoolean());
        System.out.println("Minimum Bit rate in bps AS BigInteger === " + jMetaDataGeneral.getOverallBitRateMinimumAsBigInteger());
        System.out.println("Minimum Bit rate in bps AS URL === " + jMetaDataGeneral.getOverallBitRateMinimumAsURL());
        System.out.println("StreamSize/String3 AS Integer === " + jMetaDataGeneral.getStreamSizeString3AsInteger());
        System.out.println("StreamSize/String3 AS Long === " + jMetaDataGeneral.getStreamSizeString3AsLong());
        System.out.println("StreamSize/String3 AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeString3AsLocalDateTime());
        System.out.println("StreamSize/String3 AS LocalTime === " + jMetaDataGeneral.getStreamSizeString3AsLocalTime());
        System.out.println("StreamSize/String3 AS String === " + jMetaDataGeneral.getStreamSizeString3AsString());
        System.out.println("StreamSize/String3 AS Boolean === " + jMetaDataGeneral.getStreamSizeString3AsBoolean());
        System.out.println("StreamSize/String3 AS BigInteger === " + jMetaDataGeneral.getStreamSizeString3AsBigInteger());
        System.out.println("StreamSize/String3 AS URL === " + jMetaDataGeneral.getStreamSizeString3AsURL());
        System.out.println("Publishers official webpage. AS Integer === " + jMetaDataGeneral.getPublisherURLAsInteger());
        System.out.println("Publishers official webpage. AS Long === " + jMetaDataGeneral.getPublisherURLAsLong());
        System.out.println("Publishers official webpage. AS LocalDateTime === " + jMetaDataGeneral.getPublisherURLAsLocalDateTime());
        System.out.println("Publishers official webpage. AS LocalTime === " + jMetaDataGeneral.getPublisherURLAsLocalTime());
        System.out.println("Publishers official webpage. AS String === " + jMetaDataGeneral.getPublisherURLAsString());
        System.out.println("Publishers official webpage. AS Boolean === " + jMetaDataGeneral.getPublisherURLAsBoolean());
        System.out.println("Publishers official webpage. AS BigInteger === " + jMetaDataGeneral.getPublisherURLAsBigInteger());
        System.out.println("Publishers official webpage. AS URL === " + jMetaDataGeneral.getPublisherURLAsURL());
        System.out.println("With proportion AS Integer === " + jMetaDataGeneral.getStreamSizeString5AsInteger());
        System.out.println("With proportion AS Long === " + jMetaDataGeneral.getStreamSizeString5AsLong());
        System.out.println("With proportion AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeString5AsLocalDateTime());
        System.out.println("With proportion AS LocalTime === " + jMetaDataGeneral.getStreamSizeString5AsLocalTime());
        System.out.println("With proportion AS String === " + jMetaDataGeneral.getStreamSizeString5AsString());
        System.out.println("With proportion AS Boolean === " + jMetaDataGeneral.getStreamSizeString5AsBoolean());
        System.out.println("With proportion AS BigInteger === " + jMetaDataGeneral.getStreamSizeString5AsBigInteger());
        System.out.println("With proportion AS URL === " + jMetaDataGeneral.getStreamSizeString5AsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataGeneral.getStreamKindAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataGeneral.getStreamKindAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataGeneral.getStreamKindAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataGeneral.getStreamKindAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataGeneral.getStreamKindAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataGeneral.getStreamKindAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataGeneral.getStreamKindAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataGeneral.getStreamKindAsURL());
        System.out.println("Keywords to the item separated by a comma, used for searching. AS Integer === " + jMetaDataGeneral.getKeywordsAsInteger());
        System.out.println("Keywords to the item separated by a comma, used for searching. AS Long === " + jMetaDataGeneral.getKeywordsAsLong());
        System.out.println("Keywords to the item separated by a comma, used for searching. AS LocalDateTime === " + jMetaDataGeneral.getKeywordsAsLocalDateTime());
        System.out.println("Keywords to the item separated by a comma, used for searching. AS LocalTime === " + jMetaDataGeneral.getKeywordsAsLocalTime());
        System.out.println("Keywords to the item separated by a comma, used for searching. AS String === " + jMetaDataGeneral.getKeywordsAsString());
        System.out.println("Keywords to the item separated by a comma, used for searching. AS Boolean === " + jMetaDataGeneral.getKeywordsAsBoolean());
        System.out.println("Keywords to the item separated by a comma, used for searching. AS BigInteger === " + jMetaDataGeneral.getKeywordsAsBigInteger());
        System.out.println("Keywords to the item separated by a comma, used for searching. AS URL === " + jMetaDataGeneral.getKeywordsAsURL());
        System.out.println("A numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating. AS Integer === " + jMetaDataGeneral.getRatingAsInteger());
        System.out.println("A numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating. AS Long === " + jMetaDataGeneral.getRatingAsLong());
        System.out.println("A numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating. AS LocalDateTime === " + jMetaDataGeneral.getRatingAsLocalDateTime());
        System.out.println("A numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating. AS LocalTime === " + jMetaDataGeneral.getRatingAsLocalTime());
        System.out.println("A numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating. AS String === " + jMetaDataGeneral.getRatingAsString());
        System.out.println("A numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating. AS Boolean === " + jMetaDataGeneral.getRatingAsBoolean());
        System.out.println("A numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating. AS BigInteger === " + jMetaDataGeneral.getRatingAsBigInteger());
        System.out.println("A numeric value defining how much a person likes the song/movie. The number is between 0 and 5 with decimal values possible (e.g. 2.7), 5(.0) being the highest possible rating. AS URL === " + jMetaDataGeneral.getRatingAsURL());
        System.out.println("Maximum Bit rate (with measurement) AS Integer === " + jMetaDataGeneral.getOverallBitRateMaximumStringAsInteger());
        System.out.println("Maximum Bit rate (with measurement) AS Long === " + jMetaDataGeneral.getOverallBitRateMaximumStringAsLong());
        System.out.println("Maximum Bit rate (with measurement) AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateMaximumStringAsLocalDateTime());
        System.out.println("Maximum Bit rate (with measurement) AS LocalTime === " + jMetaDataGeneral.getOverallBitRateMaximumStringAsLocalTime());
        System.out.println("Maximum Bit rate (with measurement) AS String === " + jMetaDataGeneral.getOverallBitRateMaximumStringAsString());
        System.out.println("Maximum Bit rate (with measurement) AS Boolean === " + jMetaDataGeneral.getOverallBitRateMaximumStringAsBoolean());
        System.out.println("Maximum Bit rate (with measurement) AS BigInteger === " + jMetaDataGeneral.getOverallBitRateMaximumStringAsBigInteger());
        System.out.println("Maximum Bit rate (with measurement) AS URL === " + jMetaDataGeneral.getOverallBitRateMaximumStringAsURL());
        System.out.println("The date/year that the item was originaly released. AS Integer === " + jMetaDataGeneral.getOriginalReleasedDateAsInteger());
        System.out.println("The date/year that the item was originaly released. AS Long === " + jMetaDataGeneral.getOriginalReleasedDateAsLong());
        System.out.println("The date/year that the item was originaly released. AS LocalDateTime === " + jMetaDataGeneral.getOriginalReleasedDateAsLocalDateTime());
        System.out.println("The date/year that the item was originaly released. AS LocalTime === " + jMetaDataGeneral.getOriginalReleasedDateAsLocalTime());
        System.out.println("The date/year that the item was originaly released. AS String === " + jMetaDataGeneral.getOriginalReleasedDateAsString());
        System.out.println("The date/year that the item was originaly released. AS Boolean === " + jMetaDataGeneral.getOriginalReleasedDateAsBoolean());
        System.out.println("The date/year that the item was originaly released. AS BigInteger === " + jMetaDataGeneral.getOriginalReleasedDateAsBigInteger());
        System.out.println("The date/year that the item was originaly released. AS URL === " + jMetaDataGeneral.getOriginalReleasedDateAsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataGeneral.getCodecIDAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataGeneral.getCodecIDAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataGeneral.getCodecIDAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataGeneral.getCodecIDAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataGeneral.getCodecIDAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataGeneral.getCodecIDAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataGeneral.getCodecIDAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataGeneral.getCodecIDAsURL());
        System.out.println("Album/Sort AS Integer === " + jMetaDataGeneral.getAlbumSortAsInteger());
        System.out.println("Album/Sort AS Long === " + jMetaDataGeneral.getAlbumSortAsLong());
        System.out.println("Album/Sort AS LocalDateTime === " + jMetaDataGeneral.getAlbumSortAsLocalDateTime());
        System.out.println("Album/Sort AS LocalTime === " + jMetaDataGeneral.getAlbumSortAsLocalTime());
        System.out.println("Album/Sort AS String === " + jMetaDataGeneral.getAlbumSortAsString());
        System.out.println("Album/Sort AS Boolean === " + jMetaDataGeneral.getAlbumSortAsBoolean());
        System.out.println("Album/Sort AS BigInteger === " + jMetaDataGeneral.getAlbumSortAsBigInteger());
        System.out.println("Album/Sort AS URL === " + jMetaDataGeneral.getAlbumSortAsURL());
        System.out.println("Audio languages in this file separated by / AS Integer === " + jMetaDataGeneral.getAudioLanguageListAsInteger());
        System.out.println("Audio languages in this file separated by / AS Long === " + jMetaDataGeneral.getAudioLanguageListAsLong());
        System.out.println("Audio languages in this file separated by / AS LocalDateTime === " + jMetaDataGeneral.getAudioLanguageListAsLocalDateTime());
        System.out.println("Audio languages in this file separated by / AS LocalTime === " + jMetaDataGeneral.getAudioLanguageListAsLocalTime());
        System.out.println("Audio languages in this file separated by / AS String === " + jMetaDataGeneral.getAudioLanguageListAsString());
        System.out.println("Audio languages in this file separated by / AS Boolean === " + jMetaDataGeneral.getAudioLanguageListAsBoolean());
        System.out.println("Audio languages in this file separated by / AS BigInteger === " + jMetaDataGeneral.getAudioLanguageListAsBigInteger());
        System.out.println("Audio languages in this file separated by / AS URL === " + jMetaDataGeneral.getAudioLanguageListAsURL());
        System.out.println("The name of a co-producer. AS Integer === " + jMetaDataGeneral.getCoProducerAsInteger());
        System.out.println("The name of a co-producer. AS Long === " + jMetaDataGeneral.getCoProducerAsLong());
        System.out.println("The name of a co-producer. AS LocalDateTime === " + jMetaDataGeneral.getCoProducerAsLocalDateTime());
        System.out.println("The name of a co-producer. AS LocalTime === " + jMetaDataGeneral.getCoProducerAsLocalTime());
        System.out.println("The name of a co-producer. AS String === " + jMetaDataGeneral.getCoProducerAsString());
        System.out.println("The name of a co-producer. AS Boolean === " + jMetaDataGeneral.getCoProducerAsBoolean());
        System.out.println("The name of a co-producer. AS BigInteger === " + jMetaDataGeneral.getCoProducerAsBigInteger());
        System.out.println("The name of a co-producer. AS URL === " + jMetaDataGeneral.getCoProducerAsURL());
        System.out.println("International Standard Book Number. AS Integer === " + jMetaDataGeneral.getISBNAsInteger());
        System.out.println("International Standard Book Number. AS Long === " + jMetaDataGeneral.getISBNAsLong());
        System.out.println("International Standard Book Number. AS LocalDateTime === " + jMetaDataGeneral.getISBNAsLocalDateTime());
        System.out.println("International Standard Book Number. AS LocalTime === " + jMetaDataGeneral.getISBNAsLocalTime());
        System.out.println("International Standard Book Number. AS String === " + jMetaDataGeneral.getISBNAsString());
        System.out.println("International Standard Book Number. AS Boolean === " + jMetaDataGeneral.getISBNAsBoolean());
        System.out.println("International Standard Book Number. AS BigInteger === " + jMetaDataGeneral.getISBNAsBigInteger());
        System.out.println("International Standard Book Number. AS URL === " + jMetaDataGeneral.getISBNAsURL());
        System.out.println("The name of the choregrapher. AS Integer === " + jMetaDataGeneral.getChoregrapherAsInteger());
        System.out.println("The name of the choregrapher. AS Long === " + jMetaDataGeneral.getChoregrapherAsLong());
        System.out.println("The name of the choregrapher. AS LocalDateTime === " + jMetaDataGeneral.getChoregrapherAsLocalDateTime());
        System.out.println("The name of the choregrapher. AS LocalTime === " + jMetaDataGeneral.getChoregrapherAsLocalTime());
        System.out.println("The name of the choregrapher. AS String === " + jMetaDataGeneral.getChoregrapherAsString());
        System.out.println("The name of the choregrapher. AS Boolean === " + jMetaDataGeneral.getChoregrapherAsBoolean());
        System.out.println("The name of the choregrapher. AS BigInteger === " + jMetaDataGeneral.getChoregrapherAsBigInteger());
        System.out.println("The name of the choregrapher. AS URL === " + jMetaDataGeneral.getChoregrapherAsURL());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Integer === " + jMetaDataGeneral.getEncodedLibraryStringAsInteger());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Long === " + jMetaDataGeneral.getEncodedLibraryStringAsLong());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalDateTime === " + jMetaDataGeneral.getEncodedLibraryStringAsLocalDateTime());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalTime === " + jMetaDataGeneral.getEncodedLibraryStringAsLocalTime());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS String === " + jMetaDataGeneral.getEncodedLibraryStringAsString());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Boolean === " + jMetaDataGeneral.getEncodedLibraryStringAsBoolean());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS BigInteger === " + jMetaDataGeneral.getEncodedLibraryStringAsBigInteger());
        System.out.println("Software used to create the file, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS URL === " + jMetaDataGeneral.getEncodedLibraryStringAsURL());
        System.out.println("Complete name (Folder+Name+Extension) AS Integer === " + jMetaDataGeneral.getCompleteNameAsInteger());
        System.out.println("Complete name (Folder+Name+Extension) AS Long === " + jMetaDataGeneral.getCompleteNameAsLong());
        System.out.println("Complete name (Folder+Name+Extension) AS LocalDateTime === " + jMetaDataGeneral.getCompleteNameAsLocalDateTime());
        System.out.println("Complete name (Folder+Name+Extension) AS LocalTime === " + jMetaDataGeneral.getCompleteNameAsLocalTime());
        System.out.println("Complete name (Folder+Name+Extension) AS String === " + jMetaDataGeneral.getCompleteNameAsString());
        System.out.println("Complete name (Folder+Name+Extension) AS Boolean === " + jMetaDataGeneral.getCompleteNameAsBoolean());
        System.out.println("Complete name (Folder+Name+Extension) AS BigInteger === " + jMetaDataGeneral.getCompleteNameAsBigInteger());
        System.out.println("Complete name (Folder+Name+Extension) AS URL === " + jMetaDataGeneral.getCompleteNameAsURL());
        System.out.println("StreamSize/String AS Integer === " + jMetaDataGeneral.getStreamSizeStringAsInteger());
        System.out.println("StreamSize/String AS Long === " + jMetaDataGeneral.getStreamSizeStringAsLong());
        System.out.println("StreamSize/String AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeStringAsLocalDateTime());
        System.out.println("StreamSize/String AS LocalTime === " + jMetaDataGeneral.getStreamSizeStringAsLocalTime());
        System.out.println("StreamSize/String AS String === " + jMetaDataGeneral.getStreamSizeStringAsString());
        System.out.println("StreamSize/String AS Boolean === " + jMetaDataGeneral.getStreamSizeStringAsBoolean());
        System.out.println("StreamSize/String AS BigInteger === " + jMetaDataGeneral.getStreamSizeStringAsBigInteger());
        System.out.println("StreamSize/String AS URL === " + jMetaDataGeneral.getStreamSizeStringAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataGeneral.getOriginalSourceMediumIDStringAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataGeneral.getOriginalSourceMediumIDStringAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceMediumIDStringAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataGeneral.getOriginalSourceMediumIDStringAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataGeneral.getOriginalSourceMediumIDStringAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataGeneral.getOriginalSourceMediumIDStringAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataGeneral.getOriginalSourceMediumIDStringAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataGeneral.getOriginalSourceMediumIDStringAsURL());
        System.out.println("Company the item is mainly distributed by  AS Integer === " + jMetaDataGeneral.getDistributedByAsInteger());
        System.out.println("Company the item is mainly distributed by  AS Long === " + jMetaDataGeneral.getDistributedByAsLong());
        System.out.println("Company the item is mainly distributed by  AS LocalDateTime === " + jMetaDataGeneral.getDistributedByAsLocalDateTime());
        System.out.println("Company the item is mainly distributed by  AS LocalTime === " + jMetaDataGeneral.getDistributedByAsLocalTime());
        System.out.println("Company the item is mainly distributed by  AS String === " + jMetaDataGeneral.getDistributedByAsString());
        System.out.println("Company the item is mainly distributed by  AS Boolean === " + jMetaDataGeneral.getDistributedByAsBoolean());
        System.out.println("Company the item is mainly distributed by  AS BigInteger === " + jMetaDataGeneral.getDistributedByAsBigInteger());
        System.out.println("Company the item is mainly distributed by  AS URL === " + jMetaDataGeneral.getDistributedByAsURL());
        System.out.println("The time that the file was modified on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS Integer === " + jMetaDataGeneral.getFileModifiedDateLocalAsInteger());
        System.out.println("The time that the file was modified on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS Long === " + jMetaDataGeneral.getFileModifiedDateLocalAsLong());
        System.out.println("The time that the file was modified on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS LocalDateTime === " + jMetaDataGeneral.getFileModifiedDateLocalAsLocalDateTime());
        System.out.println("The time that the file was modified on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS LocalTime === " + jMetaDataGeneral.getFileModifiedDateLocalAsLocalTime());
        System.out.println("The time that the file was modified on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS String === " + jMetaDataGeneral.getFileModifiedDateLocalAsString());
        System.out.println("The time that the file was modified on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS Boolean === " + jMetaDataGeneral.getFileModifiedDateLocalAsBoolean());
        System.out.println("The time that the file was modified on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS BigInteger === " + jMetaDataGeneral.getFileModifiedDateLocalAsBigInteger());
        System.out.println("The time that the file was modified on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS URL === " + jMetaDataGeneral.getFileModifiedDateLocalAsURL());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS Integer === " + jMetaDataGeneral.getFrameCountAsInteger());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS Long === " + jMetaDataGeneral.getFrameCountAsLong());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS LocalDateTime === " + jMetaDataGeneral.getFrameCountAsLocalDateTime());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS LocalTime === " + jMetaDataGeneral.getFrameCountAsLocalTime());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS String === " + jMetaDataGeneral.getFrameCountAsString());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS Boolean === " + jMetaDataGeneral.getFrameCountAsBoolean());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS BigInteger === " + jMetaDataGeneral.getFrameCountAsBigInteger());
        System.out.println("Frame count (a frame contains a count of samples depends of the format) AS URL === " + jMetaDataGeneral.getFrameCountAsURL());
        System.out.println("Encryption_Length AS Integer === " + jMetaDataGeneral.getEncryptionLengthAsInteger());
        System.out.println("Encryption_Length AS Long === " + jMetaDataGeneral.getEncryptionLengthAsLong());
        System.out.println("Encryption_Length AS LocalDateTime === " + jMetaDataGeneral.getEncryptionLengthAsLocalDateTime());
        System.out.println("Encryption_Length AS LocalTime === " + jMetaDataGeneral.getEncryptionLengthAsLocalTime());
        System.out.println("Encryption_Length AS String === " + jMetaDataGeneral.getEncryptionLengthAsString());
        System.out.println("Encryption_Length AS Boolean === " + jMetaDataGeneral.getEncryptionLengthAsBoolean());
        System.out.println("Encryption_Length AS BigInteger === " + jMetaDataGeneral.getEncryptionLengthAsBigInteger());
        System.out.println("Encryption_Length AS URL === " + jMetaDataGeneral.getEncryptionLengthAsURL());
        System.out.println("(Generic)Title of file AS Integer === " + jMetaDataGeneral.getTitleAsInteger());
        System.out.println("(Generic)Title of file AS Long === " + jMetaDataGeneral.getTitleAsLong());
        System.out.println("(Generic)Title of file AS LocalDateTime === " + jMetaDataGeneral.getTitleAsLocalDateTime());
        System.out.println("(Generic)Title of file AS LocalTime === " + jMetaDataGeneral.getTitleAsLocalTime());
        System.out.println("(Generic)Title of file AS String === " + jMetaDataGeneral.getTitleAsString());
        System.out.println("(Generic)Title of file AS Boolean === " + jMetaDataGeneral.getTitleAsBoolean());
        System.out.println("(Generic)Title of file AS BigInteger === " + jMetaDataGeneral.getTitleAsBigInteger());
        System.out.println("(Generic)Title of file AS URL === " + jMetaDataGeneral.getTitleAsURL());
        System.out.println("The ICRA rating. (Previously RSACi) AS Integer === " + jMetaDataGeneral.getICRAAsInteger());
        System.out.println("The ICRA rating. (Previously RSACi) AS Long === " + jMetaDataGeneral.getICRAAsLong());
        System.out.println("The ICRA rating. (Previously RSACi) AS LocalDateTime === " + jMetaDataGeneral.getICRAAsLocalDateTime());
        System.out.println("The ICRA rating. (Previously RSACi) AS LocalTime === " + jMetaDataGeneral.getICRAAsLocalTime());
        System.out.println("The ICRA rating. (Previously RSACi) AS String === " + jMetaDataGeneral.getICRAAsString());
        System.out.println("The ICRA rating. (Previously RSACi) AS Boolean === " + jMetaDataGeneral.getICRAAsBoolean());
        System.out.println("The ICRA rating. (Previously RSACi) AS BigInteger === " + jMetaDataGeneral.getICRAAsBigInteger());
        System.out.println("The ICRA rating. (Previously RSACi) AS URL === " + jMetaDataGeneral.getICRAAsURL());
        System.out.println("Delay drop frame AS Integer === " + jMetaDataGeneral.getDelayDropFrameAsInteger());
        System.out.println("Delay drop frame AS Long === " + jMetaDataGeneral.getDelayDropFrameAsLong());
        System.out.println("Delay drop frame AS LocalDateTime === " + jMetaDataGeneral.getDelayDropFrameAsLocalDateTime());
        System.out.println("Delay drop frame AS LocalTime === " + jMetaDataGeneral.getDelayDropFrameAsLocalTime());
        System.out.println("Delay drop frame AS String === " + jMetaDataGeneral.getDelayDropFrameAsString());
        System.out.println("Delay drop frame AS Boolean === " + jMetaDataGeneral.getDelayDropFrameAsBoolean());
        System.out.println("Delay drop frame AS BigInteger === " + jMetaDataGeneral.getDelayDropFrameAsBigInteger());
        System.out.println("Delay drop frame AS URL === " + jMetaDataGeneral.getDelayDropFrameAsURL());
        System.out.println("(Generic)Url AS Integer === " + jMetaDataGeneral.getTitleUrlAsInteger());
        System.out.println("(Generic)Url AS Long === " + jMetaDataGeneral.getTitleUrlAsLong());
        System.out.println("(Generic)Url AS LocalDateTime === " + jMetaDataGeneral.getTitleUrlAsLocalDateTime());
        System.out.println("(Generic)Url AS LocalTime === " + jMetaDataGeneral.getTitleUrlAsLocalTime());
        System.out.println("(Generic)Url AS String === " + jMetaDataGeneral.getTitleUrlAsString());
        System.out.println("(Generic)Url AS Boolean === " + jMetaDataGeneral.getTitleUrlAsBoolean());
        System.out.println("(Generic)Url AS BigInteger === " + jMetaDataGeneral.getTitleUrlAsBigInteger());
        System.out.println("(Generic)Url AS URL === " + jMetaDataGeneral.getTitleUrlAsURL());
        System.out.println("Describes the topic of the file, such as Aerial view of Seattle.. AS Integer === " + jMetaDataGeneral.getSubjectAsInteger());
        System.out.println("Describes the topic of the file, such as Aerial view of Seattle.. AS Long === " + jMetaDataGeneral.getSubjectAsLong());
        System.out.println("Describes the topic of the file, such as Aerial view of Seattle.. AS LocalDateTime === " + jMetaDataGeneral.getSubjectAsLocalDateTime());
        System.out.println("Describes the topic of the file, such as Aerial view of Seattle.. AS LocalTime === " + jMetaDataGeneral.getSubjectAsLocalTime());
        System.out.println("Describes the topic of the file, such as Aerial view of Seattle.. AS String === " + jMetaDataGeneral.getSubjectAsString());
        System.out.println("Describes the topic of the file, such as Aerial view of Seattle.. AS Boolean === " + jMetaDataGeneral.getSubjectAsBoolean());
        System.out.println("Describes the topic of the file, such as Aerial view of Seattle.. AS BigInteger === " + jMetaDataGeneral.getSubjectAsBigInteger());
        System.out.println("Describes the topic of the file, such as Aerial view of Seattle.. AS URL === " + jMetaDataGeneral.getSubjectAsURL());
        System.out.println("More infos about the movie AS Integer === " + jMetaDataGeneral.getMovieMoreAsInteger());
        System.out.println("More infos about the movie AS Long === " + jMetaDataGeneral.getMovieMoreAsLong());
        System.out.println("More infos about the movie AS LocalDateTime === " + jMetaDataGeneral.getMovieMoreAsLocalDateTime());
        System.out.println("More infos about the movie AS LocalTime === " + jMetaDataGeneral.getMovieMoreAsLocalTime());
        System.out.println("More infos about the movie AS String === " + jMetaDataGeneral.getMovieMoreAsString());
        System.out.println("More infos about the movie AS Boolean === " + jMetaDataGeneral.getMovieMoreAsBoolean());
        System.out.println("More infos about the movie AS BigInteger === " + jMetaDataGeneral.getMovieMoreAsBigInteger());
        System.out.println("More infos about the movie AS URL === " + jMetaDataGeneral.getMovieMoreAsURL());
        System.out.println("Bit rate mode of all streams (VBR, CBR) AS Integer === " + jMetaDataGeneral.getOverallBitRateModeAsInteger());
        System.out.println("Bit rate mode of all streams (VBR, CBR) AS Long === " + jMetaDataGeneral.getOverallBitRateModeAsLong());
        System.out.println("Bit rate mode of all streams (VBR, CBR) AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateModeAsLocalDateTime());
        System.out.println("Bit rate mode of all streams (VBR, CBR) AS LocalTime === " + jMetaDataGeneral.getOverallBitRateModeAsLocalTime());
        System.out.println("Bit rate mode of all streams (VBR, CBR) AS String === " + jMetaDataGeneral.getOverallBitRateModeAsString());
        System.out.println("Bit rate mode of all streams (VBR, CBR) AS Boolean === " + jMetaDataGeneral.getOverallBitRateModeAsBoolean());
        System.out.println("Bit rate mode of all streams (VBR, CBR) AS BigInteger === " + jMetaDataGeneral.getOverallBitRateModeAsBigInteger());
        System.out.println("Bit rate mode of all streams (VBR, CBR) AS URL === " + jMetaDataGeneral.getOverallBitRateModeAsURL());
        System.out.println("The author of the screenplay or scenario (used for movies and TV shows). AS Integer === " + jMetaDataGeneral.getScreenplayByAsInteger());
        System.out.println("The author of the screenplay or scenario (used for movies and TV shows). AS Long === " + jMetaDataGeneral.getScreenplayByAsLong());
        System.out.println("The author of the screenplay or scenario (used for movies and TV shows). AS LocalDateTime === " + jMetaDataGeneral.getScreenplayByAsLocalDateTime());
        System.out.println("The author of the screenplay or scenario (used for movies and TV shows). AS LocalTime === " + jMetaDataGeneral.getScreenplayByAsLocalTime());
        System.out.println("The author of the screenplay or scenario (used for movies and TV shows). AS String === " + jMetaDataGeneral.getScreenplayByAsString());
        System.out.println("The author of the screenplay or scenario (used for movies and TV shows). AS Boolean === " + jMetaDataGeneral.getScreenplayByAsBoolean());
        System.out.println("The author of the screenplay or scenario (used for movies and TV shows). AS BigInteger === " + jMetaDataGeneral.getScreenplayByAsBigInteger());
        System.out.println("The author of the screenplay or scenario (used for movies and TV shows). AS URL === " + jMetaDataGeneral.getScreenplayByAsURL());
        System.out.println("The name of an executive producer. AS Integer === " + jMetaDataGeneral.getExecutiveProducerAsInteger());
        System.out.println("The name of an executive producer. AS Long === " + jMetaDataGeneral.getExecutiveProducerAsLong());
        System.out.println("The name of an executive producer. AS LocalDateTime === " + jMetaDataGeneral.getExecutiveProducerAsLocalDateTime());
        System.out.println("The name of an executive producer. AS LocalTime === " + jMetaDataGeneral.getExecutiveProducerAsLocalTime());
        System.out.println("The name of an executive producer. AS String === " + jMetaDataGeneral.getExecutiveProducerAsString());
        System.out.println("The name of an executive producer. AS Boolean === " + jMetaDataGeneral.getExecutiveProducerAsBoolean());
        System.out.println("The name of an executive producer. AS BigInteger === " + jMetaDataGeneral.getExecutiveProducerAsBigInteger());
        System.out.println("The name of an executive producer. AS URL === " + jMetaDataGeneral.getExecutiveProducerAsURL());
        System.out.println("International Standard Recording Code, excluding the ISRC prefix and including hyphens. AS Integer === " + jMetaDataGeneral.getISRCAsInteger());
        System.out.println("International Standard Recording Code, excluding the ISRC prefix and including hyphens. AS Long === " + jMetaDataGeneral.getISRCAsLong());
        System.out.println("International Standard Recording Code, excluding the ISRC prefix and including hyphens. AS LocalDateTime === " + jMetaDataGeneral.getISRCAsLocalDateTime());
        System.out.println("International Standard Recording Code, excluding the ISRC prefix and including hyphens. AS LocalTime === " + jMetaDataGeneral.getISRCAsLocalTime());
        System.out.println("International Standard Recording Code, excluding the ISRC prefix and including hyphens. AS String === " + jMetaDataGeneral.getISRCAsString());
        System.out.println("International Standard Recording Code, excluding the ISRC prefix and including hyphens. AS Boolean === " + jMetaDataGeneral.getISRCAsBoolean());
        System.out.println("International Standard Recording Code, excluding the ISRC prefix and including hyphens. AS BigInteger === " + jMetaDataGeneral.getISRCAsBigInteger());
        System.out.println("International Standard Recording Code, excluding the ISRC prefix and including hyphens. AS URL === " + jMetaDataGeneral.getISRCAsURL());
        System.out.println("Stream size divided by file size AS Integer === " + jMetaDataGeneral.getStreamSizeProportionAsInteger());
        System.out.println("Stream size divided by file size AS Long === " + jMetaDataGeneral.getStreamSizeProportionAsLong());
        System.out.println("Stream size divided by file size AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeProportionAsLocalDateTime());
        System.out.println("Stream size divided by file size AS LocalTime === " + jMetaDataGeneral.getStreamSizeProportionAsLocalTime());
        System.out.println("Stream size divided by file size AS String === " + jMetaDataGeneral.getStreamSizeProportionAsString());
        System.out.println("Stream size divided by file size AS Boolean === " + jMetaDataGeneral.getStreamSizeProportionAsBoolean());
        System.out.println("Stream size divided by file size AS BigInteger === " + jMetaDataGeneral.getStreamSizeProportionAsBigInteger());
        System.out.println("Stream size divided by file size AS URL === " + jMetaDataGeneral.getStreamSizeProportionAsURL());
        System.out.println("HeaderSize AS Integer === " + jMetaDataGeneral.getHeaderSizeAsInteger());
        System.out.println("HeaderSize AS Long === " + jMetaDataGeneral.getHeaderSizeAsLong());
        System.out.println("HeaderSize AS LocalDateTime === " + jMetaDataGeneral.getHeaderSizeAsLocalDateTime());
        System.out.println("HeaderSize AS LocalTime === " + jMetaDataGeneral.getHeaderSizeAsLocalTime());
        System.out.println("HeaderSize AS String === " + jMetaDataGeneral.getHeaderSizeAsString());
        System.out.println("HeaderSize AS Boolean === " + jMetaDataGeneral.getHeaderSizeAsBoolean());
        System.out.println("HeaderSize AS BigInteger === " + jMetaDataGeneral.getHeaderSizeAsBigInteger());
        System.out.println("HeaderSize AS URL === " + jMetaDataGeneral.getHeaderSizeAsURL());
        System.out.println("Parameters used by the software AS Integer === " + jMetaDataGeneral.getEncodedLibrarySettingsAsInteger());
        System.out.println("Parameters used by the software AS Long === " + jMetaDataGeneral.getEncodedLibrarySettingsAsLong());
        System.out.println("Parameters used by the software AS LocalDateTime === " + jMetaDataGeneral.getEncodedLibrarySettingsAsLocalDateTime());
        System.out.println("Parameters used by the software AS LocalTime === " + jMetaDataGeneral.getEncodedLibrarySettingsAsLocalTime());
        System.out.println("Parameters used by the software AS String === " + jMetaDataGeneral.getEncodedLibrarySettingsAsString());
        System.out.println("Parameters used by the software AS Boolean === " + jMetaDataGeneral.getEncodedLibrarySettingsAsBoolean());
        System.out.println("Parameters used by the software AS BigInteger === " + jMetaDataGeneral.getEncodedLibrarySettingsAsBigInteger());
        System.out.println("Parameters used by the software AS URL === " + jMetaDataGeneral.getEncodedLibrarySettingsAsURL());
        System.out.println("The type of the item. e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc. AS Integer === " + jMetaDataGeneral.getContentTypeAsInteger());
        System.out.println("The type of the item. e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc. AS Long === " + jMetaDataGeneral.getContentTypeAsLong());
        System.out.println("The type of the item. e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc. AS LocalDateTime === " + jMetaDataGeneral.getContentTypeAsLocalDateTime());
        System.out.println("The type of the item. e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc. AS LocalTime === " + jMetaDataGeneral.getContentTypeAsLocalTime());
        System.out.println("The type of the item. e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc. AS String === " + jMetaDataGeneral.getContentTypeAsString());
        System.out.println("The type of the item. e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc. AS Boolean === " + jMetaDataGeneral.getContentTypeAsBoolean());
        System.out.println("The type of the item. e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc. AS BigInteger === " + jMetaDataGeneral.getContentTypeAsBigInteger());
        System.out.println("The type of the item. e.g. Documentary, Feature Film, Cartoon, Music Video, Music, Sound FX, etc. AS URL === " + jMetaDataGeneral.getContentTypeAsURL());
        System.out.println("short descriptio, e.g. Earth in space AS Integer === " + jMetaDataGeneral.getCoverDescriptionAsInteger());
        System.out.println("short descriptio, e.g. Earth in space AS Long === " + jMetaDataGeneral.getCoverDescriptionAsLong());
        System.out.println("short descriptio, e.g. Earth in space AS LocalDateTime === " + jMetaDataGeneral.getCoverDescriptionAsLocalDateTime());
        System.out.println("short descriptio, e.g. Earth in space AS LocalTime === " + jMetaDataGeneral.getCoverDescriptionAsLocalTime());
        System.out.println("short descriptio, e.g. Earth in space AS String === " + jMetaDataGeneral.getCoverDescriptionAsString());
        System.out.println("short descriptio, e.g. Earth in space AS Boolean === " + jMetaDataGeneral.getCoverDescriptionAsBoolean());
        System.out.println("short descriptio, e.g. Earth in space AS BigInteger === " + jMetaDataGeneral.getCoverDescriptionAsBigInteger());
        System.out.println("short descriptio, e.g. Earth in space AS URL === " + jMetaDataGeneral.getCoverDescriptionAsURL());
        System.out.println("Count of objects available in this stream AS Integer === " + jMetaDataGeneral.getCountAsInteger());
        System.out.println("Count of objects available in this stream AS Long === " + jMetaDataGeneral.getCountAsLong());
        System.out.println("Count of objects available in this stream AS LocalDateTime === " + jMetaDataGeneral.getCountAsLocalDateTime());
        System.out.println("Count of objects available in this stream AS LocalTime === " + jMetaDataGeneral.getCountAsLocalTime());
        System.out.println("Count of objects available in this stream AS String === " + jMetaDataGeneral.getCountAsString());
        System.out.println("Count of objects available in this stream AS Boolean === " + jMetaDataGeneral.getCountAsBoolean());
        System.out.println("Count of objects available in this stream AS BigInteger === " + jMetaDataGeneral.getCountAsBigInteger());
        System.out.println("Count of objects available in this stream AS URL === " + jMetaDataGeneral.getCountAsURL());
        System.out.println("Encryption AS Integer === " + jMetaDataGeneral.getEncryptionAsInteger());
        System.out.println("Encryption AS Long === " + jMetaDataGeneral.getEncryptionAsLong());
        System.out.println("Encryption AS LocalDateTime === " + jMetaDataGeneral.getEncryptionAsLocalDateTime());
        System.out.println("Encryption AS LocalTime === " + jMetaDataGeneral.getEncryptionAsLocalTime());
        System.out.println("Encryption AS String === " + jMetaDataGeneral.getEncryptionAsString());
        System.out.println("Encryption AS Boolean === " + jMetaDataGeneral.getEncryptionAsBoolean());
        System.out.println("Encryption AS BigInteger === " + jMetaDataGeneral.getEncryptionAsBigInteger());
        System.out.println("Encryption AS URL === " + jMetaDataGeneral.getEncryptionAsURL());
        System.out.println("Frames per second, numerator AS Integer === " + jMetaDataGeneral.getFrameRateNumAsInteger());
        System.out.println("Frames per second, numerator AS Long === " + jMetaDataGeneral.getFrameRateNumAsLong());
        System.out.println("Frames per second, numerator AS LocalDateTime === " + jMetaDataGeneral.getFrameRateNumAsLocalDateTime());
        System.out.println("Frames per second, numerator AS LocalTime === " + jMetaDataGeneral.getFrameRateNumAsLocalTime());
        System.out.println("Frames per second, numerator AS String === " + jMetaDataGeneral.getFrameRateNumAsString());
        System.out.println("Frames per second, numerator AS Boolean === " + jMetaDataGeneral.getFrameRateNumAsBoolean());
        System.out.println("Frames per second, numerator AS BigInteger === " + jMetaDataGeneral.getFrameRateNumAsBigInteger());
        System.out.println("Frames per second, numerator AS URL === " + jMetaDataGeneral.getFrameRateNumAsURL());
        System.out.println("Version of this format AS Integer === " + jMetaDataGeneral.getFormatVersionAsInteger());
        System.out.println("Version of this format AS Long === " + jMetaDataGeneral.getFormatVersionAsLong());
        System.out.println("Version of this format AS LocalDateTime === " + jMetaDataGeneral.getFormatVersionAsLocalDateTime());
        System.out.println("Version of this format AS LocalTime === " + jMetaDataGeneral.getFormatVersionAsLocalTime());
        System.out.println("Version of this format AS String === " + jMetaDataGeneral.getFormatVersionAsString());
        System.out.println("Version of this format AS Boolean === " + jMetaDataGeneral.getFormatVersionAsBoolean());
        System.out.println("Version of this format AS BigInteger === " + jMetaDataGeneral.getFormatVersionAsBigInteger());
        System.out.println("Version of this format AS URL === " + jMetaDataGeneral.getFormatVersionAsURL());
        System.out.println("When multiple streams, number of the stream (base=1) AS Integer === " + jMetaDataGeneral.getStreamKindPosAsInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS Long === " + jMetaDataGeneral.getStreamKindPosAsLong());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalDateTime === " + jMetaDataGeneral.getStreamKindPosAsLocalDateTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS LocalTime === " + jMetaDataGeneral.getStreamKindPosAsLocalTime());
        System.out.println("When multiple streams, number of the stream (base=1) AS String === " + jMetaDataGeneral.getStreamKindPosAsString());
        System.out.println("When multiple streams, number of the stream (base=1) AS Boolean === " + jMetaDataGeneral.getStreamKindPosAsBoolean());
        System.out.println("When multiple streams, number of the stream (base=1) AS BigInteger === " + jMetaDataGeneral.getStreamKindPosAsBigInteger());
        System.out.println("When multiple streams, number of the stream (base=1) AS URL === " + jMetaDataGeneral.getStreamKindPosAsURL());
        System.out.println("The ID for this stream in the original medium of the material AS Integer === " + jMetaDataGeneral.getOriginalSourceMediumIDAsInteger());
        System.out.println("The ID for this stream in the original medium of the material AS Long === " + jMetaDataGeneral.getOriginalSourceMediumIDAsLong());
        System.out.println("The ID for this stream in the original medium of the material AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceMediumIDAsLocalDateTime());
        System.out.println("The ID for this stream in the original medium of the material AS LocalTime === " + jMetaDataGeneral.getOriginalSourceMediumIDAsLocalTime());
        System.out.println("The ID for this stream in the original medium of the material AS String === " + jMetaDataGeneral.getOriginalSourceMediumIDAsString());
        System.out.println("The ID for this stream in the original medium of the material AS Boolean === " + jMetaDataGeneral.getOriginalSourceMediumIDAsBoolean());
        System.out.println("The ID for this stream in the original medium of the material AS BigInteger === " + jMetaDataGeneral.getOriginalSourceMediumIDAsBigInteger());
        System.out.println("The ID for this stream in the original medium of the material AS URL === " + jMetaDataGeneral.getOriginalSourceMediumIDAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataGeneral.getDurationStringAsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataGeneral.getDurationStringAsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataGeneral.getDurationStringAsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataGeneral.getDurationStringAsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataGeneral.getDurationStringAsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataGeneral.getDurationStringAsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataGeneral.getDurationStringAsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataGeneral.getDurationStringAsURL());
        System.out.println("ServiceType AS Integer === " + jMetaDataGeneral.getServiceTypeAsInteger());
        System.out.println("ServiceType AS Long === " + jMetaDataGeneral.getServiceTypeAsLong());
        System.out.println("ServiceType AS LocalDateTime === " + jMetaDataGeneral.getServiceTypeAsLocalDateTime());
        System.out.println("ServiceType AS LocalTime === " + jMetaDataGeneral.getServiceTypeAsLocalTime());
        System.out.println("ServiceType AS String === " + jMetaDataGeneral.getServiceTypeAsString());
        System.out.println("ServiceType AS Boolean === " + jMetaDataGeneral.getServiceTypeAsBoolean());
        System.out.println("ServiceType AS BigInteger === " + jMetaDataGeneral.getServiceTypeAsBigInteger());
        System.out.println("ServiceType AS URL === " + jMetaDataGeneral.getServiceTypeAsURL());
        System.out.println("Nominal Bit rate in bps AS Integer === " + jMetaDataGeneral.getOverallBitRateNominalAsInteger());
        System.out.println("Nominal Bit rate in bps AS Long === " + jMetaDataGeneral.getOverallBitRateNominalAsLong());
        System.out.println("Nominal Bit rate in bps AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateNominalAsLocalDateTime());
        System.out.println("Nominal Bit rate in bps AS LocalTime === " + jMetaDataGeneral.getOverallBitRateNominalAsLocalTime());
        System.out.println("Nominal Bit rate in bps AS String === " + jMetaDataGeneral.getOverallBitRateNominalAsString());
        System.out.println("Nominal Bit rate in bps AS Boolean === " + jMetaDataGeneral.getOverallBitRateNominalAsBoolean());
        System.out.println("Nominal Bit rate in bps AS BigInteger === " + jMetaDataGeneral.getOverallBitRateNominalAsBigInteger());
        System.out.println("Nominal Bit rate in bps AS URL === " + jMetaDataGeneral.getOverallBitRateNominalAsURL());
        System.out.println("The ID for this stream in this file AS Integer === " + jMetaDataGeneral.getIDAsInteger());
        System.out.println("The ID for this stream in this file AS Long === " + jMetaDataGeneral.getIDAsLong());
        System.out.println("The ID for this stream in this file AS LocalDateTime === " + jMetaDataGeneral.getIDAsLocalDateTime());
        System.out.println("The ID for this stream in this file AS LocalTime === " + jMetaDataGeneral.getIDAsLocalTime());
        System.out.println("The ID for this stream in this file AS String === " + jMetaDataGeneral.getIDAsString());
        System.out.println("The ID for this stream in this file AS Boolean === " + jMetaDataGeneral.getIDAsBoolean());
        System.out.println("The ID for this stream in this file AS BigInteger === " + jMetaDataGeneral.getIDAsBigInteger());
        System.out.println("The ID for this stream in this file AS URL === " + jMetaDataGeneral.getIDAsURL());
        System.out.println("Release date of software AS Integer === " + jMetaDataGeneral.getEncodedLibraryDateAsInteger());
        System.out.println("Release date of software AS Long === " + jMetaDataGeneral.getEncodedLibraryDateAsLong());
        System.out.println("Release date of software AS LocalDateTime === " + jMetaDataGeneral.getEncodedLibraryDateAsLocalDateTime());
        System.out.println("Release date of software AS LocalTime === " + jMetaDataGeneral.getEncodedLibraryDateAsLocalTime());
        System.out.println("Release date of software AS String === " + jMetaDataGeneral.getEncodedLibraryDateAsString());
        System.out.println("Release date of software AS Boolean === " + jMetaDataGeneral.getEncodedLibraryDateAsBoolean());
        System.out.println("Release date of software AS BigInteger === " + jMetaDataGeneral.getEncodedLibraryDateAsBigInteger());
        System.out.println("Release date of software AS URL === " + jMetaDataGeneral.getEncodedLibraryDateAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataGeneral.getMenuIDStringAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataGeneral.getMenuIDStringAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataGeneral.getMenuIDStringAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataGeneral.getMenuIDStringAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataGeneral.getMenuIDStringAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataGeneral.getMenuIDStringAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataGeneral.getMenuIDStringAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataGeneral.getMenuIDStringAsURL());
        System.out.println("FooterSize AS Integer === " + jMetaDataGeneral.getFooterSizeAsInteger());
        System.out.println("FooterSize AS Long === " + jMetaDataGeneral.getFooterSizeAsLong());
        System.out.println("FooterSize AS LocalDateTime === " + jMetaDataGeneral.getFooterSizeAsLocalDateTime());
        System.out.println("FooterSize AS LocalTime === " + jMetaDataGeneral.getFooterSizeAsLocalTime());
        System.out.println("FooterSize AS String === " + jMetaDataGeneral.getFooterSizeAsString());
        System.out.println("FooterSize AS Boolean === " + jMetaDataGeneral.getFooterSizeAsBoolean());
        System.out.println("FooterSize AS BigInteger === " + jMetaDataGeneral.getFooterSizeAsBigInteger());
        System.out.println("FooterSize AS URL === " + jMetaDataGeneral.getFooterSizeAsURL());
        System.out.println("Software used to tag this file AS Integer === " + jMetaDataGeneral.getTaggedApplicationAsInteger());
        System.out.println("Software used to tag this file AS Long === " + jMetaDataGeneral.getTaggedApplicationAsLong());
        System.out.println("Software used to tag this file AS LocalDateTime === " + jMetaDataGeneral.getTaggedApplicationAsLocalDateTime());
        System.out.println("Software used to tag this file AS LocalTime === " + jMetaDataGeneral.getTaggedApplicationAsLocalTime());
        System.out.println("Software used to tag this file AS String === " + jMetaDataGeneral.getTaggedApplicationAsString());
        System.out.println("Software used to tag this file AS Boolean === " + jMetaDataGeneral.getTaggedApplicationAsBoolean());
        System.out.println("Software used to tag this file AS BigInteger === " + jMetaDataGeneral.getTaggedApplicationAsBigInteger());
        System.out.println("Software used to tag this file AS URL === " + jMetaDataGeneral.getTaggedApplicationAsURL());
        System.out.println("License information, e.g., All Rights Reserved,Any Use Permitted. AS Integer === " + jMetaDataGeneral.getTermsOfUseAsInteger());
        System.out.println("License information, e.g., All Rights Reserved,Any Use Permitted. AS Long === " + jMetaDataGeneral.getTermsOfUseAsLong());
        System.out.println("License information, e.g., All Rights Reserved,Any Use Permitted. AS LocalDateTime === " + jMetaDataGeneral.getTermsOfUseAsLocalDateTime());
        System.out.println("License information, e.g., All Rights Reserved,Any Use Permitted. AS LocalTime === " + jMetaDataGeneral.getTermsOfUseAsLocalTime());
        System.out.println("License information, e.g., All Rights Reserved,Any Use Permitted. AS String === " + jMetaDataGeneral.getTermsOfUseAsString());
        System.out.println("License information, e.g., All Rights Reserved,Any Use Permitted. AS Boolean === " + jMetaDataGeneral.getTermsOfUseAsBoolean());
        System.out.println("License information, e.g., All Rights Reserved,Any Use Permitted. AS BigInteger === " + jMetaDataGeneral.getTermsOfUseAsBigInteger());
        System.out.println("License information, e.g., All Rights Reserved,Any Use Permitted. AS URL === " + jMetaDataGeneral.getTermsOfUseAsURL());
        System.out.println("Bit rate of all streams in bps AS Integer === " + jMetaDataGeneral.getOverallBitRateAsInteger());
        System.out.println("Bit rate of all streams in bps AS Long === " + jMetaDataGeneral.getOverallBitRateAsLong());
        System.out.println("Bit rate of all streams in bps AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateAsLocalDateTime());
        System.out.println("Bit rate of all streams in bps AS LocalTime === " + jMetaDataGeneral.getOverallBitRateAsLocalTime());
        System.out.println("Bit rate of all streams in bps AS String === " + jMetaDataGeneral.getOverallBitRateAsString());
        System.out.println("Bit rate of all streams in bps AS Boolean === " + jMetaDataGeneral.getOverallBitRateAsBoolean());
        System.out.println("Bit rate of all streams in bps AS BigInteger === " + jMetaDataGeneral.getOverallBitRateAsBigInteger());
        System.out.println("Bit rate of all streams in bps AS URL === " + jMetaDataGeneral.getOverallBitRateAsURL());
        System.out.println("Name of the director. AS Integer === " + jMetaDataGeneral.getDirectorAsInteger());
        System.out.println("Name of the director. AS Long === " + jMetaDataGeneral.getDirectorAsLong());
        System.out.println("Name of the director. AS LocalDateTime === " + jMetaDataGeneral.getDirectorAsLocalDateTime());
        System.out.println("Name of the director. AS LocalTime === " + jMetaDataGeneral.getDirectorAsLocalTime());
        System.out.println("Name of the director. AS String === " + jMetaDataGeneral.getDirectorAsString());
        System.out.println("Name of the director. AS Boolean === " + jMetaDataGeneral.getDirectorAsBoolean());
        System.out.println("Name of the director. AS BigInteger === " + jMetaDataGeneral.getDirectorAsBigInteger());
        System.out.println("Name of the director. AS URL === " + jMetaDataGeneral.getDirectorAsURL());
        System.out.println("iTunes grouping AS Integer === " + jMetaDataGeneral.getGroupingAsInteger());
        System.out.println("iTunes grouping AS Long === " + jMetaDataGeneral.getGroupingAsLong());
        System.out.println("iTunes grouping AS LocalDateTime === " + jMetaDataGeneral.getGroupingAsLocalDateTime());
        System.out.println("iTunes grouping AS LocalTime === " + jMetaDataGeneral.getGroupingAsLocalTime());
        System.out.println("iTunes grouping AS String === " + jMetaDataGeneral.getGroupingAsString());
        System.out.println("iTunes grouping AS Boolean === " + jMetaDataGeneral.getGroupingAsBoolean());
        System.out.println("iTunes grouping AS BigInteger === " + jMetaDataGeneral.getGroupingAsBigInteger());
        System.out.println("iTunes grouping AS URL === " + jMetaDataGeneral.getGroupingAsURL());
        System.out.println("Chapters languages in this file, separated by / AS Integer === " + jMetaDataGeneral.getOtherLanguageListAsInteger());
        System.out.println("Chapters languages in this file, separated by / AS Long === " + jMetaDataGeneral.getOtherLanguageListAsLong());
        System.out.println("Chapters languages in this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getOtherLanguageListAsLocalDateTime());
        System.out.println("Chapters languages in this file, separated by / AS LocalTime === " + jMetaDataGeneral.getOtherLanguageListAsLocalTime());
        System.out.println("Chapters languages in this file, separated by / AS String === " + jMetaDataGeneral.getOtherLanguageListAsString());
        System.out.println("Chapters languages in this file, separated by / AS Boolean === " + jMetaDataGeneral.getOtherLanguageListAsBoolean());
        System.out.println("Chapters languages in this file, separated by / AS BigInteger === " + jMetaDataGeneral.getOtherLanguageListAsBigInteger());
        System.out.println("Chapters languages in this file, separated by / AS URL === " + jMetaDataGeneral.getOtherLanguageListAsURL());
        System.out.println("Intended to reflect the mood of the item with a few keywords, e.g. Romantic, Sad, Uplifting, etc. AS Integer === " + jMetaDataGeneral.getMoodAsInteger());
        System.out.println("Intended to reflect the mood of the item with a few keywords, e.g. Romantic, Sad, Uplifting, etc. AS Long === " + jMetaDataGeneral.getMoodAsLong());
        System.out.println("Intended to reflect the mood of the item with a few keywords, e.g. Romantic, Sad, Uplifting, etc. AS LocalDateTime === " + jMetaDataGeneral.getMoodAsLocalDateTime());
        System.out.println("Intended to reflect the mood of the item with a few keywords, e.g. Romantic, Sad, Uplifting, etc. AS LocalTime === " + jMetaDataGeneral.getMoodAsLocalTime());
        System.out.println("Intended to reflect the mood of the item with a few keywords, e.g. Romantic, Sad, Uplifting, etc. AS String === " + jMetaDataGeneral.getMoodAsString());
        System.out.println("Intended to reflect the mood of the item with a few keywords, e.g. Romantic, Sad, Uplifting, etc. AS Boolean === " + jMetaDataGeneral.getMoodAsBoolean());
        System.out.println("Intended to reflect the mood of the item with a few keywords, e.g. Romantic, Sad, Uplifting, etc. AS BigInteger === " + jMetaDataGeneral.getMoodAsBigInteger());
        System.out.println("Intended to reflect the mood of the item with a few keywords, e.g. Romantic, Sad, Uplifting, etc. AS URL === " + jMetaDataGeneral.getMoodAsURL());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Integer === " + jMetaDataGeneral.getEncodedApplicationStringAsInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Long === " + jMetaDataGeneral.getEncodedApplicationStringAsLong());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalDateTime === " + jMetaDataGeneral.getEncodedApplicationStringAsLocalDateTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS LocalTime === " + jMetaDataGeneral.getEncodedApplicationStringAsLocalTime());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS String === " + jMetaDataGeneral.getEncodedApplicationStringAsString());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS Boolean === " + jMetaDataGeneral.getEncodedApplicationStringAsBoolean());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS BigInteger === " + jMetaDataGeneral.getEncodedApplicationStringAsBigInteger());
        System.out.println("Name of the software package used to create the file, such as Microsoft WaveEdit, trying to have the format 'CompanyName ProductName (OperatingSystem) Version (Date)' AS URL === " + jMetaDataGeneral.getEncodedApplicationStringAsURL());
        System.out.println("More infos about the album AS Integer === " + jMetaDataGeneral.getAlbumMoreAsInteger());
        System.out.println("More infos about the album AS Long === " + jMetaDataGeneral.getAlbumMoreAsLong());
        System.out.println("More infos about the album AS LocalDateTime === " + jMetaDataGeneral.getAlbumMoreAsLocalDateTime());
        System.out.println("More infos about the album AS LocalTime === " + jMetaDataGeneral.getAlbumMoreAsLocalTime());
        System.out.println("More infos about the album AS String === " + jMetaDataGeneral.getAlbumMoreAsString());
        System.out.println("More infos about the album AS Boolean === " + jMetaDataGeneral.getAlbumMoreAsBoolean());
        System.out.println("More infos about the album AS BigInteger === " + jMetaDataGeneral.getAlbumMoreAsBigInteger());
        System.out.println("More infos about the album AS URL === " + jMetaDataGeneral.getAlbumMoreAsURL());
        System.out.println("iTunes compilation AS Integer === " + jMetaDataGeneral.getCompilationStringAsInteger());
        System.out.println("iTunes compilation AS Long === " + jMetaDataGeneral.getCompilationStringAsLong());
        System.out.println("iTunes compilation AS LocalDateTime === " + jMetaDataGeneral.getCompilationStringAsLocalDateTime());
        System.out.println("iTunes compilation AS LocalTime === " + jMetaDataGeneral.getCompilationStringAsLocalTime());
        System.out.println("iTunes compilation AS String === " + jMetaDataGeneral.getCompilationStringAsString());
        System.out.println("iTunes compilation AS Boolean === " + jMetaDataGeneral.getCompilationStringAsBoolean());
        System.out.println("iTunes compilation AS BigInteger === " + jMetaDataGeneral.getCompilationStringAsBigInteger());
        System.out.println("iTunes compilation AS URL === " + jMetaDataGeneral.getCompilationStringAsURL());
        System.out.println("Country AS Integer === " + jMetaDataGeneral.getCountryAsInteger());
        System.out.println("Country AS Long === " + jMetaDataGeneral.getCountryAsLong());
        System.out.println("Country AS LocalDateTime === " + jMetaDataGeneral.getCountryAsLocalDateTime());
        System.out.println("Country AS LocalTime === " + jMetaDataGeneral.getCountryAsLocalTime());
        System.out.println("Country AS String === " + jMetaDataGeneral.getCountryAsString());
        System.out.println("Country AS Boolean === " + jMetaDataGeneral.getCountryAsBoolean());
        System.out.println("Country AS BigInteger === " + jMetaDataGeneral.getCountryAsBigInteger());
        System.out.println("Country AS URL === " + jMetaDataGeneral.getCountryAsURL());
        System.out.println("The time that the file was created on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS Integer === " + jMetaDataGeneral.getFileCreatedDateLocalAsInteger());
        System.out.println("The time that the file was created on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS Long === " + jMetaDataGeneral.getFileCreatedDateLocalAsLong());
        System.out.println("The time that the file was created on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS LocalDateTime === " + jMetaDataGeneral.getFileCreatedDateLocalAsLocalDateTime());
        System.out.println("The time that the file was created on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS LocalTime === " + jMetaDataGeneral.getFileCreatedDateLocalAsLocalTime());
        System.out.println("The time that the file was created on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS String === " + jMetaDataGeneral.getFileCreatedDateLocalAsString());
        System.out.println("The time that the file was created on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS Boolean === " + jMetaDataGeneral.getFileCreatedDateLocalAsBoolean());
        System.out.println("The time that the file was created on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS BigInteger === " + jMetaDataGeneral.getFileCreatedDateLocalAsBigInteger());
        System.out.println("The time that the file was created on the file system (Warning: this field depends of local configuration, do not use it in an international database) AS URL === " + jMetaDataGeneral.getFileCreatedDateLocalAsURL());
        System.out.println("Original lyricist(s)/text writer(s). AS Integer === " + jMetaDataGeneral.getOriginalLyricistAsInteger());
        System.out.println("Original lyricist(s)/text writer(s). AS Long === " + jMetaDataGeneral.getOriginalLyricistAsLong());
        System.out.println("Original lyricist(s)/text writer(s). AS LocalDateTime === " + jMetaDataGeneral.getOriginalLyricistAsLocalDateTime());
        System.out.println("Original lyricist(s)/text writer(s). AS LocalTime === " + jMetaDataGeneral.getOriginalLyricistAsLocalTime());
        System.out.println("Original lyricist(s)/text writer(s). AS String === " + jMetaDataGeneral.getOriginalLyricistAsString());
        System.out.println("Original lyricist(s)/text writer(s). AS Boolean === " + jMetaDataGeneral.getOriginalLyricistAsBoolean());
        System.out.println("Original lyricist(s)/text writer(s). AS BigInteger === " + jMetaDataGeneral.getOriginalLyricistAsBigInteger());
        System.out.println("Original lyricist(s)/text writer(s). AS URL === " + jMetaDataGeneral.getOriginalLyricistAsURL());
        System.out.println("A short description of the contents, such as Two birds flying. AS Integer === " + jMetaDataGeneral.getDescriptionAsInteger());
        System.out.println("A short description of the contents, such as Two birds flying. AS Long === " + jMetaDataGeneral.getDescriptionAsLong());
        System.out.println("A short description of the contents, such as Two birds flying. AS LocalDateTime === " + jMetaDataGeneral.getDescriptionAsLocalDateTime());
        System.out.println("A short description of the contents, such as Two birds flying. AS LocalTime === " + jMetaDataGeneral.getDescriptionAsLocalTime());
        System.out.println("A short description of the contents, such as Two birds flying. AS String === " + jMetaDataGeneral.getDescriptionAsString());
        System.out.println("A short description of the contents, such as Two birds flying. AS Boolean === " + jMetaDataGeneral.getDescriptionAsBoolean());
        System.out.println("A short description of the contents, such as Two birds flying. AS BigInteger === " + jMetaDataGeneral.getDescriptionAsBigInteger());
        System.out.println("A short description of the contents, such as Two birds flying. AS URL === " + jMetaDataGeneral.getDescriptionAsURL());
        System.out.println("Text languages in this file, separated by / AS Integer === " + jMetaDataGeneral.getTextLanguageListAsInteger());
        System.out.println("Text languages in this file, separated by / AS Long === " + jMetaDataGeneral.getTextLanguageListAsLong());
        System.out.println("Text languages in this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getTextLanguageListAsLocalDateTime());
        System.out.println("Text languages in this file, separated by / AS LocalTime === " + jMetaDataGeneral.getTextLanguageListAsLocalTime());
        System.out.println("Text languages in this file, separated by / AS String === " + jMetaDataGeneral.getTextLanguageListAsString());
        System.out.println("Text languages in this file, separated by / AS Boolean === " + jMetaDataGeneral.getTextLanguageListAsBoolean());
        System.out.println("Text languages in this file, separated by / AS BigInteger === " + jMetaDataGeneral.getTextLanguageListAsBigInteger());
        System.out.println("Text languages in this file, separated by / AS URL === " + jMetaDataGeneral.getTextLanguageListAsURL());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. AS Integer === " + jMetaDataGeneral.getCroppedAsInteger());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. AS Long === " + jMetaDataGeneral.getCroppedAsLong());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. AS LocalDateTime === " + jMetaDataGeneral.getCroppedAsLocalDateTime());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. AS LocalTime === " + jMetaDataGeneral.getCroppedAsLocalTime());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. AS String === " + jMetaDataGeneral.getCroppedAsString());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. AS Boolean === " + jMetaDataGeneral.getCroppedAsBoolean());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. AS BigInteger === " + jMetaDataGeneral.getCroppedAsBigInteger());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. AS URL === " + jMetaDataGeneral.getCroppedAsURL());
        System.out.println("Last **Inform** call AS Integer === " + jMetaDataGeneral.getInformAsInteger());
        System.out.println("Last **Inform** call AS Long === " + jMetaDataGeneral.getInformAsLong());
        System.out.println("Last **Inform** call AS LocalDateTime === " + jMetaDataGeneral.getInformAsLocalDateTime());
        System.out.println("Last **Inform** call AS LocalTime === " + jMetaDataGeneral.getInformAsLocalTime());
        System.out.println("Last **Inform** call AS String === " + jMetaDataGeneral.getInformAsString());
        System.out.println("Last **Inform** call AS Boolean === " + jMetaDataGeneral.getInformAsBoolean());
        System.out.println("Last **Inform** call AS BigInteger === " + jMetaDataGeneral.getInformAsBigInteger());
        System.out.println("Last **Inform** call AS URL === " + jMetaDataGeneral.getInformAsURL());
        System.out.println("The time/date/year that the recording began. AS Integer === " + jMetaDataGeneral.getRecordedDateAsInteger());
        System.out.println("The time/date/year that the recording began. AS Long === " + jMetaDataGeneral.getRecordedDateAsLong());
        System.out.println("The time/date/year that the recording began. AS LocalDateTime === " + jMetaDataGeneral.getRecordedDateAsLocalDateTime());
        System.out.println("The time/date/year that the recording began. AS LocalTime === " + jMetaDataGeneral.getRecordedDateAsLocalTime());
        System.out.println("The time/date/year that the recording began. AS String === " + jMetaDataGeneral.getRecordedDateAsString());
        System.out.println("The time/date/year that the recording began. AS Boolean === " + jMetaDataGeneral.getRecordedDateAsBoolean());
        System.out.println("The time/date/year that the recording began. AS BigInteger === " + jMetaDataGeneral.getRecordedDateAsBigInteger());
        System.out.println("The time/date/year that the recording began. AS URL === " + jMetaDataGeneral.getRecordedDateAsURL());
        System.out.println("Menu languages in this file, separated by / AS Integer === " + jMetaDataGeneral.getMenuLanguageListAsInteger());
        System.out.println("Menu languages in this file, separated by / AS Long === " + jMetaDataGeneral.getMenuLanguageListAsLong());
        System.out.println("Menu languages in this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getMenuLanguageListAsLocalDateTime());
        System.out.println("Menu languages in this file, separated by / AS LocalTime === " + jMetaDataGeneral.getMenuLanguageListAsLocalTime());
        System.out.println("Menu languages in this file, separated by / AS String === " + jMetaDataGeneral.getMenuLanguageListAsString());
        System.out.println("Menu languages in this file, separated by / AS Boolean === " + jMetaDataGeneral.getMenuLanguageListAsBoolean());
        System.out.println("Menu languages in this file, separated by / AS BigInteger === " + jMetaDataGeneral.getMenuLanguageListAsBigInteger());
        System.out.println("Menu languages in this file, separated by / AS URL === " + jMetaDataGeneral.getMenuLanguageListAsURL());
        System.out.println("File size (with measure) AS Integer === " + jMetaDataGeneral.getFileSizeStringAsInteger());
        System.out.println("File size (with measure) AS Long === " + jMetaDataGeneral.getFileSizeStringAsLong());
        System.out.println("File size (with measure) AS LocalDateTime === " + jMetaDataGeneral.getFileSizeStringAsLocalDateTime());
        System.out.println("File size (with measure) AS LocalTime === " + jMetaDataGeneral.getFileSizeStringAsLocalTime());
        System.out.println("File size (with measure) AS String === " + jMetaDataGeneral.getFileSizeStringAsString());
        System.out.println("File size (with measure) AS Boolean === " + jMetaDataGeneral.getFileSizeStringAsBoolean());
        System.out.println("File size (with measure) AS BigInteger === " + jMetaDataGeneral.getFileSizeStringAsBigInteger());
        System.out.println("File size (with measure) AS URL === " + jMetaDataGeneral.getFileSizeStringAsURL());
        System.out.println("Reason for the law rating AS Integer === " + jMetaDataGeneral.getLawRatingReasonAsInteger());
        System.out.println("Reason for the law rating AS Long === " + jMetaDataGeneral.getLawRatingReasonAsLong());
        System.out.println("Reason for the law rating AS LocalDateTime === " + jMetaDataGeneral.getLawRatingReasonAsLocalDateTime());
        System.out.println("Reason for the law rating AS LocalTime === " + jMetaDataGeneral.getLawRatingReasonAsLocalTime());
        System.out.println("Reason for the law rating AS String === " + jMetaDataGeneral.getLawRatingReasonAsString());
        System.out.println("Reason for the law rating AS Boolean === " + jMetaDataGeneral.getLawRatingReasonAsBoolean());
        System.out.println("Reason for the law rating AS BigInteger === " + jMetaDataGeneral.getLawRatingReasonAsBigInteger());
        System.out.println("Reason for the law rating AS URL === " + jMetaDataGeneral.getLawRatingReasonAsURL());
        System.out.println("Compatible CodecIDs AS Integer === " + jMetaDataGeneral.getCodecIDCompatibleAsInteger());
        System.out.println("Compatible CodecIDs AS Long === " + jMetaDataGeneral.getCodecIDCompatibleAsLong());
        System.out.println("Compatible CodecIDs AS LocalDateTime === " + jMetaDataGeneral.getCodecIDCompatibleAsLocalDateTime());
        System.out.println("Compatible CodecIDs AS LocalTime === " + jMetaDataGeneral.getCodecIDCompatibleAsLocalTime());
        System.out.println("Compatible CodecIDs AS String === " + jMetaDataGeneral.getCodecIDCompatibleAsString());
        System.out.println("Compatible CodecIDs AS Boolean === " + jMetaDataGeneral.getCodecIDCompatibleAsBoolean());
        System.out.println("Compatible CodecIDs AS BigInteger === " + jMetaDataGeneral.getCodecIDCompatibleAsBigInteger());
        System.out.println("Compatible CodecIDs AS URL === " + jMetaDataGeneral.getCodecIDCompatibleAsURL());
        System.out.println("Stores dots per inch setting of the digitizer used to produce the file AS Integer === " + jMetaDataGeneral.getDotsPerInchAsInteger());
        System.out.println("Stores dots per inch setting of the digitizer used to produce the file AS Long === " + jMetaDataGeneral.getDotsPerInchAsLong());
        System.out.println("Stores dots per inch setting of the digitizer used to produce the file AS LocalDateTime === " + jMetaDataGeneral.getDotsPerInchAsLocalDateTime());
        System.out.println("Stores dots per inch setting of the digitizer used to produce the file AS LocalTime === " + jMetaDataGeneral.getDotsPerInchAsLocalTime());
        System.out.println("Stores dots per inch setting of the digitizer used to produce the file AS String === " + jMetaDataGeneral.getDotsPerInchAsString());
        System.out.println("Stores dots per inch setting of the digitizer used to produce the file AS Boolean === " + jMetaDataGeneral.getDotsPerInchAsBoolean());
        System.out.println("Stores dots per inch setting of the digitizer used to produce the file AS BigInteger === " + jMetaDataGeneral.getDotsPerInchAsBigInteger());
        System.out.println("Stores dots per inch setting of the digitizer used to produce the file AS URL === " + jMetaDataGeneral.getDotsPerInchAsURL());
        System.out.println("The date, the owner last played an item AS Integer === " + jMetaDataGeneral.getPlayedLastDateAsInteger());
        System.out.println("The date, the owner last played an item AS Long === " + jMetaDataGeneral.getPlayedLastDateAsLong());
        System.out.println("The date, the owner last played an item AS LocalDateTime === " + jMetaDataGeneral.getPlayedLastDateAsLocalDateTime());
        System.out.println("The date, the owner last played an item AS LocalTime === " + jMetaDataGeneral.getPlayedLastDateAsLocalTime());
        System.out.println("The date, the owner last played an item AS String === " + jMetaDataGeneral.getPlayedLastDateAsString());
        System.out.println("The date, the owner last played an item AS Boolean === " + jMetaDataGeneral.getPlayedLastDateAsBoolean());
        System.out.println("The date, the owner last played an item AS BigInteger === " + jMetaDataGeneral.getPlayedLastDateAsBigInteger());
        System.out.println("The date, the owner last played an item AS URL === " + jMetaDataGeneral.getPlayedLastDateAsURL());
        System.out.println("Folder name only AS Integer === " + jMetaDataGeneral.getFolderNameAsInteger());
        System.out.println("Folder name only AS Long === " + jMetaDataGeneral.getFolderNameAsLong());
        System.out.println("Folder name only AS LocalDateTime === " + jMetaDataGeneral.getFolderNameAsLocalDateTime());
        System.out.println("Folder name only AS LocalTime === " + jMetaDataGeneral.getFolderNameAsLocalTime());
        System.out.println("Folder name only AS String === " + jMetaDataGeneral.getFolderNameAsString());
        System.out.println("Folder name only AS Boolean === " + jMetaDataGeneral.getFolderNameAsBoolean());
        System.out.println("Folder name only AS BigInteger === " + jMetaDataGeneral.getFolderNameAsBigInteger());
        System.out.println("Folder name only AS URL === " + jMetaDataGeneral.getFolderNameAsURL());
        System.out.println("Name of the codirector. AS Integer === " + jMetaDataGeneral.getCoDirectorAsInteger());
        System.out.println("Name of the codirector. AS Long === " + jMetaDataGeneral.getCoDirectorAsLong());
        System.out.println("Name of the codirector. AS LocalDateTime === " + jMetaDataGeneral.getCoDirectorAsLocalDateTime());
        System.out.println("Name of the codirector. AS LocalTime === " + jMetaDataGeneral.getCoDirectorAsLocalTime());
        System.out.println("Name of the codirector. AS String === " + jMetaDataGeneral.getCoDirectorAsString());
        System.out.println("Name of the codirector. AS Boolean === " + jMetaDataGeneral.getCoDirectorAsBoolean());
        System.out.println("Name of the codirector. AS BigInteger === " + jMetaDataGeneral.getCoDirectorAsBigInteger());
        System.out.println("Name of the codirector. AS URL === " + jMetaDataGeneral.getCoDirectorAsURL());
        System.out.println("Number of times an item was played AS Integer === " + jMetaDataGeneral.getPlayedCountAsInteger());
        System.out.println("Number of times an item was played AS Long === " + jMetaDataGeneral.getPlayedCountAsLong());
        System.out.println("Number of times an item was played AS LocalDateTime === " + jMetaDataGeneral.getPlayedCountAsLocalDateTime());
        System.out.println("Number of times an item was played AS LocalTime === " + jMetaDataGeneral.getPlayedCountAsLocalTime());
        System.out.println("Number of times an item was played AS String === " + jMetaDataGeneral.getPlayedCountAsString());
        System.out.println("Number of times an item was played AS Boolean === " + jMetaDataGeneral.getPlayedCountAsBoolean());
        System.out.println("Number of times an item was played AS BigInteger === " + jMetaDataGeneral.getPlayedCountAsBigInteger());
        System.out.println("Number of times an item was played AS URL === " + jMetaDataGeneral.getPlayedCountAsURL());
        System.out.println("Number of the stream (base=0) AS Integer === " + jMetaDataGeneral.getStreamKindIDAsInteger());
        System.out.println("Number of the stream (base=0) AS Long === " + jMetaDataGeneral.getStreamKindIDAsLong());
        System.out.println("Number of the stream (base=0) AS LocalDateTime === " + jMetaDataGeneral.getStreamKindIDAsLocalDateTime());
        System.out.println("Number of the stream (base=0) AS LocalTime === " + jMetaDataGeneral.getStreamKindIDAsLocalTime());
        System.out.println("Number of the stream (base=0) AS String === " + jMetaDataGeneral.getStreamKindIDAsString());
        System.out.println("Number of the stream (base=0) AS Boolean === " + jMetaDataGeneral.getStreamKindIDAsBoolean());
        System.out.println("Number of the stream (base=0) AS BigInteger === " + jMetaDataGeneral.getStreamKindIDAsBigInteger());
        System.out.println("Number of the stream (base=0) AS URL === " + jMetaDataGeneral.getStreamKindIDAsURL());
        System.out.println("Folder name only of the last file (in the case of a sequence of files) AS Integer === " + jMetaDataGeneral.getFolderNameLastAsInteger());
        System.out.println("Folder name only of the last file (in the case of a sequence of files) AS Long === " + jMetaDataGeneral.getFolderNameLastAsLong());
        System.out.println("Folder name only of the last file (in the case of a sequence of files) AS LocalDateTime === " + jMetaDataGeneral.getFolderNameLastAsLocalDateTime());
        System.out.println("Folder name only of the last file (in the case of a sequence of files) AS LocalTime === " + jMetaDataGeneral.getFolderNameLastAsLocalTime());
        System.out.println("Folder name only of the last file (in the case of a sequence of files) AS String === " + jMetaDataGeneral.getFolderNameLastAsString());
        System.out.println("Folder name only of the last file (in the case of a sequence of files) AS Boolean === " + jMetaDataGeneral.getFolderNameLastAsBoolean());
        System.out.println("Folder name only of the last file (in the case of a sequence of files) AS BigInteger === " + jMetaDataGeneral.getFolderNameLastAsBigInteger());
        System.out.println("Folder name only of the last file (in the case of a sequence of files) AS URL === " + jMetaDataGeneral.getFolderNameLastAsURL());
        System.out.println("A label-specific catalogue number used to identify the release. e.g. TIC 01. AS Integer === " + jMetaDataGeneral.getCatalogNumberAsInteger());
        System.out.println("A label-specific catalogue number used to identify the release. e.g. TIC 01. AS Long === " + jMetaDataGeneral.getCatalogNumberAsLong());
        System.out.println("A label-specific catalogue number used to identify the release. e.g. TIC 01. AS LocalDateTime === " + jMetaDataGeneral.getCatalogNumberAsLocalDateTime());
        System.out.println("A label-specific catalogue number used to identify the release. e.g. TIC 01. AS LocalTime === " + jMetaDataGeneral.getCatalogNumberAsLocalTime());
        System.out.println("A label-specific catalogue number used to identify the release. e.g. TIC 01. AS String === " + jMetaDataGeneral.getCatalogNumberAsString());
        System.out.println("A label-specific catalogue number used to identify the release. e.g. TIC 01. AS Boolean === " + jMetaDataGeneral.getCatalogNumberAsBoolean());
        System.out.println("A label-specific catalogue number used to identify the release. e.g. TIC 01. AS BigInteger === " + jMetaDataGeneral.getCatalogNumberAsBigInteger());
        System.out.println("A label-specific catalogue number used to identify the release. e.g. TIC 01. AS URL === " + jMetaDataGeneral.getCatalogNumberAsURL());
        System.out.println("Location where track was recorded. (See COMPOSITION_LOCATION for format) AS Integer === " + jMetaDataGeneral.getRecordedLocationAsInteger());
        System.out.println("Location where track was recorded. (See COMPOSITION_LOCATION for format) AS Long === " + jMetaDataGeneral.getRecordedLocationAsLong());
        System.out.println("Location where track was recorded. (See COMPOSITION_LOCATION for format) AS LocalDateTime === " + jMetaDataGeneral.getRecordedLocationAsLocalDateTime());
        System.out.println("Location where track was recorded. (See COMPOSITION_LOCATION for format) AS LocalTime === " + jMetaDataGeneral.getRecordedLocationAsLocalTime());
        System.out.println("Location where track was recorded. (See COMPOSITION_LOCATION for format) AS String === " + jMetaDataGeneral.getRecordedLocationAsString());
        System.out.println("Location where track was recorded. (See COMPOSITION_LOCATION for format) AS Boolean === " + jMetaDataGeneral.getRecordedLocationAsBoolean());
        System.out.println("Location where track was recorded. (See COMPOSITION_LOCATION for format) AS BigInteger === " + jMetaDataGeneral.getRecordedLocationAsBigInteger());
        System.out.println("Location where track was recorded. (See COMPOSITION_LOCATION for format) AS URL === " + jMetaDataGeneral.getRecordedLocationAsURL());
        System.out.println("File extension only of the last file (in the case of a sequence of files) AS Integer === " + jMetaDataGeneral.getFileExtensionLastAsInteger());
        System.out.println("File extension only of the last file (in the case of a sequence of files) AS Long === " + jMetaDataGeneral.getFileExtensionLastAsLong());
        System.out.println("File extension only of the last file (in the case of a sequence of files) AS LocalDateTime === " + jMetaDataGeneral.getFileExtensionLastAsLocalDateTime());
        System.out.println("File extension only of the last file (in the case of a sequence of files) AS LocalTime === " + jMetaDataGeneral.getFileExtensionLastAsLocalTime());
        System.out.println("File extension only of the last file (in the case of a sequence of files) AS String === " + jMetaDataGeneral.getFileExtensionLastAsString());
        System.out.println("File extension only of the last file (in the case of a sequence of files) AS Boolean === " + jMetaDataGeneral.getFileExtensionLastAsBoolean());
        System.out.println("File extension only of the last file (in the case of a sequence of files) AS BigInteger === " + jMetaDataGeneral.getFileExtensionLastAsBigInteger());
        System.out.println("File extension only of the last file (in the case of a sequence of files) AS URL === " + jMetaDataGeneral.getFileExtensionLastAsURL());
        System.out.println("The date, the owner first played an item AS Integer === " + jMetaDataGeneral.getPlayedFirstDateAsInteger());
        System.out.println("The date, the owner first played an item AS Long === " + jMetaDataGeneral.getPlayedFirstDateAsLong());
        System.out.println("The date, the owner first played an item AS LocalDateTime === " + jMetaDataGeneral.getPlayedFirstDateAsLocalDateTime());
        System.out.println("The date, the owner first played an item AS LocalTime === " + jMetaDataGeneral.getPlayedFirstDateAsLocalTime());
        System.out.println("The date, the owner first played an item AS String === " + jMetaDataGeneral.getPlayedFirstDateAsString());
        System.out.println("The date, the owner first played an item AS Boolean === " + jMetaDataGeneral.getPlayedFirstDateAsBoolean());
        System.out.println("The date, the owner first played an item AS BigInteger === " + jMetaDataGeneral.getPlayedFirstDateAsBigInteger());
        System.out.println("The date, the owner first played an item AS URL === " + jMetaDataGeneral.getPlayedFirstDateAsURL());
        System.out.println("Link to a description of this format AS Integer === " + jMetaDataGeneral.getFormatUrlAsInteger());
        System.out.println("Link to a description of this format AS Long === " + jMetaDataGeneral.getFormatUrlAsLong());
        System.out.println("Link to a description of this format AS LocalDateTime === " + jMetaDataGeneral.getFormatUrlAsLocalDateTime());
        System.out.println("Link to a description of this format AS LocalTime === " + jMetaDataGeneral.getFormatUrlAsLocalTime());
        System.out.println("Link to a description of this format AS String === " + jMetaDataGeneral.getFormatUrlAsString());
        System.out.println("Link to a description of this format AS Boolean === " + jMetaDataGeneral.getFormatUrlAsBoolean());
        System.out.println("Link to a description of this format AS BigInteger === " + jMetaDataGeneral.getFormatUrlAsBigInteger());
        System.out.println("Link to a description of this format AS URL === " + jMetaDataGeneral.getFormatUrlAsURL());
        System.out.println("Frames per second (with measurement) AS Integer === " + jMetaDataGeneral.getFrameRateStringAsInteger());
        System.out.println("Frames per second (with measurement) AS Long === " + jMetaDataGeneral.getFrameRateStringAsLong());
        System.out.println("Frames per second (with measurement) AS LocalDateTime === " + jMetaDataGeneral.getFrameRateStringAsLocalDateTime());
        System.out.println("Frames per second (with measurement) AS LocalTime === " + jMetaDataGeneral.getFrameRateStringAsLocalTime());
        System.out.println("Frames per second (with measurement) AS String === " + jMetaDataGeneral.getFrameRateStringAsString());
        System.out.println("Frames per second (with measurement) AS Boolean === " + jMetaDataGeneral.getFrameRateStringAsBoolean());
        System.out.println("Frames per second (with measurement) AS BigInteger === " + jMetaDataGeneral.getFrameRateStringAsBigInteger());
        System.out.println("Frames per second (with measurement) AS URL === " + jMetaDataGeneral.getFrameRateStringAsURL());
        System.out.println("Album/Performer/Sort AS Integer === " + jMetaDataGeneral.getAlbumPerformerSortAsInteger());
        System.out.println("Album/Performer/Sort AS Long === " + jMetaDataGeneral.getAlbumPerformerSortAsLong());
        System.out.println("Album/Performer/Sort AS LocalDateTime === " + jMetaDataGeneral.getAlbumPerformerSortAsLocalDateTime());
        System.out.println("Album/Performer/Sort AS LocalTime === " + jMetaDataGeneral.getAlbumPerformerSortAsLocalTime());
        System.out.println("Album/Performer/Sort AS String === " + jMetaDataGeneral.getAlbumPerformerSortAsString());
        System.out.println("Album/Performer/Sort AS Boolean === " + jMetaDataGeneral.getAlbumPerformerSortAsBoolean());
        System.out.println("Album/Performer/Sort AS BigInteger === " + jMetaDataGeneral.getAlbumPerformerSortAsBigInteger());
        System.out.println("Album/Performer/Sort AS URL === " + jMetaDataGeneral.getAlbumPerformerSortAsURL());
        System.out.println("Name of the movie. Eg : Starwars, a new hope AS Integer === " + jMetaDataGeneral.getMovieAsInteger());
        System.out.println("Name of the movie. Eg : Starwars, a new hope AS Long === " + jMetaDataGeneral.getMovieAsLong());
        System.out.println("Name of the movie. Eg : Starwars, a new hope AS LocalDateTime === " + jMetaDataGeneral.getMovieAsLocalDateTime());
        System.out.println("Name of the movie. Eg : Starwars, a new hope AS LocalTime === " + jMetaDataGeneral.getMovieAsLocalTime());
        System.out.println("Name of the movie. Eg : Starwars, a new hope AS String === " + jMetaDataGeneral.getMovieAsString());
        System.out.println("Name of the movie. Eg : Starwars, a new hope AS Boolean === " + jMetaDataGeneral.getMovieAsBoolean());
        System.out.println("Name of the movie. Eg : Starwars, a new hope AS BigInteger === " + jMetaDataGeneral.getMovieAsBigInteger());
        System.out.println("Name of the movie. Eg : Starwars, a new hope AS URL === " + jMetaDataGeneral.getMovieAsURL());
        System.out.println("Name of the original composer. AS Integer === " + jMetaDataGeneral.getComposerAsInteger());
        System.out.println("Name of the original composer. AS Long === " + jMetaDataGeneral.getComposerAsLong());
        System.out.println("Name of the original composer. AS LocalDateTime === " + jMetaDataGeneral.getComposerAsLocalDateTime());
        System.out.println("Name of the original composer. AS LocalTime === " + jMetaDataGeneral.getComposerAsLocalTime());
        System.out.println("Name of the original composer. AS String === " + jMetaDataGeneral.getComposerAsString());
        System.out.println("Name of the original composer. AS Boolean === " + jMetaDataGeneral.getComposerAsBoolean());
        System.out.println("Name of the original composer. AS BigInteger === " + jMetaDataGeneral.getComposerAsBigInteger());
        System.out.println("Name of the original composer. AS URL === " + jMetaDataGeneral.getComposerAsURL());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. e.g. 16:9 to 4:3, top and bottom AS Integer === " + jMetaDataGeneral.getOriginalSourceFormCroppedAsInteger());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. e.g. 16:9 to 4:3, top and bottom AS Long === " + jMetaDataGeneral.getOriginalSourceFormCroppedAsLong());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. e.g. 16:9 to 4:3, top and bottom AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceFormCroppedAsLocalDateTime());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. e.g. 16:9 to 4:3, top and bottom AS LocalTime === " + jMetaDataGeneral.getOriginalSourceFormCroppedAsLocalTime());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. e.g. 16:9 to 4:3, top and bottom AS String === " + jMetaDataGeneral.getOriginalSourceFormCroppedAsString());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. e.g. 16:9 to 4:3, top and bottom AS Boolean === " + jMetaDataGeneral.getOriginalSourceFormCroppedAsBoolean());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. e.g. 16:9 to 4:3, top and bottom AS BigInteger === " + jMetaDataGeneral.getOriginalSourceFormCroppedAsBigInteger());
        System.out.println("Describes whether an image has been cropped and, if so, how it was cropped. e.g. 16:9 to 4:3, top and bottom AS URL === " + jMetaDataGeneral.getOriginalSourceFormCroppedAsURL());
        System.out.println("Track/Sort AS Integer === " + jMetaDataGeneral.getTrackSortAsInteger());
        System.out.println("Track/Sort AS Long === " + jMetaDataGeneral.getTrackSortAsLong());
        System.out.println("Track/Sort AS LocalDateTime === " + jMetaDataGeneral.getTrackSortAsLocalDateTime());
        System.out.println("Track/Sort AS LocalTime === " + jMetaDataGeneral.getTrackSortAsLocalTime());
        System.out.println("Track/Sort AS String === " + jMetaDataGeneral.getTrackSortAsString());
        System.out.println("Track/Sort AS Boolean === " + jMetaDataGeneral.getTrackSortAsBoolean());
        System.out.println("Track/Sort AS BigInteger === " + jMetaDataGeneral.getTrackSortAsBigInteger());
        System.out.println("Track/Sort AS URL === " + jMetaDataGeneral.getTrackSortAsURL());
        System.out.println("Main production studio  AS Integer === " + jMetaDataGeneral.getProductionStudioAsInteger());
        System.out.println("Main production studio  AS Long === " + jMetaDataGeneral.getProductionStudioAsLong());
        System.out.println("Main production studio  AS LocalDateTime === " + jMetaDataGeneral.getProductionStudioAsLocalDateTime());
        System.out.println("Main production studio  AS LocalTime === " + jMetaDataGeneral.getProductionStudioAsLocalTime());
        System.out.println("Main production studio  AS String === " + jMetaDataGeneral.getProductionStudioAsString());
        System.out.println("Main production studio  AS Boolean === " + jMetaDataGeneral.getProductionStudioAsBoolean());
        System.out.println("Main production studio  AS BigInteger === " + jMetaDataGeneral.getProductionStudioAsBigInteger());
        System.out.println("Main production studio  AS URL === " + jMetaDataGeneral.getProductionStudioAsURL());
        System.out.println("Number of audio streams AS Integer === " + jMetaDataGeneral.getAudioCountAsInteger());
        System.out.println("Number of audio streams AS Long === " + jMetaDataGeneral.getAudioCountAsLong());
        System.out.println("Number of audio streams AS LocalDateTime === " + jMetaDataGeneral.getAudioCountAsLocalDateTime());
        System.out.println("Number of audio streams AS LocalTime === " + jMetaDataGeneral.getAudioCountAsLocalTime());
        System.out.println("Number of audio streams AS String === " + jMetaDataGeneral.getAudioCountAsString());
        System.out.println("Number of audio streams AS Boolean === " + jMetaDataGeneral.getAudioCountAsBoolean());
        System.out.println("Number of audio streams AS BigInteger === " + jMetaDataGeneral.getAudioCountAsBigInteger());
        System.out.println("Number of audio streams AS URL === " + jMetaDataGeneral.getAudioCountAsURL());
        System.out.println("Name of the chapter. AS Integer === " + jMetaDataGeneral.getChapterAsInteger());
        System.out.println("Name of the chapter. AS Long === " + jMetaDataGeneral.getChapterAsLong());
        System.out.println("Name of the chapter. AS LocalDateTime === " + jMetaDataGeneral.getChapterAsLocalDateTime());
        System.out.println("Name of the chapter. AS LocalTime === " + jMetaDataGeneral.getChapterAsLocalTime());
        System.out.println("Name of the chapter. AS String === " + jMetaDataGeneral.getChapterAsString());
        System.out.println("Name of the chapter. AS Boolean === " + jMetaDataGeneral.getChapterAsBoolean());
        System.out.println("Name of the chapter. AS BigInteger === " + jMetaDataGeneral.getChapterAsBigInteger());
        System.out.println("Name of the chapter. AS URL === " + jMetaDataGeneral.getChapterAsURL());
        System.out.println("A description of the story line of the item. AS Integer === " + jMetaDataGeneral.getSynopsisAsInteger());
        System.out.println("A description of the story line of the item. AS Long === " + jMetaDataGeneral.getSynopsisAsLong());
        System.out.println("A description of the story line of the item. AS LocalDateTime === " + jMetaDataGeneral.getSynopsisAsLocalDateTime());
        System.out.println("A description of the story line of the item. AS LocalTime === " + jMetaDataGeneral.getSynopsisAsLocalTime());
        System.out.println("A description of the story line of the item. AS String === " + jMetaDataGeneral.getSynopsisAsString());
        System.out.println("A description of the story line of the item. AS Boolean === " + jMetaDataGeneral.getSynopsisAsBoolean());
        System.out.println("A description of the story line of the item. AS BigInteger === " + jMetaDataGeneral.getSynopsisAsBigInteger());
        System.out.println("A description of the story line of the item. AS URL === " + jMetaDataGeneral.getSynopsisAsURL());
        System.out.println("Name of the product AS Integer === " + jMetaDataGeneral.getEncodedApplicationNameAsInteger());
        System.out.println("Name of the product AS Long === " + jMetaDataGeneral.getEncodedApplicationNameAsLong());
        System.out.println("Name of the product AS LocalDateTime === " + jMetaDataGeneral.getEncodedApplicationNameAsLocalDateTime());
        System.out.println("Name of the product AS LocalTime === " + jMetaDataGeneral.getEncodedApplicationNameAsLocalTime());
        System.out.println("Name of the product AS String === " + jMetaDataGeneral.getEncodedApplicationNameAsString());
        System.out.println("Name of the product AS Boolean === " + jMetaDataGeneral.getEncodedApplicationNameAsBoolean());
        System.out.println("Name of the product AS BigInteger === " + jMetaDataGeneral.getEncodedApplicationNameAsBigInteger());
        System.out.println("Name of the product AS URL === " + jMetaDataGeneral.getEncodedApplicationNameAsURL());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Integer === " + jMetaDataGeneral.getUniqueIDStringAsInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Long === " + jMetaDataGeneral.getUniqueIDStringAsLong());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalDateTime === " + jMetaDataGeneral.getUniqueIDStringAsLocalDateTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS LocalTime === " + jMetaDataGeneral.getUniqueIDStringAsLocalTime());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS String === " + jMetaDataGeneral.getUniqueIDStringAsString());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS Boolean === " + jMetaDataGeneral.getUniqueIDStringAsBoolean());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS BigInteger === " + jMetaDataGeneral.getUniqueIDStringAsBigInteger());
        System.out.println("The unique ID for this stream, should be copied with stream copy AS URL === " + jMetaDataGeneral.getUniqueIDStringAsURL());
        System.out.println("The main genre of the audio or video. e.g. classical, ambient-house, synthpop, sci-fi, drama, etc. AS Integer === " + jMetaDataGeneral.getGenreAsInteger());
        System.out.println("The main genre of the audio or video. e.g. classical, ambient-house, synthpop, sci-fi, drama, etc. AS Long === " + jMetaDataGeneral.getGenreAsLong());
        System.out.println("The main genre of the audio or video. e.g. classical, ambient-house, synthpop, sci-fi, drama, etc. AS LocalDateTime === " + jMetaDataGeneral.getGenreAsLocalDateTime());
        System.out.println("The main genre of the audio or video. e.g. classical, ambient-house, synthpop, sci-fi, drama, etc. AS LocalTime === " + jMetaDataGeneral.getGenreAsLocalTime());
        System.out.println("The main genre of the audio or video. e.g. classical, ambient-house, synthpop, sci-fi, drama, etc. AS String === " + jMetaDataGeneral.getGenreAsString());
        System.out.println("The main genre of the audio or video. e.g. classical, ambient-house, synthpop, sci-fi, drama, etc. AS Boolean === " + jMetaDataGeneral.getGenreAsBoolean());
        System.out.println("The main genre of the audio or video. e.g. classical, ambient-house, synthpop, sci-fi, drama, etc. AS BigInteger === " + jMetaDataGeneral.getGenreAsBigInteger());
        System.out.println("The main genre of the audio or video. e.g. classical, ambient-house, synthpop, sci-fi, drama, etc. AS URL === " + jMetaDataGeneral.getGenreAsURL());
        System.out.println("The time/date/year that the item was tranfered to a digitalmedium. AS Integer === " + jMetaDataGeneral.getMasteredDateAsInteger());
        System.out.println("The time/date/year that the item was tranfered to a digitalmedium. AS Long === " + jMetaDataGeneral.getMasteredDateAsLong());
        System.out.println("The time/date/year that the item was tranfered to a digitalmedium. AS LocalDateTime === " + jMetaDataGeneral.getMasteredDateAsLocalDateTime());
        System.out.println("The time/date/year that the item was tranfered to a digitalmedium. AS LocalTime === " + jMetaDataGeneral.getMasteredDateAsLocalTime());
        System.out.println("The time/date/year that the item was tranfered to a digitalmedium. AS String === " + jMetaDataGeneral.getMasteredDateAsString());
        System.out.println("The time/date/year that the item was tranfered to a digitalmedium. AS Boolean === " + jMetaDataGeneral.getMasteredDateAsBoolean());
        System.out.println("The time/date/year that the item was tranfered to a digitalmedium. AS BigInteger === " + jMetaDataGeneral.getMasteredDateAsBigInteger());
        System.out.println("The time/date/year that the item was tranfered to a digitalmedium. AS URL === " + jMetaDataGeneral.getMasteredDateAsURL());
        System.out.println("Profile of the Format AS Integer === " + jMetaDataGeneral.getFormatProfileAsInteger());
        System.out.println("Profile of the Format AS Long === " + jMetaDataGeneral.getFormatProfileAsLong());
        System.out.println("Profile of the Format AS LocalDateTime === " + jMetaDataGeneral.getFormatProfileAsLocalDateTime());
        System.out.println("Profile of the Format AS LocalTime === " + jMetaDataGeneral.getFormatProfileAsLocalTime());
        System.out.println("Profile of the Format AS String === " + jMetaDataGeneral.getFormatProfileAsString());
        System.out.println("Profile of the Format AS Boolean === " + jMetaDataGeneral.getFormatProfileAsBoolean());
        System.out.println("Profile of the Format AS BigInteger === " + jMetaDataGeneral.getFormatProfileAsBigInteger());
        System.out.println("Profile of the Format AS URL === " + jMetaDataGeneral.getFormatProfileAsURL());
        System.out.println("StreamSize_Demuxed/String1 AS Integer === " + jMetaDataGeneral.getStreamSizeDemuxedString1AsInteger());
        System.out.println("StreamSize_Demuxed/String1 AS Long === " + jMetaDataGeneral.getStreamSizeDemuxedString1AsLong());
        System.out.println("StreamSize_Demuxed/String1 AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeDemuxedString1AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String1 AS LocalTime === " + jMetaDataGeneral.getStreamSizeDemuxedString1AsLocalTime());
        System.out.println("StreamSize_Demuxed/String1 AS String === " + jMetaDataGeneral.getStreamSizeDemuxedString1AsString());
        System.out.println("StreamSize_Demuxed/String1 AS Boolean === " + jMetaDataGeneral.getStreamSizeDemuxedString1AsBoolean());
        System.out.println("StreamSize_Demuxed/String1 AS BigInteger === " + jMetaDataGeneral.getStreamSizeDemuxedString1AsBigInteger());
        System.out.println("StreamSize_Demuxed/String1 AS URL === " + jMetaDataGeneral.getStreamSizeDemuxedString1AsURL());
        System.out.println("EPG_Positions_End AS Integer === " + jMetaDataGeneral.getEPGPositionsEndAsInteger());
        System.out.println("EPG_Positions_End AS Long === " + jMetaDataGeneral.getEPGPositionsEndAsLong());
        System.out.println("EPG_Positions_End AS LocalDateTime === " + jMetaDataGeneral.getEPGPositionsEndAsLocalDateTime());
        System.out.println("EPG_Positions_End AS LocalTime === " + jMetaDataGeneral.getEPGPositionsEndAsLocalTime());
        System.out.println("EPG_Positions_End AS String === " + jMetaDataGeneral.getEPGPositionsEndAsString());
        System.out.println("EPG_Positions_End AS Boolean === " + jMetaDataGeneral.getEPGPositionsEndAsBoolean());
        System.out.println("EPG_Positions_End AS BigInteger === " + jMetaDataGeneral.getEPGPositionsEndAsBigInteger());
        System.out.println("EPG_Positions_End AS URL === " + jMetaDataGeneral.getEPGPositionsEndAsURL());
        System.out.println("StreamSize_Demuxed/String2 AS Integer === " + jMetaDataGeneral.getStreamSizeDemuxedString2AsInteger());
        System.out.println("StreamSize_Demuxed/String2 AS Long === " + jMetaDataGeneral.getStreamSizeDemuxedString2AsLong());
        System.out.println("StreamSize_Demuxed/String2 AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeDemuxedString2AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String2 AS LocalTime === " + jMetaDataGeneral.getStreamSizeDemuxedString2AsLocalTime());
        System.out.println("StreamSize_Demuxed/String2 AS String === " + jMetaDataGeneral.getStreamSizeDemuxedString2AsString());
        System.out.println("StreamSize_Demuxed/String2 AS Boolean === " + jMetaDataGeneral.getStreamSizeDemuxedString2AsBoolean());
        System.out.println("StreamSize_Demuxed/String2 AS BigInteger === " + jMetaDataGeneral.getStreamSizeDemuxedString2AsBigInteger());
        System.out.println("StreamSize_Demuxed/String2 AS URL === " + jMetaDataGeneral.getStreamSizeDemuxedString2AsURL());
        System.out.println("StreamSize_Demuxed/String3 AS Integer === " + jMetaDataGeneral.getStreamSizeDemuxedString3AsInteger());
        System.out.println("StreamSize_Demuxed/String3 AS Long === " + jMetaDataGeneral.getStreamSizeDemuxedString3AsLong());
        System.out.println("StreamSize_Demuxed/String3 AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeDemuxedString3AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String3 AS LocalTime === " + jMetaDataGeneral.getStreamSizeDemuxedString3AsLocalTime());
        System.out.println("StreamSize_Demuxed/String3 AS String === " + jMetaDataGeneral.getStreamSizeDemuxedString3AsString());
        System.out.println("StreamSize_Demuxed/String3 AS Boolean === " + jMetaDataGeneral.getStreamSizeDemuxedString3AsBoolean());
        System.out.println("StreamSize_Demuxed/String3 AS BigInteger === " + jMetaDataGeneral.getStreamSizeDemuxedString3AsBigInteger());
        System.out.println("StreamSize_Demuxed/String3 AS URL === " + jMetaDataGeneral.getStreamSizeDemuxedString3AsURL());
        System.out.println("StreamSize_Demuxed/String4 AS Integer === " + jMetaDataGeneral.getStreamSizeDemuxedString4AsInteger());
        System.out.println("StreamSize_Demuxed/String4 AS Long === " + jMetaDataGeneral.getStreamSizeDemuxedString4AsLong());
        System.out.println("StreamSize_Demuxed/String4 AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeDemuxedString4AsLocalDateTime());
        System.out.println("StreamSize_Demuxed/String4 AS LocalTime === " + jMetaDataGeneral.getStreamSizeDemuxedString4AsLocalTime());
        System.out.println("StreamSize_Demuxed/String4 AS String === " + jMetaDataGeneral.getStreamSizeDemuxedString4AsString());
        System.out.println("StreamSize_Demuxed/String4 AS Boolean === " + jMetaDataGeneral.getStreamSizeDemuxedString4AsBoolean());
        System.out.println("StreamSize_Demuxed/String4 AS BigInteger === " + jMetaDataGeneral.getStreamSizeDemuxedString4AsBigInteger());
        System.out.println("StreamSize_Demuxed/String4 AS URL === " + jMetaDataGeneral.getStreamSizeDemuxedString4AsURL());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Integer === " + jMetaDataGeneral.getStreamSizeDemuxedString5AsInteger());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Long === " + jMetaDataGeneral.getStreamSizeDemuxedString5AsLong());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeDemuxedString5AsLocalDateTime());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS LocalTime === " + jMetaDataGeneral.getStreamSizeDemuxedString5AsLocalTime());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS String === " + jMetaDataGeneral.getStreamSizeDemuxedString5AsString());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS Boolean === " + jMetaDataGeneral.getStreamSizeDemuxedString5AsBoolean());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS BigInteger === " + jMetaDataGeneral.getStreamSizeDemuxedString5AsBigInteger());
        System.out.println("StreamSize_Demuxed in with percentage value (note: theoritical value, not for real use) AS URL === " + jMetaDataGeneral.getStreamSizeDemuxedString5AsURL());
        System.out.println("Encryption_InitializationVector AS Integer === " + jMetaDataGeneral.getEncryptionInitializationVectorAsInteger());
        System.out.println("Encryption_InitializationVector AS Long === " + jMetaDataGeneral.getEncryptionInitializationVectorAsLong());
        System.out.println("Encryption_InitializationVector AS LocalDateTime === " + jMetaDataGeneral.getEncryptionInitializationVectorAsLocalDateTime());
        System.out.println("Encryption_InitializationVector AS LocalTime === " + jMetaDataGeneral.getEncryptionInitializationVectorAsLocalTime());
        System.out.println("Encryption_InitializationVector AS String === " + jMetaDataGeneral.getEncryptionInitializationVectorAsString());
        System.out.println("Encryption_InitializationVector AS Boolean === " + jMetaDataGeneral.getEncryptionInitializationVectorAsBoolean());
        System.out.println("Encryption_InitializationVector AS BigInteger === " + jMetaDataGeneral.getEncryptionInitializationVectorAsBigInteger());
        System.out.println("Encryption_InitializationVector AS URL === " + jMetaDataGeneral.getEncryptionInitializationVectorAsURL());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS Integer === " + jMetaDataGeneral.getAlbumReplayGainGainAsInteger());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS Long === " + jMetaDataGeneral.getAlbumReplayGainGainAsLong());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS LocalDateTime === " + jMetaDataGeneral.getAlbumReplayGainGainAsLocalDateTime());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS LocalTime === " + jMetaDataGeneral.getAlbumReplayGainGainAsLocalTime());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS String === " + jMetaDataGeneral.getAlbumReplayGainGainAsString());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS Boolean === " + jMetaDataGeneral.getAlbumReplayGainGainAsBoolean());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS BigInteger === " + jMetaDataGeneral.getAlbumReplayGainGainAsBigInteger());
        System.out.println("The gain to apply to reach 89dB SPL on playback AS URL === " + jMetaDataGeneral.getAlbumReplayGainGainAsURL());
        System.out.println("StreamSize_Demuxed in with percentage value AS Integer === " + jMetaDataGeneral.getStreamSizeDemuxedStringAsInteger());
        System.out.println("StreamSize_Demuxed in with percentage value AS Long === " + jMetaDataGeneral.getStreamSizeDemuxedStringAsLong());
        System.out.println("StreamSize_Demuxed in with percentage value AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeDemuxedStringAsLocalDateTime());
        System.out.println("StreamSize_Demuxed in with percentage value AS LocalTime === " + jMetaDataGeneral.getStreamSizeDemuxedStringAsLocalTime());
        System.out.println("StreamSize_Demuxed in with percentage value AS String === " + jMetaDataGeneral.getStreamSizeDemuxedStringAsString());
        System.out.println("StreamSize_Demuxed in with percentage value AS Boolean === " + jMetaDataGeneral.getStreamSizeDemuxedStringAsBoolean());
        System.out.println("StreamSize_Demuxed in with percentage value AS BigInteger === " + jMetaDataGeneral.getStreamSizeDemuxedStringAsBigInteger());
        System.out.println("StreamSize_Demuxed in with percentage value AS URL === " + jMetaDataGeneral.getStreamSizeDemuxedStringAsURL());
        System.out.println("Name of an audio-album. Eg : The joshua tree AS Integer === " + jMetaDataGeneral.getAlbumAsInteger());
        System.out.println("Name of an audio-album. Eg : The joshua tree AS Long === " + jMetaDataGeneral.getAlbumAsLong());
        System.out.println("Name of an audio-album. Eg : The joshua tree AS LocalDateTime === " + jMetaDataGeneral.getAlbumAsLocalDateTime());
        System.out.println("Name of an audio-album. Eg : The joshua tree AS LocalTime === " + jMetaDataGeneral.getAlbumAsLocalTime());
        System.out.println("Name of an audio-album. Eg : The joshua tree AS String === " + jMetaDataGeneral.getAlbumAsString());
        System.out.println("Name of an audio-album. Eg : The joshua tree AS Boolean === " + jMetaDataGeneral.getAlbumAsBoolean());
        System.out.println("Name of an audio-album. Eg : The joshua tree AS BigInteger === " + jMetaDataGeneral.getAlbumAsBigInteger());
        System.out.println("Name of an audio-album. Eg : The joshua tree AS URL === " + jMetaDataGeneral.getAlbumAsURL());
        System.out.println("Text Codecs in this file with popular name (hint),separated by / AS Integer === " + jMetaDataGeneral.getTextFormatWithHintListAsInteger());
        System.out.println("Text Codecs in this file with popular name (hint),separated by / AS Long === " + jMetaDataGeneral.getTextFormatWithHintListAsLong());
        System.out.println("Text Codecs in this file with popular name (hint),separated by / AS LocalDateTime === " + jMetaDataGeneral.getTextFormatWithHintListAsLocalDateTime());
        System.out.println("Text Codecs in this file with popular name (hint),separated by / AS LocalTime === " + jMetaDataGeneral.getTextFormatWithHintListAsLocalTime());
        System.out.println("Text Codecs in this file with popular name (hint),separated by / AS String === " + jMetaDataGeneral.getTextFormatWithHintListAsString());
        System.out.println("Text Codecs in this file with popular name (hint),separated by / AS Boolean === " + jMetaDataGeneral.getTextFormatWithHintListAsBoolean());
        System.out.println("Text Codecs in this file with popular name (hint),separated by / AS BigInteger === " + jMetaDataGeneral.getTextFormatWithHintListAsBigInteger());
        System.out.println("Text Codecs in this file with popular name (hint),separated by / AS URL === " + jMetaDataGeneral.getTextFormatWithHintListAsURL());
        System.out.println("Minimum Bit rate (with measurement) AS Integer === " + jMetaDataGeneral.getOverallBitRateMinimumStringAsInteger());
        System.out.println("Minimum Bit rate (with measurement) AS Long === " + jMetaDataGeneral.getOverallBitRateMinimumStringAsLong());
        System.out.println("Minimum Bit rate (with measurement) AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateMinimumStringAsLocalDateTime());
        System.out.println("Minimum Bit rate (with measurement) AS LocalTime === " + jMetaDataGeneral.getOverallBitRateMinimumStringAsLocalTime());
        System.out.println("Minimum Bit rate (with measurement) AS String === " + jMetaDataGeneral.getOverallBitRateMinimumStringAsString());
        System.out.println("Minimum Bit rate (with measurement) AS Boolean === " + jMetaDataGeneral.getOverallBitRateMinimumStringAsBoolean());
        System.out.println("Minimum Bit rate (with measurement) AS BigInteger === " + jMetaDataGeneral.getOverallBitRateMinimumStringAsBigInteger());
        System.out.println("Minimum Bit rate (with measurement) AS URL === " + jMetaDataGeneral.getOverallBitRateMinimumStringAsURL());
        System.out.println("Copyright attribution. AS Integer === " + jMetaDataGeneral.getCopyrightAsInteger());
        System.out.println("Copyright attribution. AS Long === " + jMetaDataGeneral.getCopyrightAsLong());
        System.out.println("Copyright attribution. AS LocalDateTime === " + jMetaDataGeneral.getCopyrightAsLocalDateTime());
        System.out.println("Copyright attribution. AS LocalTime === " + jMetaDataGeneral.getCopyrightAsLocalTime());
        System.out.println("Copyright attribution. AS String === " + jMetaDataGeneral.getCopyrightAsString());
        System.out.println("Copyright attribution. AS Boolean === " + jMetaDataGeneral.getCopyrightAsBoolean());
        System.out.println("Copyright attribution. AS BigInteger === " + jMetaDataGeneral.getCopyrightAsBigInteger());
        System.out.println("Copyright attribution. AS URL === " + jMetaDataGeneral.getCopyrightAsURL());
        System.out.println("Count of streams of that kind available AS Integer === " + jMetaDataGeneral.getStreamCountAsInteger());
        System.out.println("Count of streams of that kind available AS Long === " + jMetaDataGeneral.getStreamCountAsLong());
        System.out.println("Count of streams of that kind available AS LocalDateTime === " + jMetaDataGeneral.getStreamCountAsLocalDateTime());
        System.out.println("Count of streams of that kind available AS LocalTime === " + jMetaDataGeneral.getStreamCountAsLocalTime());
        System.out.println("Count of streams of that kind available AS String === " + jMetaDataGeneral.getStreamCountAsString());
        System.out.println("Count of streams of that kind available AS Boolean === " + jMetaDataGeneral.getStreamCountAsBoolean());
        System.out.println("Count of streams of that kind available AS BigInteger === " + jMetaDataGeneral.getStreamCountAsBigInteger());
        System.out.println("Count of streams of that kind available AS URL === " + jMetaDataGeneral.getStreamCountAsURL());
        System.out.println("The engineer who mastered the content for a physical medium or for digital distribution. AS Integer === " + jMetaDataGeneral.getMasteredByAsInteger());
        System.out.println("The engineer who mastered the content for a physical medium or for digital distribution. AS Long === " + jMetaDataGeneral.getMasteredByAsLong());
        System.out.println("The engineer who mastered the content for a physical medium or for digital distribution. AS LocalDateTime === " + jMetaDataGeneral.getMasteredByAsLocalDateTime());
        System.out.println("The engineer who mastered the content for a physical medium or for digital distribution. AS LocalTime === " + jMetaDataGeneral.getMasteredByAsLocalTime());
        System.out.println("The engineer who mastered the content for a physical medium or for digital distribution. AS String === " + jMetaDataGeneral.getMasteredByAsString());
        System.out.println("The engineer who mastered the content for a physical medium or for digital distribution. AS Boolean === " + jMetaDataGeneral.getMasteredByAsBoolean());
        System.out.println("The engineer who mastered the content for a physical medium or for digital distribution. AS BigInteger === " + jMetaDataGeneral.getMasteredByAsBigInteger());
        System.out.println("The engineer who mastered the content for a physical medium or for digital distribution. AS URL === " + jMetaDataGeneral.getMasteredByAsURL());
        System.out.println("Number of other streams AS Integer === " + jMetaDataGeneral.getOtherCountAsInteger());
        System.out.println("Number of other streams AS Long === " + jMetaDataGeneral.getOtherCountAsLong());
        System.out.println("Number of other streams AS LocalDateTime === " + jMetaDataGeneral.getOtherCountAsLocalDateTime());
        System.out.println("Number of other streams AS LocalTime === " + jMetaDataGeneral.getOtherCountAsLocalTime());
        System.out.println("Number of other streams AS String === " + jMetaDataGeneral.getOtherCountAsString());
        System.out.println("Number of other streams AS Boolean === " + jMetaDataGeneral.getOtherCountAsBoolean());
        System.out.println("Number of other streams AS BigInteger === " + jMetaDataGeneral.getOtherCountAsBigInteger());
        System.out.println("Number of other streams AS URL === " + jMetaDataGeneral.getOtherCountAsURL());
        System.out.println("Number of general streams AS Integer === " + jMetaDataGeneral.getGeneralCountAsInteger());
        System.out.println("Number of general streams AS Long === " + jMetaDataGeneral.getGeneralCountAsLong());
        System.out.println("Number of general streams AS LocalDateTime === " + jMetaDataGeneral.getGeneralCountAsLocalDateTime());
        System.out.println("Number of general streams AS LocalTime === " + jMetaDataGeneral.getGeneralCountAsLocalTime());
        System.out.println("Number of general streams AS String === " + jMetaDataGeneral.getGeneralCountAsString());
        System.out.println("Number of general streams AS Boolean === " + jMetaDataGeneral.getGeneralCountAsBoolean());
        System.out.println("Number of general streams AS BigInteger === " + jMetaDataGeneral.getGeneralCountAsBigInteger());
        System.out.println("Number of general streams AS URL === " + jMetaDataGeneral.getGeneralCountAsURL());
        System.out.println("Link to a site with copyright/legal information. AS Integer === " + jMetaDataGeneral.getCopyrightUrlAsInteger());
        System.out.println("Link to a site with copyright/legal information. AS Long === " + jMetaDataGeneral.getCopyrightUrlAsLong());
        System.out.println("Link to a site with copyright/legal information. AS LocalDateTime === " + jMetaDataGeneral.getCopyrightUrlAsLocalDateTime());
        System.out.println("Link to a site with copyright/legal information. AS LocalTime === " + jMetaDataGeneral.getCopyrightUrlAsLocalTime());
        System.out.println("Link to a site with copyright/legal information. AS String === " + jMetaDataGeneral.getCopyrightUrlAsString());
        System.out.println("Link to a site with copyright/legal information. AS Boolean === " + jMetaDataGeneral.getCopyrightUrlAsBoolean());
        System.out.println("Link to a site with copyright/legal information. AS BigInteger === " + jMetaDataGeneral.getCopyrightUrlAsBigInteger());
        System.out.println("Link to a site with copyright/legal information. AS URL === " + jMetaDataGeneral.getCopyrightUrlAsURL());
        System.out.println("Album_ReplayGain_Gain/String AS Integer === " + jMetaDataGeneral.getAlbumReplayGainGainStringAsInteger());
        System.out.println("Album_ReplayGain_Gain/String AS Long === " + jMetaDataGeneral.getAlbumReplayGainGainStringAsLong());
        System.out.println("Album_ReplayGain_Gain/String AS LocalDateTime === " + jMetaDataGeneral.getAlbumReplayGainGainStringAsLocalDateTime());
        System.out.println("Album_ReplayGain_Gain/String AS LocalTime === " + jMetaDataGeneral.getAlbumReplayGainGainStringAsLocalTime());
        System.out.println("Album_ReplayGain_Gain/String AS String === " + jMetaDataGeneral.getAlbumReplayGainGainStringAsString());
        System.out.println("Album_ReplayGain_Gain/String AS Boolean === " + jMetaDataGeneral.getAlbumReplayGainGainStringAsBoolean());
        System.out.println("Album_ReplayGain_Gain/String AS BigInteger === " + jMetaDataGeneral.getAlbumReplayGainGainStringAsBigInteger());
        System.out.println("Album_ReplayGain_Gain/String AS URL === " + jMetaDataGeneral.getAlbumReplayGainGainStringAsURL());
        System.out.println("Number of video streams AS Integer === " + jMetaDataGeneral.getVideoCountAsInteger());
        System.out.println("Number of video streams AS Long === " + jMetaDataGeneral.getVideoCountAsLong());
        System.out.println("Number of video streams AS LocalDateTime === " + jMetaDataGeneral.getVideoCountAsLocalDateTime());
        System.out.println("Number of video streams AS LocalTime === " + jMetaDataGeneral.getVideoCountAsLocalTime());
        System.out.println("Number of video streams AS String === " + jMetaDataGeneral.getVideoCountAsString());
        System.out.println("Number of video streams AS Boolean === " + jMetaDataGeneral.getVideoCountAsBoolean());
        System.out.println("Number of video streams AS BigInteger === " + jMetaDataGeneral.getVideoCountAsBigInteger());
        System.out.println("Number of video streams AS URL === " + jMetaDataGeneral.getVideoCountAsURL());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Integer === " + jMetaDataGeneral.getDurationString2AsInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Long === " + jMetaDataGeneral.getDurationString2AsLong());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalDateTime === " + jMetaDataGeneral.getDurationString2AsLocalDateTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS LocalTime === " + jMetaDataGeneral.getDurationString2AsLocalTime());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS String === " + jMetaDataGeneral.getDurationString2AsString());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS Boolean === " + jMetaDataGeneral.getDurationString2AsBoolean());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS BigInteger === " + jMetaDataGeneral.getDurationString2AsBigInteger());
        System.out.println("Play time in format : XXx YYy only, YYy omited if zero AS URL === " + jMetaDataGeneral.getDurationString2AsURL());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Integer === " + jMetaDataGeneral.getDurationString3AsInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Long === " + jMetaDataGeneral.getDurationString3AsLong());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalDateTime === " + jMetaDataGeneral.getDurationString3AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS LocalTime === " + jMetaDataGeneral.getDurationString3AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.MMM AS String === " + jMetaDataGeneral.getDurationString3AsString());
        System.out.println("Play time in format : HH:MM:SS.MMM AS Boolean === " + jMetaDataGeneral.getDurationString3AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.MMM AS BigInteger === " + jMetaDataGeneral.getDurationString3AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.MMM AS URL === " + jMetaDataGeneral.getDurationString3AsURL());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Integer === " + jMetaDataGeneral.getDurationString1AsInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Long === " + jMetaDataGeneral.getDurationString1AsLong());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalDateTime === " + jMetaDataGeneral.getDurationString1AsLocalDateTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS LocalTime === " + jMetaDataGeneral.getDurationString1AsLocalTime());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS String === " + jMetaDataGeneral.getDurationString1AsString());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS Boolean === " + jMetaDataGeneral.getDurationString1AsBoolean());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS BigInteger === " + jMetaDataGeneral.getDurationString1AsBigInteger());
        System.out.println("Play time in format : HHh MMmn SSs MMMms, XX omited if zero AS URL === " + jMetaDataGeneral.getDurationString1AsURL());
        System.out.println("Nominal Bit rate (with measurement) AS Integer === " + jMetaDataGeneral.getOverallBitRateNominalStringAsInteger());
        System.out.println("Nominal Bit rate (with measurement) AS Long === " + jMetaDataGeneral.getOverallBitRateNominalStringAsLong());
        System.out.println("Nominal Bit rate (with measurement) AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateNominalStringAsLocalDateTime());
        System.out.println("Nominal Bit rate (with measurement) AS LocalTime === " + jMetaDataGeneral.getOverallBitRateNominalStringAsLocalTime());
        System.out.println("Nominal Bit rate (with measurement) AS String === " + jMetaDataGeneral.getOverallBitRateNominalStringAsString());
        System.out.println("Nominal Bit rate (with measurement) AS Boolean === " + jMetaDataGeneral.getOverallBitRateNominalStringAsBoolean());
        System.out.println("Nominal Bit rate (with measurement) AS BigInteger === " + jMetaDataGeneral.getOverallBitRateNominalStringAsBigInteger());
        System.out.println("Nominal Bit rate (with measurement) AS URL === " + jMetaDataGeneral.getOverallBitRateNominalStringAsURL());
        System.out.println("Describes the period that the piece is from or about. e.g. Renaissance. AS Integer === " + jMetaDataGeneral.getPeriodAsInteger());
        System.out.println("Describes the period that the piece is from or about. e.g. Renaissance. AS Long === " + jMetaDataGeneral.getPeriodAsLong());
        System.out.println("Describes the period that the piece is from or about. e.g. Renaissance. AS LocalDateTime === " + jMetaDataGeneral.getPeriodAsLocalDateTime());
        System.out.println("Describes the period that the piece is from or about. e.g. Renaissance. AS LocalTime === " + jMetaDataGeneral.getPeriodAsLocalTime());
        System.out.println("Describes the period that the piece is from or about. e.g. Renaissance. AS String === " + jMetaDataGeneral.getPeriodAsString());
        System.out.println("Describes the period that the piece is from or about. e.g. Renaissance. AS Boolean === " + jMetaDataGeneral.getPeriodAsBoolean());
        System.out.println("Describes the period that the piece is from or about. e.g. Renaissance. AS BigInteger === " + jMetaDataGeneral.getPeriodAsBigInteger());
        System.out.println("Describes the period that the piece is from or about. e.g. Renaissance. AS URL === " + jMetaDataGeneral.getPeriodAsURL());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Integer === " + jMetaDataGeneral.getDurationString4AsInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Long === " + jMetaDataGeneral.getDurationString4AsLong());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalDateTime === " + jMetaDataGeneral.getDurationString4AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS LocalTime === " + jMetaDataGeneral.getDurationString4AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS String === " + jMetaDataGeneral.getDurationString4AsString());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS Boolean === " + jMetaDataGeneral.getDurationString4AsBoolean());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS BigInteger === " + jMetaDataGeneral.getDurationString4AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS:FF, last colon replaced by semicolon for drop frame if available AS URL === " + jMetaDataGeneral.getDurationString4AsURL());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Integer === " + jMetaDataGeneral.getDurationString5AsInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Long === " + jMetaDataGeneral.getDurationString5AsLong());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalDateTime === " + jMetaDataGeneral.getDurationString5AsLocalDateTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS LocalTime === " + jMetaDataGeneral.getDurationString5AsLocalTime());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS String === " + jMetaDataGeneral.getDurationString5AsString());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS Boolean === " + jMetaDataGeneral.getDurationString5AsBoolean());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS BigInteger === " + jMetaDataGeneral.getDurationString5AsBigInteger());
        System.out.println("Play time in format : HH:MM:SS.mmm (HH:MM:SS:FF) AS URL === " + jMetaDataGeneral.getDurationString5AsURL());
        System.out.println("Duration_Start AS Integer === " + jMetaDataGeneral.getDurationStartAsInteger());
        System.out.println("Duration_Start AS Long === " + jMetaDataGeneral.getDurationStartAsLong());
        System.out.println("Duration_Start AS LocalDateTime === " + jMetaDataGeneral.getDurationStartAsLocalDateTime());
        System.out.println("Duration_Start AS LocalTime === " + jMetaDataGeneral.getDurationStartAsLocalTime());
        System.out.println("Duration_Start AS String === " + jMetaDataGeneral.getDurationStartAsString());
        System.out.println("Duration_Start AS Boolean === " + jMetaDataGeneral.getDurationStartAsBoolean());
        System.out.println("Duration_Start AS BigInteger === " + jMetaDataGeneral.getDurationStartAsBigInteger());
        System.out.println("Duration_Start AS URL === " + jMetaDataGeneral.getDurationStartAsURL());
        System.out.println("OriginalNetworkName AS Integer === " + jMetaDataGeneral.getOriginalNetworkNameAsInteger());
        System.out.println("OriginalNetworkName AS Long === " + jMetaDataGeneral.getOriginalNetworkNameAsLong());
        System.out.println("OriginalNetworkName AS LocalDateTime === " + jMetaDataGeneral.getOriginalNetworkNameAsLocalDateTime());
        System.out.println("OriginalNetworkName AS LocalTime === " + jMetaDataGeneral.getOriginalNetworkNameAsLocalTime());
        System.out.println("OriginalNetworkName AS String === " + jMetaDataGeneral.getOriginalNetworkNameAsString());
        System.out.println("OriginalNetworkName AS Boolean === " + jMetaDataGeneral.getOriginalNetworkNameAsBoolean());
        System.out.println("OriginalNetworkName AS BigInteger === " + jMetaDataGeneral.getOriginalNetworkNameAsBigInteger());
        System.out.println("OriginalNetworkName AS URL === " + jMetaDataGeneral.getOriginalNetworkNameAsURL());
        System.out.println("EPG_Positions_Begin AS Integer === " + jMetaDataGeneral.getEPGPositionsBeginAsInteger());
        System.out.println("EPG_Positions_Begin AS Long === " + jMetaDataGeneral.getEPGPositionsBeginAsLong());
        System.out.println("EPG_Positions_Begin AS LocalDateTime === " + jMetaDataGeneral.getEPGPositionsBeginAsLocalDateTime());
        System.out.println("EPG_Positions_Begin AS LocalTime === " + jMetaDataGeneral.getEPGPositionsBeginAsLocalTime());
        System.out.println("EPG_Positions_Begin AS String === " + jMetaDataGeneral.getEPGPositionsBeginAsString());
        System.out.println("EPG_Positions_Begin AS Boolean === " + jMetaDataGeneral.getEPGPositionsBeginAsBoolean());
        System.out.println("EPG_Positions_Begin AS BigInteger === " + jMetaDataGeneral.getEPGPositionsBeginAsBigInteger());
        System.out.println("EPG_Positions_Begin AS URL === " + jMetaDataGeneral.getEPGPositionsBeginAsURL());
        System.out.println("Video Codecs in this file with popular name (hint), separated by / AS Integer === " + jMetaDataGeneral.getVideoFormatWithHintListAsInteger());
        System.out.println("Video Codecs in this file with popular name (hint), separated by / AS Long === " + jMetaDataGeneral.getVideoFormatWithHintListAsLong());
        System.out.println("Video Codecs in this file with popular name (hint), separated by / AS LocalDateTime === " + jMetaDataGeneral.getVideoFormatWithHintListAsLocalDateTime());
        System.out.println("Video Codecs in this file with popular name (hint), separated by / AS LocalTime === " + jMetaDataGeneral.getVideoFormatWithHintListAsLocalTime());
        System.out.println("Video Codecs in this file with popular name (hint), separated by / AS String === " + jMetaDataGeneral.getVideoFormatWithHintListAsString());
        System.out.println("Video Codecs in this file with popular name (hint), separated by / AS Boolean === " + jMetaDataGeneral.getVideoFormatWithHintListAsBoolean());
        System.out.println("Video Codecs in this file with popular name (hint), separated by / AS BigInteger === " + jMetaDataGeneral.getVideoFormatWithHintListAsBigInteger());
        System.out.println("Video Codecs in this file with popular name (hint), separated by / AS URL === " + jMetaDataGeneral.getVideoFormatWithHintListAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataGeneral.getDelaySourceAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataGeneral.getDelaySourceAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataGeneral.getDelaySourceAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataGeneral.getDelaySourceAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataGeneral.getDelaySourceAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataGeneral.getDelaySourceAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataGeneral.getDelaySourceAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataGeneral.getDelaySourceAsURL());
        System.out.println("Main performer/artist of this file AS Integer === " + jMetaDataGeneral.getPerformerAsInteger());
        System.out.println("Main performer/artist of this file AS Long === " + jMetaDataGeneral.getPerformerAsLong());
        System.out.println("Main performer/artist of this file AS LocalDateTime === " + jMetaDataGeneral.getPerformerAsLocalDateTime());
        System.out.println("Main performer/artist of this file AS LocalTime === " + jMetaDataGeneral.getPerformerAsLocalTime());
        System.out.println("Main performer/artist of this file AS String === " + jMetaDataGeneral.getPerformerAsString());
        System.out.println("Main performer/artist of this file AS Boolean === " + jMetaDataGeneral.getPerformerAsBoolean());
        System.out.println("Main performer/artist of this file AS BigInteger === " + jMetaDataGeneral.getPerformerAsBigInteger());
        System.out.println("Main performer/artist of this file AS URL === " + jMetaDataGeneral.getPerformerAsURL());
        System.out.println("Name of the producer of the movie. AS Integer === " + jMetaDataGeneral.getProducerAsInteger());
        System.out.println("Name of the producer of the movie. AS Long === " + jMetaDataGeneral.getProducerAsLong());
        System.out.println("Name of the producer of the movie. AS LocalDateTime === " + jMetaDataGeneral.getProducerAsLocalDateTime());
        System.out.println("Name of the producer of the movie. AS LocalTime === " + jMetaDataGeneral.getProducerAsLocalTime());
        System.out.println("Name of the producer of the movie. AS String === " + jMetaDataGeneral.getProducerAsString());
        System.out.println("Name of the producer of the movie. AS Boolean === " + jMetaDataGeneral.getProducerAsBoolean());
        System.out.println("Name of the producer of the movie. AS BigInteger === " + jMetaDataGeneral.getProducerAsBigInteger());
        System.out.println("Name of the producer of the movie. AS URL === " + jMetaDataGeneral.getProducerAsURL());
        System.out.println("Place of the season e.g. 2 of 7 AS Integer === " + jMetaDataGeneral.getSeasonPositionTotalAsInteger());
        System.out.println("Place of the season e.g. 2 of 7 AS Long === " + jMetaDataGeneral.getSeasonPositionTotalAsLong());
        System.out.println("Place of the season e.g. 2 of 7 AS LocalDateTime === " + jMetaDataGeneral.getSeasonPositionTotalAsLocalDateTime());
        System.out.println("Place of the season e.g. 2 of 7 AS LocalTime === " + jMetaDataGeneral.getSeasonPositionTotalAsLocalTime());
        System.out.println("Place of the season e.g. 2 of 7 AS String === " + jMetaDataGeneral.getSeasonPositionTotalAsString());
        System.out.println("Place of the season e.g. 2 of 7 AS Boolean === " + jMetaDataGeneral.getSeasonPositionTotalAsBoolean());
        System.out.println("Place of the season e.g. 2 of 7 AS BigInteger === " + jMetaDataGeneral.getSeasonPositionTotalAsBigInteger());
        System.out.println("Place of the season e.g. 2 of 7 AS URL === " + jMetaDataGeneral.getSeasonPositionTotalAsURL());
        System.out.println("Name of the character an actor or actress plays in this movie. AS Integer === " + jMetaDataGeneral.getActorCharacterAsInteger());
        System.out.println("Name of the character an actor or actress plays in this movie. AS Long === " + jMetaDataGeneral.getActorCharacterAsLong());
        System.out.println("Name of the character an actor or actress plays in this movie. AS LocalDateTime === " + jMetaDataGeneral.getActorCharacterAsLocalDateTime());
        System.out.println("Name of the character an actor or actress plays in this movie. AS LocalTime === " + jMetaDataGeneral.getActorCharacterAsLocalTime());
        System.out.println("Name of the character an actor or actress plays in this movie. AS String === " + jMetaDataGeneral.getActorCharacterAsString());
        System.out.println("Name of the character an actor or actress plays in this movie. AS Boolean === " + jMetaDataGeneral.getActorCharacterAsBoolean());
        System.out.println("Name of the character an actor or actress plays in this movie. AS BigInteger === " + jMetaDataGeneral.getActorCharacterAsBigInteger());
        System.out.println("Name of the character an actor or actress plays in this movie. AS URL === " + jMetaDataGeneral.getActorCharacterAsURL());
        System.out.println("Maximum Bit rate in bps AS Integer === " + jMetaDataGeneral.getOverallBitRateMaximumAsInteger());
        System.out.println("Maximum Bit rate in bps AS Long === " + jMetaDataGeneral.getOverallBitRateMaximumAsLong());
        System.out.println("Maximum Bit rate in bps AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateMaximumAsLocalDateTime());
        System.out.println("Maximum Bit rate in bps AS LocalTime === " + jMetaDataGeneral.getOverallBitRateMaximumAsLocalTime());
        System.out.println("Maximum Bit rate in bps AS String === " + jMetaDataGeneral.getOverallBitRateMaximumAsString());
        System.out.println("Maximum Bit rate in bps AS Boolean === " + jMetaDataGeneral.getOverallBitRateMaximumAsBoolean());
        System.out.println("Maximum Bit rate in bps AS BigInteger === " + jMetaDataGeneral.getOverallBitRateMaximumAsBigInteger());
        System.out.println("Maximum Bit rate in bps AS URL === " + jMetaDataGeneral.getOverallBitRateMaximumAsURL());
        System.out.println("Name of the series, e.g. Starwars movies, Stargate SG-1, Stargate Atlantis, Buffy, Angel AS Integer === " + jMetaDataGeneral.getCollectionAsInteger());
        System.out.println("Name of the series, e.g. Starwars movies, Stargate SG-1, Stargate Atlantis, Buffy, Angel AS Long === " + jMetaDataGeneral.getCollectionAsLong());
        System.out.println("Name of the series, e.g. Starwars movies, Stargate SG-1, Stargate Atlantis, Buffy, Angel AS LocalDateTime === " + jMetaDataGeneral.getCollectionAsLocalDateTime());
        System.out.println("Name of the series, e.g. Starwars movies, Stargate SG-1, Stargate Atlantis, Buffy, Angel AS LocalTime === " + jMetaDataGeneral.getCollectionAsLocalTime());
        System.out.println("Name of the series, e.g. Starwars movies, Stargate SG-1, Stargate Atlantis, Buffy, Angel AS String === " + jMetaDataGeneral.getCollectionAsString());
        System.out.println("Name of the series, e.g. Starwars movies, Stargate SG-1, Stargate Atlantis, Buffy, Angel AS Boolean === " + jMetaDataGeneral.getCollectionAsBoolean());
        System.out.println("Name of the series, e.g. Starwars movies, Stargate SG-1, Stargate Atlantis, Buffy, Angel AS BigInteger === " + jMetaDataGeneral.getCollectionAsBigInteger());
        System.out.println("Name of the series, e.g. Starwars movies, Stargate SG-1, Stargate Atlantis, Buffy, Angel AS URL === " + jMetaDataGeneral.getCollectionAsURL());
        System.out.println("StreamSize in bytes of hte stream after demux AS Integer === " + jMetaDataGeneral.getStreamSizeDemuxedAsInteger());
        System.out.println("StreamSize in bytes of hte stream after demux AS Long === " + jMetaDataGeneral.getStreamSizeDemuxedAsLong());
        System.out.println("StreamSize in bytes of hte stream after demux AS LocalDateTime === " + jMetaDataGeneral.getStreamSizeDemuxedAsLocalDateTime());
        System.out.println("StreamSize in bytes of hte stream after demux AS LocalTime === " + jMetaDataGeneral.getStreamSizeDemuxedAsLocalTime());
        System.out.println("StreamSize in bytes of hte stream after demux AS String === " + jMetaDataGeneral.getStreamSizeDemuxedAsString());
        System.out.println("StreamSize in bytes of hte stream after demux AS Boolean === " + jMetaDataGeneral.getStreamSizeDemuxedAsBoolean());
        System.out.println("StreamSize in bytes of hte stream after demux AS BigInteger === " + jMetaDataGeneral.getStreamSizeDemuxedAsBigInteger());
        System.out.println("StreamSize in bytes of hte stream after demux AS URL === " + jMetaDataGeneral.getStreamSizeDemuxedAsURL());
        System.out.println("Menu Codecs in this file with popular name (hint),separated by / AS Integer === " + jMetaDataGeneral.getMenuFormatWithHintListAsInteger());
        System.out.println("Menu Codecs in this file with popular name (hint),separated by / AS Long === " + jMetaDataGeneral.getMenuFormatWithHintListAsLong());
        System.out.println("Menu Codecs in this file with popular name (hint),separated by / AS LocalDateTime === " + jMetaDataGeneral.getMenuFormatWithHintListAsLocalDateTime());
        System.out.println("Menu Codecs in this file with popular name (hint),separated by / AS LocalTime === " + jMetaDataGeneral.getMenuFormatWithHintListAsLocalTime());
        System.out.println("Menu Codecs in this file with popular name (hint),separated by / AS String === " + jMetaDataGeneral.getMenuFormatWithHintListAsString());
        System.out.println("Menu Codecs in this file with popular name (hint),separated by / AS Boolean === " + jMetaDataGeneral.getMenuFormatWithHintListAsBoolean());
        System.out.println("Menu Codecs in this file with popular name (hint),separated by / AS BigInteger === " + jMetaDataGeneral.getMenuFormatWithHintListAsBigInteger());
        System.out.println("Menu Codecs in this file with popular name (hint),separated by / AS URL === " + jMetaDataGeneral.getMenuFormatWithHintListAsURL());
        System.out.println("Settings needed for decoder used AS Integer === " + jMetaDataGeneral.getFormatSettingsAsInteger());
        System.out.println("Settings needed for decoder used AS Long === " + jMetaDataGeneral.getFormatSettingsAsLong());
        System.out.println("Settings needed for decoder used AS LocalDateTime === " + jMetaDataGeneral.getFormatSettingsAsLocalDateTime());
        System.out.println("Settings needed for decoder used AS LocalTime === " + jMetaDataGeneral.getFormatSettingsAsLocalTime());
        System.out.println("Settings needed for decoder used AS String === " + jMetaDataGeneral.getFormatSettingsAsString());
        System.out.println("Settings needed for decoder used AS Boolean === " + jMetaDataGeneral.getFormatSettingsAsBoolean());
        System.out.println("Settings needed for decoder used AS BigInteger === " + jMetaDataGeneral.getFormatSettingsAsBigInteger());
        System.out.println("Settings needed for decoder used AS URL === " + jMetaDataGeneral.getFormatSettingsAsURL());
        System.out.println("File name only of the last file (in the case of a sequence of files) AS Integer === " + jMetaDataGeneral.getFileNameLastAsInteger());
        System.out.println("File name only of the last file (in the case of a sequence of files) AS Long === " + jMetaDataGeneral.getFileNameLastAsLong());
        System.out.println("File name only of the last file (in the case of a sequence of files) AS LocalDateTime === " + jMetaDataGeneral.getFileNameLastAsLocalDateTime());
        System.out.println("File name only of the last file (in the case of a sequence of files) AS LocalTime === " + jMetaDataGeneral.getFileNameLastAsLocalTime());
        System.out.println("File name only of the last file (in the case of a sequence of files) AS String === " + jMetaDataGeneral.getFileNameLastAsString());
        System.out.println("File name only of the last file (in the case of a sequence of files) AS Boolean === " + jMetaDataGeneral.getFileNameLastAsBoolean());
        System.out.println("File name only of the last file (in the case of a sequence of files) AS BigInteger === " + jMetaDataGeneral.getFileNameLastAsBigInteger());
        System.out.println("File name only of the last file (in the case of a sequence of files) AS URL === " + jMetaDataGeneral.getFileNameLastAsURL());
        System.out.println("Average number of beats per minute AS Integer === " + jMetaDataGeneral.getBPMAsInteger());
        System.out.println("Average number of beats per minute AS Long === " + jMetaDataGeneral.getBPMAsLong());
        System.out.println("Average number of beats per minute AS LocalDateTime === " + jMetaDataGeneral.getBPMAsLocalDateTime());
        System.out.println("Average number of beats per minute AS LocalTime === " + jMetaDataGeneral.getBPMAsLocalTime());
        System.out.println("Average number of beats per minute AS String === " + jMetaDataGeneral.getBPMAsString());
        System.out.println("Average number of beats per minute AS Boolean === " + jMetaDataGeneral.getBPMAsBoolean());
        System.out.println("Average number of beats per minute AS BigInteger === " + jMetaDataGeneral.getBPMAsBigInteger());
        System.out.println("Average number of beats per minute AS URL === " + jMetaDataGeneral.getBPMAsURL());
        System.out.println("File size in bytes AS Integer === " + jMetaDataGeneral.getFileSizeAsInteger());
        System.out.println("File size in bytes AS Long === " + jMetaDataGeneral.getFileSizeAsLong());
        System.out.println("File size in bytes AS LocalDateTime === " + jMetaDataGeneral.getFileSizeAsLocalDateTime());
        System.out.println("File size in bytes AS LocalTime === " + jMetaDataGeneral.getFileSizeAsLocalTime());
        System.out.println("File size in bytes AS String === " + jMetaDataGeneral.getFileSizeAsString());
        System.out.println("File size in bytes AS Boolean === " + jMetaDataGeneral.getFileSizeAsBoolean());
        System.out.println("File size in bytes AS BigInteger === " + jMetaDataGeneral.getFileSizeAsBigInteger());
        System.out.println("File size in bytes AS URL === " + jMetaDataGeneral.getFileSizeAsURL());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Integer === " + jMetaDataGeneral.getFirstPacketOrderAsInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Long === " + jMetaDataGeneral.getFirstPacketOrderAsLong());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalDateTime === " + jMetaDataGeneral.getFirstPacketOrderAsLocalDateTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS LocalTime === " + jMetaDataGeneral.getFirstPacketOrderAsLocalTime());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS String === " + jMetaDataGeneral.getFirstPacketOrderAsString());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS Boolean === " + jMetaDataGeneral.getFirstPacketOrderAsBoolean());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS BigInteger === " + jMetaDataGeneral.getFirstPacketOrderAsBigInteger());
        System.out.println("Order of the first fully decodable packet met in the file, whatever is the kind of stream (base=0) AS URL === " + jMetaDataGeneral.getFirstPacketOrderAsURL());
        System.out.println("IsStreamable AS Integer === " + jMetaDataGeneral.getIsStreamableAsInteger());
        System.out.println("IsStreamable AS Long === " + jMetaDataGeneral.getIsStreamableAsLong());
        System.out.println("IsStreamable AS LocalDateTime === " + jMetaDataGeneral.getIsStreamableAsLocalDateTime());
        System.out.println("IsStreamable AS LocalTime === " + jMetaDataGeneral.getIsStreamableAsLocalTime());
        System.out.println("IsStreamable AS String === " + jMetaDataGeneral.getIsStreamableAsString());
        System.out.println("IsStreamable AS Boolean === " + jMetaDataGeneral.getIsStreamableAsBoolean());
        System.out.println("IsStreamable AS BigInteger === " + jMetaDataGeneral.getIsStreamableAsBigInteger());
        System.out.println("IsStreamable AS URL === " + jMetaDataGeneral.getIsStreamableAsURL());
        System.out.println("The person who wrote the lyrics for a musical item. AS Integer === " + jMetaDataGeneral.getLyricistAsInteger());
        System.out.println("The person who wrote the lyrics for a musical item. AS Long === " + jMetaDataGeneral.getLyricistAsLong());
        System.out.println("The person who wrote the lyrics for a musical item. AS LocalDateTime === " + jMetaDataGeneral.getLyricistAsLocalDateTime());
        System.out.println("The person who wrote the lyrics for a musical item. AS LocalTime === " + jMetaDataGeneral.getLyricistAsLocalTime());
        System.out.println("The person who wrote the lyrics for a musical item. AS String === " + jMetaDataGeneral.getLyricistAsString());
        System.out.println("The person who wrote the lyrics for a musical item. AS Boolean === " + jMetaDataGeneral.getLyricistAsBoolean());
        System.out.println("The person who wrote the lyrics for a musical item. AS BigInteger === " + jMetaDataGeneral.getLyricistAsBigInteger());
        System.out.println("The person who wrote the lyrics for a musical item. AS URL === " + jMetaDataGeneral.getLyricistAsURL());
        System.out.println("Duration_End AS Integer === " + jMetaDataGeneral.getDurationEndAsInteger());
        System.out.println("Duration_End AS Long === " + jMetaDataGeneral.getDurationEndAsLong());
        System.out.println("Duration_End AS LocalDateTime === " + jMetaDataGeneral.getDurationEndAsLocalDateTime());
        System.out.println("Duration_End AS LocalTime === " + jMetaDataGeneral.getDurationEndAsLocalTime());
        System.out.println("Duration_End AS String === " + jMetaDataGeneral.getDurationEndAsString());
        System.out.println("Duration_End AS Boolean === " + jMetaDataGeneral.getDurationEndAsBoolean());
        System.out.println("Duration_End AS BigInteger === " + jMetaDataGeneral.getDurationEndAsBigInteger());
        System.out.println("Duration_End AS URL === " + jMetaDataGeneral.getDurationEndAsURL());
        System.out.println("Known extensions of this format AS Integer === " + jMetaDataGeneral.getFormatExtensionsAsInteger());
        System.out.println("Known extensions of this format AS Long === " + jMetaDataGeneral.getFormatExtensionsAsLong());
        System.out.println("Known extensions of this format AS LocalDateTime === " + jMetaDataGeneral.getFormatExtensionsAsLocalDateTime());
        System.out.println("Known extensions of this format AS LocalTime === " + jMetaDataGeneral.getFormatExtensionsAsLocalTime());
        System.out.println("Known extensions of this format AS String === " + jMetaDataGeneral.getFormatExtensionsAsString());
        System.out.println("Known extensions of this format AS Boolean === " + jMetaDataGeneral.getFormatExtensionsAsBoolean());
        System.out.println("Known extensions of this format AS BigInteger === " + jMetaDataGeneral.getFormatExtensionsAsBigInteger());
        System.out.println("Known extensions of this format AS URL === " + jMetaDataGeneral.getFormatExtensionsAsURL());
        System.out.println("The copyright information as per the productioncopyright holder. AS Integer === " + jMetaDataGeneral.getProducerCopyrightAsInteger());
        System.out.println("The copyright information as per the productioncopyright holder. AS Long === " + jMetaDataGeneral.getProducerCopyrightAsLong());
        System.out.println("The copyright information as per the productioncopyright holder. AS LocalDateTime === " + jMetaDataGeneral.getProducerCopyrightAsLocalDateTime());
        System.out.println("The copyright information as per the productioncopyright holder. AS LocalTime === " + jMetaDataGeneral.getProducerCopyrightAsLocalTime());
        System.out.println("The copyright information as per the productioncopyright holder. AS String === " + jMetaDataGeneral.getProducerCopyrightAsString());
        System.out.println("The copyright information as per the productioncopyright holder. AS Boolean === " + jMetaDataGeneral.getProducerCopyrightAsBoolean());
        System.out.println("The copyright information as per the productioncopyright holder. AS BigInteger === " + jMetaDataGeneral.getProducerCopyrightAsBigInteger());
        System.out.println("The copyright information as per the productioncopyright holder. AS URL === " + jMetaDataGeneral.getProducerCopyrightAsURL());
        System.out.println("EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier. AS Integer === " + jMetaDataGeneral.getBarCodeAsInteger());
        System.out.println("EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier. AS Long === " + jMetaDataGeneral.getBarCodeAsLong());
        System.out.println("EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier. AS LocalDateTime === " + jMetaDataGeneral.getBarCodeAsLocalDateTime());
        System.out.println("EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier. AS LocalTime === " + jMetaDataGeneral.getBarCodeAsLocalTime());
        System.out.println("EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier. AS String === " + jMetaDataGeneral.getBarCodeAsString());
        System.out.println("EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier. AS Boolean === " + jMetaDataGeneral.getBarCodeAsBoolean());
        System.out.println("EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier. AS BigInteger === " + jMetaDataGeneral.getBarCodeAsBigInteger());
        System.out.println("EAN-13 (13-digit European Article Numbering) or UPC-A (12-digit Universal Product Code) bar code identifier. AS URL === " + jMetaDataGeneral.getBarCodeAsURL());
        System.out.println("Bit rate of all streams (with measure) AS Integer === " + jMetaDataGeneral.getOverallBitRateStringAsInteger());
        System.out.println("Bit rate of all streams (with measure) AS Long === " + jMetaDataGeneral.getOverallBitRateStringAsLong());
        System.out.println("Bit rate of all streams (with measure) AS LocalDateTime === " + jMetaDataGeneral.getOverallBitRateStringAsLocalDateTime());
        System.out.println("Bit rate of all streams (with measure) AS LocalTime === " + jMetaDataGeneral.getOverallBitRateStringAsLocalTime());
        System.out.println("Bit rate of all streams (with measure) AS String === " + jMetaDataGeneral.getOverallBitRateStringAsString());
        System.out.println("Bit rate of all streams (with measure) AS Boolean === " + jMetaDataGeneral.getOverallBitRateStringAsBoolean());
        System.out.println("Bit rate of all streams (with measure) AS BigInteger === " + jMetaDataGeneral.getOverallBitRateStringAsBigInteger());
        System.out.println("Bit rate of all streams (with measure) AS URL === " + jMetaDataGeneral.getOverallBitRateStringAsURL());
        System.out.println("Number of text streams AS Integer === " + jMetaDataGeneral.getTextCountAsInteger());
        System.out.println("Number of text streams AS Long === " + jMetaDataGeneral.getTextCountAsLong());
        System.out.println("Number of text streams AS LocalDateTime === " + jMetaDataGeneral.getTextCountAsLocalDateTime());
        System.out.println("Number of text streams AS LocalTime === " + jMetaDataGeneral.getTextCountAsLocalTime());
        System.out.println("Number of text streams AS String === " + jMetaDataGeneral.getTextCountAsString());
        System.out.println("Number of text streams AS Boolean === " + jMetaDataGeneral.getTextCountAsBoolean());
        System.out.println("Number of text streams AS BigInteger === " + jMetaDataGeneral.getTextCountAsBigInteger());
        System.out.println("Number of text streams AS URL === " + jMetaDataGeneral.getTextCountAsURL());
        System.out.println("The name of the sound engineer or sound recordist. AS Integer === " + jMetaDataGeneral.getSoundEngineerAsInteger());
        System.out.println("The name of the sound engineer or sound recordist. AS Long === " + jMetaDataGeneral.getSoundEngineerAsLong());
        System.out.println("The name of the sound engineer or sound recordist. AS LocalDateTime === " + jMetaDataGeneral.getSoundEngineerAsLocalDateTime());
        System.out.println("The name of the sound engineer or sound recordist. AS LocalTime === " + jMetaDataGeneral.getSoundEngineerAsLocalTime());
        System.out.println("The name of the sound engineer or sound recordist. AS String === " + jMetaDataGeneral.getSoundEngineerAsString());
        System.out.println("The name of the sound engineer or sound recordist. AS Boolean === " + jMetaDataGeneral.getSoundEngineerAsBoolean());
        System.out.println("The name of the sound engineer or sound recordist. AS BigInteger === " + jMetaDataGeneral.getSoundEngineerAsBigInteger());
        System.out.println("The name of the sound engineer or sound recordist. AS URL === " + jMetaDataGeneral.getSoundEngineerAsURL());
        System.out.println("A 4-digit or 5-digit number to identify the record label, typically printed as (LC) xxxx or (LC) 0xxxx on CDs medias or covers, with only the number being stored. AS Integer === " + jMetaDataGeneral.getLabelCodeAsInteger());
        System.out.println("A 4-digit or 5-digit number to identify the record label, typically printed as (LC) xxxx or (LC) 0xxxx on CDs medias or covers, with only the number being stored. AS Long === " + jMetaDataGeneral.getLabelCodeAsLong());
        System.out.println("A 4-digit or 5-digit number to identify the record label, typically printed as (LC) xxxx or (LC) 0xxxx on CDs medias or covers, with only the number being stored. AS LocalDateTime === " + jMetaDataGeneral.getLabelCodeAsLocalDateTime());
        System.out.println("A 4-digit or 5-digit number to identify the record label, typically printed as (LC) xxxx or (LC) 0xxxx on CDs medias or covers, with only the number being stored. AS LocalTime === " + jMetaDataGeneral.getLabelCodeAsLocalTime());
        System.out.println("A 4-digit or 5-digit number to identify the record label, typically printed as (LC) xxxx or (LC) 0xxxx on CDs medias or covers, with only the number being stored. AS String === " + jMetaDataGeneral.getLabelCodeAsString());
        System.out.println("A 4-digit or 5-digit number to identify the record label, typically printed as (LC) xxxx or (LC) 0xxxx on CDs medias or covers, with only the number being stored. AS Boolean === " + jMetaDataGeneral.getLabelCodeAsBoolean());
        System.out.println("A 4-digit or 5-digit number to identify the record label, typically printed as (LC) xxxx or (LC) 0xxxx on CDs medias or covers, with only the number being stored. AS BigInteger === " + jMetaDataGeneral.getLabelCodeAsBigInteger());
        System.out.println("A 4-digit or 5-digit number to identify the record label, typically printed as (LC) xxxx or (LC) 0xxxx on CDs medias or covers, with only the number being stored. AS URL === " + jMetaDataGeneral.getLabelCodeAsURL());
        System.out.println("Number of image streams AS Integer === " + jMetaDataGeneral.getImageCountAsInteger());
        System.out.println("Number of image streams AS Long === " + jMetaDataGeneral.getImageCountAsLong());
        System.out.println("Number of image streams AS LocalDateTime === " + jMetaDataGeneral.getImageCountAsLocalDateTime());
        System.out.println("Number of image streams AS LocalTime === " + jMetaDataGeneral.getImageCountAsLocalTime());
        System.out.println("Number of image streams AS String === " + jMetaDataGeneral.getImageCountAsString());
        System.out.println("Number of image streams AS Boolean === " + jMetaDataGeneral.getImageCountAsBoolean());
        System.out.println("Number of image streams AS BigInteger === " + jMetaDataGeneral.getImageCountAsBigInteger());
        System.out.println("Number of image streams AS URL === " + jMetaDataGeneral.getImageCountAsURL());
        System.out.println("Format used AS Integer === " + jMetaDataGeneral.getFormatAsInteger());
        System.out.println("Format used AS Long === " + jMetaDataGeneral.getFormatAsLong());
        System.out.println("Format used AS LocalDateTime === " + jMetaDataGeneral.getFormatAsLocalDateTime());
        System.out.println("Format used AS LocalTime === " + jMetaDataGeneral.getFormatAsLocalTime());
        System.out.println("Format used AS String === " + jMetaDataGeneral.getFormatAsString());
        System.out.println("Format used AS Boolean === " + jMetaDataGeneral.getFormatAsBoolean());
        System.out.println("Format used AS BigInteger === " + jMetaDataGeneral.getFormatAsBigInteger());
        System.out.println("Format used AS URL === " + jMetaDataGeneral.getFormatAsURL());
        System.out.println("The author of the story or script. AS Integer === " + jMetaDataGeneral.getWrittenByAsInteger());
        System.out.println("The author of the story or script. AS Long === " + jMetaDataGeneral.getWrittenByAsLong());
        System.out.println("The author of the story or script. AS LocalDateTime === " + jMetaDataGeneral.getWrittenByAsLocalDateTime());
        System.out.println("The author of the story or script. AS LocalTime === " + jMetaDataGeneral.getWrittenByAsLocalTime());
        System.out.println("The author of the story or script. AS String === " + jMetaDataGeneral.getWrittenByAsString());
        System.out.println("The author of the story or script. AS Boolean === " + jMetaDataGeneral.getWrittenByAsBoolean());
        System.out.println("The author of the story or script. AS BigInteger === " + jMetaDataGeneral.getWrittenByAsBigInteger());
        System.out.println("The author of the story or script. AS URL === " + jMetaDataGeneral.getWrittenByAsURL());
        System.out.println("Place of this track, e.g. 3 of 15 AS Integer === " + jMetaDataGeneral.getTrackPositionTotalAsInteger());
        System.out.println("Place of this track, e.g. 3 of 15 AS Long === " + jMetaDataGeneral.getTrackPositionTotalAsLong());
        System.out.println("Place of this track, e.g. 3 of 15 AS LocalDateTime === " + jMetaDataGeneral.getTrackPositionTotalAsLocalDateTime());
        System.out.println("Place of this track, e.g. 3 of 15 AS LocalTime === " + jMetaDataGeneral.getTrackPositionTotalAsLocalTime());
        System.out.println("Place of this track, e.g. 3 of 15 AS String === " + jMetaDataGeneral.getTrackPositionTotalAsString());
        System.out.println("Place of this track, e.g. 3 of 15 AS Boolean === " + jMetaDataGeneral.getTrackPositionTotalAsBoolean());
        System.out.println("Place of this track, e.g. 3 of 15 AS BigInteger === " + jMetaDataGeneral.getTrackPositionTotalAsBigInteger());
        System.out.println("Place of this track, e.g. 3 of 15 AS URL === " + jMetaDataGeneral.getTrackPositionTotalAsURL());
        System.out.println("Country, where the movie was procuced AS Integer === " + jMetaDataGeneral.getMovieCountryAsInteger());
        System.out.println("Country, where the movie was procuced AS Long === " + jMetaDataGeneral.getMovieCountryAsLong());
        System.out.println("Country, where the movie was procuced AS LocalDateTime === " + jMetaDataGeneral.getMovieCountryAsLocalDateTime());
        System.out.println("Country, where the movie was procuced AS LocalTime === " + jMetaDataGeneral.getMovieCountryAsLocalTime());
        System.out.println("Country, where the movie was procuced AS String === " + jMetaDataGeneral.getMovieCountryAsString());
        System.out.println("Country, where the movie was procuced AS Boolean === " + jMetaDataGeneral.getMovieCountryAsBoolean());
        System.out.println("Country, where the movie was procuced AS BigInteger === " + jMetaDataGeneral.getMovieCountryAsBigInteger());
        System.out.println("Country, where the movie was procuced AS URL === " + jMetaDataGeneral.getMovieCountryAsURL());
        System.out.println("Homepage of the album performer/artist AS Integer === " + jMetaDataGeneral.getAlbumPerformerUrlAsInteger());
        System.out.println("Homepage of the album performer/artist AS Long === " + jMetaDataGeneral.getAlbumPerformerUrlAsLong());
        System.out.println("Homepage of the album performer/artist AS LocalDateTime === " + jMetaDataGeneral.getAlbumPerformerUrlAsLocalDateTime());
        System.out.println("Homepage of the album performer/artist AS LocalTime === " + jMetaDataGeneral.getAlbumPerformerUrlAsLocalTime());
        System.out.println("Homepage of the album performer/artist AS String === " + jMetaDataGeneral.getAlbumPerformerUrlAsString());
        System.out.println("Homepage of the album performer/artist AS Boolean === " + jMetaDataGeneral.getAlbumPerformerUrlAsBoolean());
        System.out.println("Homepage of the album performer/artist AS BigInteger === " + jMetaDataGeneral.getAlbumPerformerUrlAsBigInteger());
        System.out.println("Homepage of the album performer/artist AS URL === " + jMetaDataGeneral.getAlbumPerformerUrlAsURL());
        System.out.println("Codec ID (found in some containers) AS Integer === " + jMetaDataGeneral.getCodecIDStringAsInteger());
        System.out.println("Codec ID (found in some containers) AS Long === " + jMetaDataGeneral.getCodecIDStringAsLong());
        System.out.println("Codec ID (found in some containers) AS LocalDateTime === " + jMetaDataGeneral.getCodecIDStringAsLocalDateTime());
        System.out.println("Codec ID (found in some containers) AS LocalTime === " + jMetaDataGeneral.getCodecIDStringAsLocalTime());
        System.out.println("Codec ID (found in some containers) AS String === " + jMetaDataGeneral.getCodecIDStringAsString());
        System.out.println("Codec ID (found in some containers) AS Boolean === " + jMetaDataGeneral.getCodecIDStringAsBoolean());
        System.out.println("Codec ID (found in some containers) AS BigInteger === " + jMetaDataGeneral.getCodecIDStringAsBigInteger());
        System.out.println("Codec ID (found in some containers) AS URL === " + jMetaDataGeneral.getCodecIDStringAsURL());
        System.out.println("Name of the company AS Integer === " + jMetaDataGeneral.getEncodedLibraryCompanyNameAsInteger());
        System.out.println("Name of the company AS Long === " + jMetaDataGeneral.getEncodedLibraryCompanyNameAsLong());
        System.out.println("Name of the company AS LocalDateTime === " + jMetaDataGeneral.getEncodedLibraryCompanyNameAsLocalDateTime());
        System.out.println("Name of the company AS LocalTime === " + jMetaDataGeneral.getEncodedLibraryCompanyNameAsLocalTime());
        System.out.println("Name of the company AS String === " + jMetaDataGeneral.getEncodedLibraryCompanyNameAsString());
        System.out.println("Name of the company AS Boolean === " + jMetaDataGeneral.getEncodedLibraryCompanyNameAsBoolean());
        System.out.println("Name of the company AS BigInteger === " + jMetaDataGeneral.getEncodedLibraryCompanyNameAsBigInteger());
        System.out.println("Name of the company AS URL === " + jMetaDataGeneral.getEncodedLibraryCompanyNameAsURL());
        System.out.println("Name of the comic. AS Integer === " + jMetaDataGeneral.getComicAsInteger());
        System.out.println("Name of the comic. AS Long === " + jMetaDataGeneral.getComicAsLong());
        System.out.println("Name of the comic. AS LocalDateTime === " + jMetaDataGeneral.getComicAsLocalDateTime());
        System.out.println("Name of the comic. AS LocalTime === " + jMetaDataGeneral.getComicAsLocalTime());
        System.out.println("Name of the comic. AS String === " + jMetaDataGeneral.getComicAsString());
        System.out.println("Name of the comic. AS Boolean === " + jMetaDataGeneral.getComicAsBoolean());
        System.out.println("Name of the comic. AS BigInteger === " + jMetaDataGeneral.getComicAsBigInteger());
        System.out.println("Name of the comic. AS URL === " + jMetaDataGeneral.getComicAsURL());
        System.out.println("Editors name AS Integer === " + jMetaDataGeneral.getEditedByAsInteger());
        System.out.println("Editors name AS Long === " + jMetaDataGeneral.getEditedByAsLong());
        System.out.println("Editors name AS LocalDateTime === " + jMetaDataGeneral.getEditedByAsLocalDateTime());
        System.out.println("Editors name AS LocalTime === " + jMetaDataGeneral.getEditedByAsLocalTime());
        System.out.println("Editors name AS String === " + jMetaDataGeneral.getEditedByAsString());
        System.out.println("Editors name AS Boolean === " + jMetaDataGeneral.getEditedByAsBoolean());
        System.out.println("Editors name AS BigInteger === " + jMetaDataGeneral.getEditedByAsBigInteger());
        System.out.println("Editors name AS URL === " + jMetaDataGeneral.getEditedByAsURL());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Integer === " + jMetaDataGeneral.getFormatCommercialAsInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Long === " + jMetaDataGeneral.getFormatCommercialAsLong());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalDateTime === " + jMetaDataGeneral.getFormatCommercialAsLocalDateTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS LocalTime === " + jMetaDataGeneral.getFormatCommercialAsLocalTime());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS String === " + jMetaDataGeneral.getFormatCommercialAsString());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS Boolean === " + jMetaDataGeneral.getFormatCommercialAsBoolean());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS BigInteger === " + jMetaDataGeneral.getFormatCommercialAsBigInteger());
        System.out.println("Commercial name used by vendor for theses setings or Format field if there is no difference AS URL === " + jMetaDataGeneral.getFormatCommercialAsURL());
        System.out.println("Any comment related to the content. AS Integer === " + jMetaDataGeneral.getCommentAsInteger());
        System.out.println("Any comment related to the content. AS Long === " + jMetaDataGeneral.getCommentAsLong());
        System.out.println("Any comment related to the content. AS LocalDateTime === " + jMetaDataGeneral.getCommentAsLocalDateTime());
        System.out.println("Any comment related to the content. AS LocalTime === " + jMetaDataGeneral.getCommentAsLocalTime());
        System.out.println("Any comment related to the content. AS String === " + jMetaDataGeneral.getCommentAsString());
        System.out.println("Any comment related to the content. AS Boolean === " + jMetaDataGeneral.getCommentAsBoolean());
        System.out.println("Any comment related to the content. AS BigInteger === " + jMetaDataGeneral.getCommentAsBigInteger());
        System.out.println("Any comment related to the content. AS URL === " + jMetaDataGeneral.getCommentAsURL());
        System.out.println("Audio Codecs in this file with popular name (hint), separated by / AS Integer === " + jMetaDataGeneral.getAudioFormatWithHintListAsInteger());
        System.out.println("Audio Codecs in this file with popular name (hint), separated by / AS Long === " + jMetaDataGeneral.getAudioFormatWithHintListAsLong());
        System.out.println("Audio Codecs in this file with popular name (hint), separated by / AS LocalDateTime === " + jMetaDataGeneral.getAudioFormatWithHintListAsLocalDateTime());
        System.out.println("Audio Codecs in this file with popular name (hint), separated by / AS LocalTime === " + jMetaDataGeneral.getAudioFormatWithHintListAsLocalTime());
        System.out.println("Audio Codecs in this file with popular name (hint), separated by / AS String === " + jMetaDataGeneral.getAudioFormatWithHintListAsString());
        System.out.println("Audio Codecs in this file with popular name (hint), separated by / AS Boolean === " + jMetaDataGeneral.getAudioFormatWithHintListAsBoolean());
        System.out.println("Audio Codecs in this file with popular name (hint), separated by / AS BigInteger === " + jMetaDataGeneral.getAudioFormatWithHintListAsBigInteger());
        System.out.println("Audio Codecs in this file with popular name (hint), separated by / AS URL === " + jMetaDataGeneral.getAudioFormatWithHintListAsURL());
        System.out.println("Delay source (Container or Stream or empty) AS Integer === " + jMetaDataGeneral.getDelaySourceStringAsInteger());
        System.out.println("Delay source (Container or Stream or empty) AS Long === " + jMetaDataGeneral.getDelaySourceStringAsLong());
        System.out.println("Delay source (Container or Stream or empty) AS LocalDateTime === " + jMetaDataGeneral.getDelaySourceStringAsLocalDateTime());
        System.out.println("Delay source (Container or Stream or empty) AS LocalTime === " + jMetaDataGeneral.getDelaySourceStringAsLocalTime());
        System.out.println("Delay source (Container or Stream or empty) AS String === " + jMetaDataGeneral.getDelaySourceStringAsString());
        System.out.println("Delay source (Container or Stream or empty) AS Boolean === " + jMetaDataGeneral.getDelaySourceStringAsBoolean());
        System.out.println("Delay source (Container or Stream or empty) AS BigInteger === " + jMetaDataGeneral.getDelaySourceStringAsBigInteger());
        System.out.println("Delay source (Container or Stream or empty) AS URL === " + jMetaDataGeneral.getDelaySourceStringAsURL());
        System.out.println("Name of the person or organization who supplied the original subject AS Integer === " + jMetaDataGeneral.getOriginalSourceFormDistributedByAsInteger());
        System.out.println("Name of the person or organization who supplied the original subject AS Long === " + jMetaDataGeneral.getOriginalSourceFormDistributedByAsLong());
        System.out.println("Name of the person or organization who supplied the original subject AS LocalDateTime === " + jMetaDataGeneral.getOriginalSourceFormDistributedByAsLocalDateTime());
        System.out.println("Name of the person or organization who supplied the original subject AS LocalTime === " + jMetaDataGeneral.getOriginalSourceFormDistributedByAsLocalTime());
        System.out.println("Name of the person or organization who supplied the original subject AS String === " + jMetaDataGeneral.getOriginalSourceFormDistributedByAsString());
        System.out.println("Name of the person or organization who supplied the original subject AS Boolean === " + jMetaDataGeneral.getOriginalSourceFormDistributedByAsBoolean());
        System.out.println("Name of the person or organization who supplied the original subject AS BigInteger === " + jMetaDataGeneral.getOriginalSourceFormDistributedByAsBigInteger());
        System.out.println("Name of the person or organization who supplied the original subject AS URL === " + jMetaDataGeneral.getOriginalSourceFormDistributedByAsURL());
        System.out.println("Date/year the item was added to the owners collection AS Integer === " + jMetaDataGeneral.getAddedDateAsInteger());
        System.out.println("Date/year the item was added to the owners collection AS Long === " + jMetaDataGeneral.getAddedDateAsLong());
        System.out.println("Date/year the item was added to the owners collection AS LocalDateTime === " + jMetaDataGeneral.getAddedDateAsLocalDateTime());
        System.out.println("Date/year the item was added to the owners collection AS LocalTime === " + jMetaDataGeneral.getAddedDateAsLocalTime());
        System.out.println("Date/year the item was added to the owners collection AS String === " + jMetaDataGeneral.getAddedDateAsString());
        System.out.println("Date/year the item was added to the owners collection AS Boolean === " + jMetaDataGeneral.getAddedDateAsBoolean());
        System.out.println("Date/year the item was added to the owners collection AS BigInteger === " + jMetaDataGeneral.getAddedDateAsBigInteger());
        System.out.println("Date/year the item was added to the owners collection AS URL === " + jMetaDataGeneral.getAddedDateAsURL());
        System.out.println("Stream type name AS Integer === " + jMetaDataGeneral.getStreamKindStringAsInteger());
        System.out.println("Stream type name AS Long === " + jMetaDataGeneral.getStreamKindStringAsLong());
        System.out.println("Stream type name AS LocalDateTime === " + jMetaDataGeneral.getStreamKindStringAsLocalDateTime());
        System.out.println("Stream type name AS LocalTime === " + jMetaDataGeneral.getStreamKindStringAsLocalTime());
        System.out.println("Stream type name AS String === " + jMetaDataGeneral.getStreamKindStringAsString());
        System.out.println("Stream type name AS Boolean === " + jMetaDataGeneral.getStreamKindStringAsBoolean());
        System.out.println("Stream type name AS BigInteger === " + jMetaDataGeneral.getStreamKindStringAsBigInteger());
        System.out.println("Stream type name AS URL === " + jMetaDataGeneral.getStreamKindStringAsURL());
        System.out.println("More infos about the track AS Integer === " + jMetaDataGeneral.getTrackMoreAsInteger());
        System.out.println("More infos about the track AS Long === " + jMetaDataGeneral.getTrackMoreAsLong());
        System.out.println("More infos about the track AS LocalDateTime === " + jMetaDataGeneral.getTrackMoreAsLocalDateTime());
        System.out.println("More infos about the track AS LocalTime === " + jMetaDataGeneral.getTrackMoreAsLocalTime());
        System.out.println("More infos about the track AS String === " + jMetaDataGeneral.getTrackMoreAsString());
        System.out.println("More infos about the track AS Boolean === " + jMetaDataGeneral.getTrackMoreAsBoolean());
        System.out.println("More infos about the track AS BigInteger === " + jMetaDataGeneral.getTrackMoreAsBigInteger());
        System.out.println("More infos about the track AS URL === " + jMetaDataGeneral.getTrackMoreAsURL());
        System.out.println("Version of the product AS Integer === " + jMetaDataGeneral.getEncodedApplicationVersionAsInteger());
        System.out.println("Version of the product AS Long === " + jMetaDataGeneral.getEncodedApplicationVersionAsLong());
        System.out.println("Version of the product AS LocalDateTime === " + jMetaDataGeneral.getEncodedApplicationVersionAsLocalDateTime());
        System.out.println("Version of the product AS LocalTime === " + jMetaDataGeneral.getEncodedApplicationVersionAsLocalTime());
        System.out.println("Version of the product AS String === " + jMetaDataGeneral.getEncodedApplicationVersionAsString());
        System.out.println("Version of the product AS Boolean === " + jMetaDataGeneral.getEncodedApplicationVersionAsBoolean());
        System.out.println("Version of the product AS BigInteger === " + jMetaDataGeneral.getEncodedApplicationVersionAsBigInteger());
        System.out.println("Version of the product AS URL === " + jMetaDataGeneral.getEncodedApplicationVersionAsURL());
        System.out.println("The menu ID for this stream in this file AS Integer === " + jMetaDataGeneral.getMenuIDAsInteger());
        System.out.println("The menu ID for this stream in this file AS Long === " + jMetaDataGeneral.getMenuIDAsLong());
        System.out.println("The menu ID for this stream in this file AS LocalDateTime === " + jMetaDataGeneral.getMenuIDAsLocalDateTime());
        System.out.println("The menu ID for this stream in this file AS LocalTime === " + jMetaDataGeneral.getMenuIDAsLocalTime());
        System.out.println("The menu ID for this stream in this file AS String === " + jMetaDataGeneral.getMenuIDAsString());
        System.out.println("The menu ID for this stream in this file AS Boolean === " + jMetaDataGeneral.getMenuIDAsBoolean());
        System.out.println("The menu ID for this stream in this file AS BigInteger === " + jMetaDataGeneral.getMenuIDAsBigInteger());
        System.out.println("The menu ID for this stream in this file AS URL === " + jMetaDataGeneral.getMenuIDAsURL());
        System.out.println("Menu Codecsin this file, separated by / AS Integer === " + jMetaDataGeneral.getMenuFormatListAsInteger());
        System.out.println("Menu Codecsin this file, separated by / AS Long === " + jMetaDataGeneral.getMenuFormatListAsLong());
        System.out.println("Menu Codecsin this file, separated by / AS LocalDateTime === " + jMetaDataGeneral.getMenuFormatListAsLocalDateTime());
        System.out.println("Menu Codecsin this file, separated by / AS LocalTime === " + jMetaDataGeneral.getMenuFormatListAsLocalTime());
        System.out.println("Menu Codecsin this file, separated by / AS String === " + jMetaDataGeneral.getMenuFormatListAsString());
        System.out.println("Menu Codecsin this file, separated by / AS Boolean === " + jMetaDataGeneral.getMenuFormatListAsBoolean());
        System.out.println("Menu Codecsin this file, separated by / AS BigInteger === " + jMetaDataGeneral.getMenuFormatListAsBigInteger());
        System.out.println("Menu Codecsin this file, separated by / AS URL === " + jMetaDataGeneral.getMenuFormatListAsURL());
        System.out.println("Performer/Sort AS Integer === " + jMetaDataGeneral.getPerformerSortAsInteger());
        System.out.println("Performer/Sort AS Long === " + jMetaDataGeneral.getPerformerSortAsLong());
        System.out.println("Performer/Sort AS LocalDateTime === " + jMetaDataGeneral.getPerformerSortAsLocalDateTime());
        System.out.println("Performer/Sort AS LocalTime === " + jMetaDataGeneral.getPerformerSortAsLocalTime());
        System.out.println("Performer/Sort AS String === " + jMetaDataGeneral.getPerformerSortAsString());
        System.out.println("Performer/Sort AS Boolean === " + jMetaDataGeneral.getPerformerSortAsBoolean());
        System.out.println("Performer/Sort AS BigInteger === " + jMetaDataGeneral.getPerformerSortAsBigInteger());
        System.out.println("Performer/Sort AS URL === " + jMetaDataGeneral.getPerformerSortAsURL());
        System.out.println("Homepage for the movie AS Integer === " + jMetaDataGeneral.getMovieUrlAsInteger());
        System.out.println("Homepage for the movie AS Long === " + jMetaDataGeneral.getMovieUrlAsLong());
        System.out.println("Homepage for the movie AS LocalDateTime === " + jMetaDataGeneral.getMovieUrlAsLocalDateTime());
        System.out.println("Homepage for the movie AS LocalTime === " + jMetaDataGeneral.getMovieUrlAsLocalTime());
        System.out.println("Homepage for the movie AS String === " + jMetaDataGeneral.getMovieUrlAsString());
        System.out.println("Homepage for the movie AS Boolean === " + jMetaDataGeneral.getMovieUrlAsBoolean());
        System.out.println("Homepage for the movie AS BigInteger === " + jMetaDataGeneral.getMovieUrlAsBigInteger());
        System.out.println("Homepage for the movie AS URL === " + jMetaDataGeneral.getMovieUrlAsURL());
        System.out.println("A plot outline or a summary of the story. AS Integer === " + jMetaDataGeneral.getSummaryAsInteger());
        System.out.println("A plot outline or a summary of the story. AS Long === " + jMetaDataGeneral.getSummaryAsLong());
        System.out.println("A plot outline or a summary of the story. AS LocalDateTime === " + jMetaDataGeneral.getSummaryAsLocalDateTime());
        System.out.println("A plot outline or a summary of the story. AS LocalTime === " + jMetaDataGeneral.getSummaryAsLocalTime());
        System.out.println("A plot outline or a summary of the story. AS String === " + jMetaDataGeneral.getSummaryAsString());
        System.out.println("A plot outline or a summary of the story. AS Boolean === " + jMetaDataGeneral.getSummaryAsBoolean());
        System.out.println("A plot outline or a summary of the story. AS BigInteger === " + jMetaDataGeneral.getSummaryAsBigInteger());
        System.out.println("A plot outline or a summary of the story. AS URL === " + jMetaDataGeneral.getSummaryAsURL());
        System.out.println("Name of the track. e.g. track1, track 2 AS Integer === " + jMetaDataGeneral.getTrackAsInteger());
        System.out.println("Name of the track. e.g. track1, track 2 AS Long === " + jMetaDataGeneral.getTrackAsLong());
        System.out.println("Name of the track. e.g. track1, track 2 AS LocalDateTime === " + jMetaDataGeneral.getTrackAsLocalDateTime());
        System.out.println("Name of the track. e.g. track1, track 2 AS LocalTime === " + jMetaDataGeneral.getTrackAsLocalTime());
        System.out.println("Name of the track. e.g. track1, track 2 AS String === " + jMetaDataGeneral.getTrackAsString());
        System.out.println("Name of the track. e.g. track1, track 2 AS Boolean === " + jMetaDataGeneral.getTrackAsBoolean());
        System.out.println("Name of the track. e.g. track1, track 2 AS BigInteger === " + jMetaDataGeneral.getTrackAsBigInteger());
        System.out.println("Name of the track. e.g. track1, track 2 AS URL === " + jMetaDataGeneral.getTrackAsURL());
    }

}
